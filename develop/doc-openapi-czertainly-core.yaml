openapi: 3.1.0
info:
  title: CZERTAINLY Core API
  description: REST API for CZERTAINLY Core
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: info@czertainly.com
  license:
    name: MIT License
    url: https://github.com/CZERTAINLY/CZERTAINLY/blob/develop/LICENSE.md
  version: 2.14.1-SNAPSHOT
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:43217
  description: Generated server url
tags:
- name: Connector Management
  description: Connector Management API
- name: User Management
  description: User Management API
- name: Token Instance Controller
  description: Token Instance Controller API
- name: Authentication Management
  description: Authentication Management API
- name: Scheduled Jobs Management
  description: Scheduled Jobs Management API
- name: Client Operations v2
  description: Client Operations v2 API
- name: Global Metadata
  description: Global Metadata API
- name: Statistics/Dashboard
  description: Statistics/Dashboard API
- name: Local operations
  description: API only accessible from localhost
- name: Credential Management
  description: Credential Management API
- name: Workflow Triggers Management
  description: Workflow Triggers Management API
- name: Callback
  description: Callback API
- name: Cryptographic Key Controller
  description: Cryptographic Key Controller API
- name: External Notification Management
  description: "External Notification Management API for managing notification instances\
    \ that can be used to notify recipient(s) about events that were triggered in\
    \ the platform. Note that this API does not handle internal notifications. For\
    \ internal notifications, please refer to the Internal Notification API"
- name: Location Management
  description: Location Management API
- name: Entity Management
  description: Entity Management API
- name: Authority Management
  description: Authority Management API
- name: RA Profile Management
  description: RA Profile Management API
- name: CMP Profile Management
  description: CMP Profile Management API
- name: Discovery Management
  description: Discovery Management API
- name: ACME Profile Management
  description: ACME Profile Management API
- name: Approval profile Inventory
  description: Approval profile Inventory API
- name: Workflow Actions Management
  description: Workflow Actions Management API
- name: Custom Attributes
  description: Custom Attributes API
- name: Internal Notification
  description: "Internal Notifications API that manages notifications for logged user\
    \ in the platform. Note that this API does not manage nor trigger external notifications.\
    \ For external notifications, please refer to the External Notification Management\
    \ API."
- name: Token Profile Management
  description: Token Profile Management API
- name: ACME Account Management
  description: ACME Account Management API
- name: Audit Log
  description: Audit Log API
- name: Certificate & Key Group
  description: Group API
- name: Settings
  description: Settings API
- name: Certificate Inventory
  description: Certificate Inventory API
- name: SCEP Profile Management
  description: SCEP Profile Management API
- name: Compliance Profile Management
  description: Compliance Profile Management API
- name: Cryptographic Operations Controller
  description: Cryptographic Operations Controller API
- name: Workflow Rules Management
  description: Workflow Rules Management API
- name: Enums
  description: Enums API
- name: Connector Authentication
  description: Connector Authentication API
- name: Resource Management
  description: Resource Management API
- name: Connector Registration
  description: Connector Registration API
- name: Role Management
  description: Role Management API
- name: Approval Inventory
  description: Approval Inventory API
paths:
  /v1/workflows/triggers/{triggerUuid}:
    get:
      tags:
      - Workflow Triggers Management
      summary: Get Trigger details
      operationId: getTrigger
      parameters:
      - name: triggerUuid
        in: path
        description: Trigger UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Trigger details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    put:
      tags:
      - Workflow Triggers Management
      summary: Update Trigger
      operationId: updateTrigger
      parameters:
      - name: triggerUuid
        in: path
        description: Trigger UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTriggerRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Trigger updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDetailDto"
        "401":
          description: Unauthorized
    delete:
      tags:
      - Workflow Triggers Management
      summary: Delete Trigger
      operationId: deleteTrigger
      parameters:
      - name: triggerUuid
        in: path
        description: Trigger UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Trigger deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/workflows/rules/{ruleUuid}:
    get:
      tags:
      - Workflow Rules Management
      summary: Get Rule details
      operationId: getRule
      parameters:
      - name: ruleUuid
        in: path
        description: Rule UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Rule details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleDetailDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Workflow Rules Management
      summary: Update Rule
      operationId: updateRule
      parameters:
      - name: ruleUuid
        in: path
        description: Rule UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRuleRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Rule details updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - Workflow Rules Management
      summary: Delete Rule
      operationId: deleteRule
      parameters:
      - name: ruleUuid
        in: path
        description: Rule UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Rule deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/workflows/executions/{executionUuid}:
    get:
      tags:
      - Workflow Actions Management
      summary: Get Execution Details
      operationId: getExecution
      parameters:
      - name: executionUuid
        in: path
        description: Execution UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Execution details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Workflow Actions Management
      summary: Update Execution
      operationId: updateExecution
      parameters:
      - name: executionUuid
        in: path
        description: Execution UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateExecutionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Execution updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionDto"
        "401":
          description: Unauthorized
    delete:
      tags:
      - Workflow Actions Management
      summary: Delete Execution
      operationId: deleteExecution
      parameters:
      - name: executionUuid
        in: path
        description: Execution UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "204":
          description: Execution deleted
  /v1/workflows/conditions/{conditionUuid}:
    get:
      tags:
      - Workflow Rules Management
      summary: Get Condition details
      operationId: getCondition
      parameters:
      - name: conditionUuid
        in: path
        description: Condition UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: Condition details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionDto"
    put:
      tags:
      - Workflow Rules Management
      summary: Update Condition
      operationId: updateCondition
      parameters:
      - name: conditionUuid
        in: path
        description: Condition UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConditionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Condition updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionDto"
        "401":
          description: Unauthorized
    delete:
      tags:
      - Workflow Rules Management
      summary: Delete Condition
      operationId: deleteCondition
      parameters:
      - name: conditionUuid
        in: path
        description: Condition UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "204":
          description: Condition deleted
  /v1/workflows/actions/{actionUuid}:
    get:
      tags:
      - Workflow Actions Management
      summary: Get Action Details
      operationId: getAction
      parameters:
      - name: actionUuid
        in: path
        description: Action UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Action details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    put:
      tags:
      - Workflow Actions Management
      summary: Update Action
      operationId: updateAction
      parameters:
      - name: actionUuid
        in: path
        description: Action UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateActionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Action updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - Workflow Actions Management
      summary: Delete Action
      operationId: deleteAction
      parameters:
      - name: actionUuid
        in: path
        description: Action UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Action deleted
        "401":
          description: Unauthorized
  /v1/users/{userUuid}:
    get:
      tags:
      - User Management
      summary: Get user details
      operationId: getUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - User Management
      summary: Update User
      operationId: updateUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: User details updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - User Management
      summary: Delete User
      operationId: deleteUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: User deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/roles/{roleUuid}:
    put:
      tags:
      - User Management
      summary: Add role to User
      operationId: addRole
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "401":
          description: Unauthorized
    delete:
      tags:
      - User Management
      summary: Remove role from User
      operationId: removeRole
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User roles removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "401":
          description: Unauthorized
  /v1/tokens/{uuid}:
    get:
      tags:
      - Token Instance Controller
      summary: Get Token Instance Detail
      operationId: getTokenInstance
      parameters:
      - name: uuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Token Instance Detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Token Instance Controller
      summary: Update Token Instance
      operationId: updateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenInstanceRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Token Instance Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDetailDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Token Instance Controller
      description: Delete Token Instance
      operationId: deleteTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Token Instance deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Token Instance Controller
      summary: Reload Token Instance status
      operationId: reloadStatus
      parameters:
      - name: uuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token Instance Status Reloaded from Connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}:
    get:
      tags:
      - Token Profile Management
      summary: Details of Token Profile
      operationId: getTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Token Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProfileDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Token Profile Management
      summary: Edit Token Profile
      operationId: editTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditTokenProfileRequestDto"
        required: true
      responses:
        "204":
          description: Token Profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProfileDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Token Profile Management
      summary: Delete Token Profile
      operationId: deleteTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token Profile deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/usages:
    put:
      tags:
      - Token Profile Management
      summary: Update Key Usage
      operationId: updateKeyUsages
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenProfileKeyUsageRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key Usages Updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usage
      description: "If the request body provided, only those key items will be updated.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be updated"
      operationId: updateKeyUsages_1
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateKeyUsageRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Keys Usages Updates
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/usages:
    put:
      tags:
      - Token Profile Management
      summary: Update Key Usages for Multiple Token Profiles
      operationId: updateKeysUsages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkTokenProfileKeyUsageRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key Usages Updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/settings/platform:
    get:
      tags:
      - Settings
      summary: Get platform settings
      operationId: getPlatformSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Platform settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformSettingsDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Settings
      summary: Update platform setting
      operationId: updatePlatformSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlatformSettingsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Setting updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/settings/notifications:
    get:
      tags:
      - Settings
      summary: Get notification settings
      operationId: getNotificationsSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Notification settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettingsDto"
    put:
      tags:
      - Settings
      summary: Update notifications setting
      operationId: updateNotificationsSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSettingsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Setting updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/settings/logging:
    get:
      tags:
      - Settings
      summary: Get logging settings
      operationId: getLoggingSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Logging settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggingSettingsDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Settings
      summary: Update logging setting
      operationId: updateLoggingSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoggingSettingsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Logging settings updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/settings/authentication:
    get:
      tags:
      - Settings
      summary: Get authentication settings
      operationId: getAuthenticationSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Authentication settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSettingsDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Settings
      summary: Update authentication settings
      operationId: updateAuthenticationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationSettingsUpdateDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authentication settings updated
  /v1/settings/authentication/oauth2Providers/{providerName}:
    get:
      tags:
      - Settings
      summary: Get OAuth2 Provider settings
      operationId: getOAuth2ProviderSettings
      parameters:
      - name: providerName
        in: path
        description: OAuth2 Provider Name
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: OAuth2 Provider settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2ProviderSettingsDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Settings
      summary: Update OAuth2 Provider settings
      operationId: updateOAuth2ProviderSettings
      parameters:
      - name: providerName
        in: path
        description: OAuth2 Provider Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuth2ProviderSettingsUpdateDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Setting updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Settings
      summary: Remove OAuth2 Provider
      operationId: removeOAuth2Provider
      parameters:
      - name: providerName
        in: path
        description: OAuth2 Provider Name
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: OAuth2 Provider removed.
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scheduler/jobs/{uuid}:
    get:
      tags:
      - Scheduled Jobs Management
      summary: Scheduled job detail
      operationId: getScheduledJobDetail
      parameters:
      - name: uuid
        in: path
        description: Scheduled job UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Scheduled job detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledJobDetailDto"
    put:
      tags:
      - Scheduled Jobs Management
      summary: Edit Scheduled job
      operationId: updateScheduledJob
      parameters:
      - name: uuid
        in: path
        description: Scheduled job UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScheduledJob"
        required: true
      responses:
        "200":
          description: Scheduled job updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledJobDetailDto"
    delete:
      tags:
      - Scheduled Jobs Management
      summary: Delete Scheduled job
      operationId: deleteScheduledJob
      parameters:
      - name: uuid
        in: path
        description: Scheduled job UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Scheduled job deleted
  /v1/scepProfiles/{uuid}:
    get:
      tags:
      - SCEP Profile Management
      summary: Get details of SCEP Profile
      operationId: getScepProfile
      parameters:
      - name: uuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: SCEP Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScepProfileDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - SCEP Profile Management
      summary: Edit SCEP Profile
      operationId: editScepProfile
      parameters:
      - name: uuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScepProfileEditRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: SCEP Profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScepProfileDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - SCEP Profile Management
      summary: Delete SCEP Profile
      operationId: deleteScepProfile
      parameters:
      - name: uuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: SCEP Profile deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/roles/{roleUuid}:
    get:
      tags:
      - Role Management
      summary: Get role details
      operationId: getRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Role details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDetailDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Role Management
      summary: Update Role
      operationId: updateRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Role details updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDetailDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - Role Management
      summary: Delete Role
      operationId: deleteRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Role deleted
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/permissions/{resourceUuid}/objects/{objectUuid}:
    put:
      tags:
      - Role Management
      summary: Update Resource Objects to a Role
      operationId: updateResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectPermissionsRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Resource Objects added
        "401":
          description: Unauthorized
    delete:
      tags:
      - Role Management
      summary: Update Resource Objects to a Role
      operationId: removeResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Resource Objects added
        "401":
          description: Unauthorized
  /v1/notificationInstances/{uuid}:
    get:
      tags:
      - External Notification Management
      summary: Details of an Notification instance
      operationId: getNotificationInstance
      parameters:
      - name: uuid
        in: path
        description: Notification instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Notification instance details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationInstanceDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - External Notification Management
      summary: Edit Notification instance
      operationId: editNotificationInstance
      parameters:
      - name: uuid
        in: path
        description: Notification instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationInstanceUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Notification instance details updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationInstanceDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - External Notification Management
      summary: Delete Notification instance
      operationId: deleteNotificationInstance
      parameters:
      - name: uuid
        in: path
        description: Notification instance UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Notification instance deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/{uuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail without Token Instance
      operationId: getKey
      parameters:
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Cryptographic Key Controller
      summary: Edit Key
      operationId: editKey
      parameters:
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditKeyRequestDto"
        required: true
      responses:
        "204":
          description: Key updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Cryptographic Key without Token Instance
      description: "If the request body provided, only those key items will be deleted.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: deleteKey
      parameters:
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Key deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usages for Multiple Keys
      description: Update the key usages for multiple keys and all the items inside
        it
      operationId: updateKeysUsages_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkKeyUsageRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Keys Usages Updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/items/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usages for Multiple Key Items
      description: Update the key usages for multiple keys Items
      operationId: updateKeyItemUsages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkKeyItemUsageRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key Items Usages Updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/groups/{uuid}:
    get:
      tags:
      - Certificate & Key Group
      summary: Group details
      operationId: getGroup
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Group details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Certificate & Key Group
      summary: Edit Group
      operationId: editGroup
      parameters:
      - name: uuid
        in: path
        description: Group UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Certificate & Key Group
      summary: Delete Group
      operationId: deleteGroup
      parameters:
      - name: uuid
        in: path
        description: Group UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Group deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}:
    get:
      tags:
      - Entity Management
      summary: Get Entity instance details
      operationId: getEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authority instance details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityInstanceDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Entity Management
      summary: Edit Entity instance
      operationId: editEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInstanceUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authority instance details updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityInstanceDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Entity Management
      summary: Delete Entity instance
      operationId: deleteEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Entity instance deleted
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}:
    get:
      tags:
      - Location Management
      summary: Get Location Details
      operationId: getLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Location detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Location Management
      summary: Edit Location
      operationId: editLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditLocationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Location updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
    delete:
      tags:
      - Location Management
      summary: Delete Location
      operationId: deleteLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Location deleted
  /v1/entities/{entityUuid}/locations/{locationUuid}/sync:
    put:
      tags:
      - Location Management
      summary: Sync Location content
      operationId: updateLocationContent
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Content updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}/certificates/{certificateUuid}:
    put:
      tags:
      - Location Management
      summary: Push Certificate to Location
      operationId: pushCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PushToLocationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Certificate pushed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Location Management
      summary: Remove Certificate from Location
      operationId: removeCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Location Management
      summary: Renew Certificate in Location
      operationId: renewCertificateInLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Content updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/credentials/{uuid}:
    get:
      tags:
      - Credential Management
      summary: Details of a Credentials
      operationId: getCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Credential details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Credential Management
      summary: Edit Credential
      operationId: editCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredentialUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Credential updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialDto"
    delete:
      tags:
      - Credential Management
      summary: Delete Credential
      operationId: deleteCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Credential deleted
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}:
    get:
      tags:
      - Connector Management
      summary: Get details of a Connector
      operationId: getConnector
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Connector details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Connector Management
      summary: Edit a Connector
      operationId: editConnector
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorUpdateRequestDto"
        required: true
      responses:
        "200":
          description: Connector updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Connector Management
      summary: Delete a Connector
      operationId: deleteConnector
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Connector deleted
  /v1/connectors/{uuid}/reconnect:
    put:
      tags:
      - Connector Management
      summary: Reconnect to a Connector
      operationId: reconnect
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Reconnect to a Connector
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}/approve:
    put:
      tags:
      - Connector Management
      summary: Approve a Connector
      operationId: approve
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Connector Approved
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/connectors/reconnect:
    put:
      tags:
      - Connector Management
      summary: Reconnect multiple Connectors
      operationId: bulkReconnect
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Reconnect multiple Connectors initiated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/connect:
    put:
      tags:
      - Connector Management
      summary: Connect to a Connector
      operationId: connect
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Connector connected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/approve:
    put:
      tags:
      - Connector Management
      summary: Approve multiple Connector
      operationId: bulkApprove
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Approve multiple Connectors
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/cmpProfiles/{cmpProfileUuid}:
    get:
      tags:
      - CMP Profile Management
      summary: Get details of CMP Profile
      operationId: getCmpProfile
      parameters:
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: CMP Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CmpProfileDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - CMP Profile Management
      summary: Edit CMP Profile
      operationId: editCmpProfile
      parameters:
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CmpProfileEditRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: CMP Profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CmpProfileDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - CMP Profile Management
      summary: Delete CMP Profile
      operationId: deleteCmpProfile
      parameters:
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: CMP Profile deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{uuid}:
    get:
      tags:
      - Authority Management
      summary: Details of an Authority instance
      operationId: getAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authority instance details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorityInstanceDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Authority Management
      summary: Edit Authority instance
      operationId: editAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorityInstanceUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authority instance details updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorityInstanceDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Authority Management
      summary: Delete Authority instance
      operationId: deleteAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Authority instance deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}:
    get:
      tags:
      - RA Profile Management
      summary: Details of RA Profile
      operationId: getRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: RA Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - RA Profile Management
      summary: Edit RA Profile
      operationId: editRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditRaProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: RA Profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileDto"
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - RA Profile Management
      summary: Delete RA Profile
      operationId: deleteRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: RA Profile deleted
  /v1/auth/profile:
    get:
      tags:
      - Authentication Management
      summary: Profile Authorization
      operationId: profile
      responses:
        "200":
          description: Authenticate a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Authentication Management
      summary: Update User Profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
        required: true
      responses:
        "200":
          description: Authenticate a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/metadata/{uuid}:
    get:
      tags:
      - Global Metadata
      summary: Global Metadata details
      operationId: getGlobalMetadata
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Global Metadata details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalMetadataDefinitionDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Global Metadata
      summary: Edit Global Metadata
      operationId: editGlobalMetadata
      parameters:
      - name: uuid
        in: path
        description: Global Metadata UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalMetadataUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Global Metadata updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalMetadataDefinitionDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Global Metadata
      summary: Delete Global Metadata
      operationId: deleteGlobalMetadata
      parameters:
      - name: uuid
        in: path
        description: Global Metadata UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Global Metadata deleted
  /v1/attributes/custom/{uuid}:
    get:
      tags:
      - Custom Attributes
      summary: Custom Attribute details
      operationId: getCustomAttribute
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Custom Attribute details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomAttributeDefinitionDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Custom Attributes
      summary: Edit Custom Attribute
      operationId: editCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Attribute UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomAttributeUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Custom Attribute updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomAttributeDefinitionDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Custom Attributes
      summary: Delete Custom Attribute
      operationId: deleteCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Custom Attribute deleted
  /v1/approvalProfiles/{uuid}:
    get:
      tags:
      - Approval profile Inventory
      summary: Get Approval Profile Details
      operationId: getApprovalProfile
      parameters:
      - name: uuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      - name: approvalProfileForVersionDto
        in: query
        description: Select specific version of the approval profile
        required: true
        schema:
          $ref: "#/components/schemas/ApprovalProfileForVersionDto"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Approval profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalProfileDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - Approval profile Inventory
      summary: Edit an Approval profile
      operationId: editApprovalProfile
      parameters:
      - name: uuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApprovalProfileUpdateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Approval profile updated
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Approval profile Inventory
      summary: Delete an approval profile
      operationId: deleteApprovalProfile
      parameters:
      - name: uuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Approval profile deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles/{uuid}:
    get:
      tags:
      - ACME Profile Management
      summary: Get details of ACME Profile
      operationId: getAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: ACME Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcmeProfileDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    put:
      tags:
      - ACME Profile Management
      summary: Edit ACME Profile
      operationId: editAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcmeProfileEditRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: ACME Profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcmeProfileDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - ACME Profile Management
      summary: Delete ACME Profile
      operationId: deleteAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: ACME Profile deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeAccounts/revoke:
    put:
      tags:
      - ACME Account Management
      summary: Revoke multiple ACME Accounts
      operationId: bulkRevokeAcmeAccount
      requestBody:
        description: ACME Account UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: ACME Accounts revoked
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates:
    post:
      tags:
      - Client Operations v2
      summary: Issue Certificate
      operationId: issueCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCertificateSignRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificateDataResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/revoke:
    post:
      tags:
      - Client Operations v2
      summary: Revoke Certificate
      operationId: revokeCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCertificateRevocationDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Certificate revoked
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/renew:
    post:
      tags:
      - Client Operations v2
      summary: Renew Certificate
      operationId: renewCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCertificateRenewRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Certificate renewed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificateDataResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/rekey:
    post:
      tags:
      - Client Operations v2
      summary: Rekey Certificate
      operationId: rekeyCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCertificateRekeyRequestDto"
        required: true
      responses:
        "200":
          description: Certificate regenerated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificateDataResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/issue:
    post:
      tags:
      - Client Operations v2
      summary: Issue existing certificate with status Requested
      operationId: issueRequestedCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientCertificateDataResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke/validate:
    post:
      tags:
      - Client Operations v2
      summary: Validate revocation Attributes
      operationId: validateRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue/validate:
    post:
      tags:
      - Client Operations v2
      summary: Validate issue Certificate Attributes
      operationId: validateIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
  /v1/{resource}/{parentObjectUuid}/callback:
    post:
      tags:
      - Callback
      summary: Resource Callback API
      description: API to trigger the Callback for resource.
      operationId: resourceCallback
      parameters:
      - name: resource
        in: path
        description: Name of the resource
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      - name: parentObjectUuid
        in: path
        description: Parent Object UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestAttributeCallback"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Callback executed
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/workflows/triggers:
    get:
      tags:
      - Workflow Triggers Management
      summary: List Triggers
      operationId: listTriggers
      parameters:
      - name: resource
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Resource"
      - name: eventResource
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of triggers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TriggerDto"
        "401":
          description: Unauthorized
    post:
      tags:
      - Workflow Triggers Management
      summary: Create Trigger
      operationId: createTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "201":
          description: Trigger created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/workflows/rules:
    get:
      tags:
      - Workflow Rules Management
      summary: List Rules
      operationId: listRules
      parameters:
      - name: resource
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of rules fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RuleDto"
        "401":
          description: Unauthorized
    post:
      tags:
      - Workflow Rules Management
      summary: Create Rule
      operationId: createRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "201":
          description: Rule created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleDetailDto"
        "401":
          description: Unauthorized
  /v1/workflows/executions:
    get:
      tags:
      - Workflow Actions Management
      summary: List executions
      operationId: listExecutions
      parameters:
      - name: resource
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: List of executions fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    post:
      tags:
      - Workflow Actions Management
      summary: Create Execution
      operationId: createExecution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "201":
          description: Execution created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/workflows/conditions:
    get:
      tags:
      - Workflow Rules Management
      summary: List Conditions
      operationId: listConditions
      parameters:
      - name: resource
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: List of conditions fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConditionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    post:
      tags:
      - Workflow Rules Management
      summary: Create Condition
      operationId: createCondition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConditionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "201":
          description: Condition created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionDto"
  /v1/workflows/actions:
    get:
      tags:
      - Workflow Actions Management
      summary: List Actions
      operationId: listActions
      parameters:
      - name: resource
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: List of actions fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    post:
      tags:
      - Workflow Actions Management
      summary: Create Action
      operationId: createAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "201":
          description: Action created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/users:
    get:
      tags:
      - User Management
      summary: List Users
      operationId: listUsers
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: List of users fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
    post:
      tags:
      - User Management
      summary: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "201":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/users/identify:
    post:
      tags:
      - User Management
      summary: Identify User
      operationId: identifyUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIdentificationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: User identified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
  /v1/tokens:
    get:
      tags:
      - Token Instance Controller
      summary: List Token Instances
      operationId: listTokenInstances
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Token Instances retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenInstanceDto"
    post:
      tags:
      - Token Instance Controller
      summary: Create a new Token Instance
      operationId: createTokenInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenInstanceRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "201":
          description: Token Instance Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDetailDto"
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles:
    post:
      tags:
      - Token Profile Management
      summary: Create Token Profile
      operationId: createTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTokenProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "201":
          description: Token Profile added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProfileDetailDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}:
    post:
      tags:
      - Cryptographic Key Controller
      summary: Create a new Cryptographic Key
      operationId: createKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: UUID of the Token Profile
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Type of the key to be created
        required: true
        schema:
          $ref: "#/components/schemas/KeyRequestType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyRequestDto"
        required: true
      responses:
        "201":
          description: Cryptographic Key Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scepProfiles:
    get:
      tags:
      - SCEP Profile Management
      summary: Get list of SCEP Profiles
      operationId: listScepProfiles
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: SCEP Profile list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScepProfileDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - SCEP Profile Management
      summary: Create SCEP Profile
      operationId: createScepProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScepProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "201":
          description: SCEP Profile created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScepProfileDetailDto"
  /v1/roles:
    get:
      tags:
      - Role Management
      summary: List Roles
      operationId: listRoles
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of roles fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleDto"
        "401":
          description: Unauthorized
    post:
      tags:
      - Role Management
      summary: Create Role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "201":
          description: Role created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDetailDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/permissions:
    get:
      tags:
      - Role Management
      summary: Get Permissions of a Role
      operationId: getRolePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: Role permissions retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectPermissionsDto"
    post:
      tags:
      - Role Management
      summary: Add permissions to Role
      operationId: savePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RolePermissionsRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectPermissionsDto"
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/permissions/{resourceUuid}/objects:
    get:
      tags:
      - Role Management
      summary: Get Resource Objects of a Role
      operationId: getResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Resource Objects retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ObjectPermissionsDto"
        "401":
          description: Unauthorized
    post:
      tags:
      - Role Management
      summary: Add Resource Objects to a Role
      operationId: addResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ObjectPermissionsRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Resource Objects added
        "401":
          description: Unauthorized
  /v1/raProfiles/compliance:
    post:
      tags:
      - RA Profile Management
      summary: Initiate Certificate Compliance Check
      operationId: checkRaProfileCompliance
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Compliance check initiated
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/verify:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Verify data using a Key
      operationId: verifyData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Data decrypted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyDataResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/sign:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Sign data using a Key
      operationId: signData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignDataRequestDto"
        required: true
      responses:
        "200":
          description: Data signed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignDataResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/encrypt:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Encrypt data using a Key
      operationId: encryptData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CipherDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Data encrypted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptDataResponseDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/decrypt:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Decrypt data using a Key
      operationId: decryptData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CipherDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Data decrypted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptDataResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/operations/tokens/{tokenInstanceUuid}/random:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Generate random data
      operationId: randomData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RandomDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Random data generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RandomDataResponseDto"
  /v1/notificationInstances:
    get:
      tags:
      - External Notification Management
      summary: List of available Notification instances
      operationId: listNotificationInstances
      responses:
        "200":
          description: List of Notification instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationInstanceDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - External Notification Management
      summary: Add Notification instance
      operationId: createNotificationInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationInstanceRequestDto"
        required: true
      responses:
        "201":
          description: New Notification instance added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/locations:
    post:
      tags:
      - Location Management
      summary: List Locations
      operationId: listLocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Locations retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationsResponseDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/local/admins:
    post:
      tags:
      - Local operations
      summary: Create Administrator
      operationId: addAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Admin created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys:
    post:
      tags:
      - Cryptographic Key Controller
      summary: List cryptographic keys
      operationId: listCryptographicKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of all the cryptographic keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CryptographicKeyResponseDto"
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Multiple Cryptographic Key
      operationId: deleteKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Keys deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/groups:
    get:
      tags:
      - Certificate & Key Group
      summary: List Groups
      operationId: listGroups
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: list of available Group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupDto"
    post:
      tags:
      - Certificate & Key Group
      summary: Create Group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "201":
          description: Group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Certificate & Key Group
      summary: Delete multiple Groups
      operationId: bulkDeleteGroup
      requestBody:
        description: Group UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Groups deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities:
    post:
      tags:
      - Entity Management
      summary: Add Entity instance
      operationId: createEntityInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInstanceRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "201":
          description: Entity instance created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations:
    post:
      tags:
      - Location Management
      summary: Add Location
      operationId: addLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddLocationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "201":
          description: Location added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}/certificates:
    post:
      tags:
      - Location Management
      summary: Issue Certificate to Location
      operationId: issueCertificateToLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueToLocationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/attributes/location/validate:
    post:
      tags:
      - Entity Management
      summary: Validate Location Attributes
      operationId: validateLocationAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
        "204":
          description: No Content
  /v1/entities/list:
    post:
      tags:
      - Entity Management
      summary: List Entity instances
      operationId: listEntityInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of Entity instances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityInstanceResponseDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/discoveries:
    post:
      tags:
      - Discovery Management
      summary: Create Discovery
      operationId: createDiscovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscoveryDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "201":
          description: Discovery Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Discovery Management
      summary: Delete Multiple Discoveries
      operationId: bulkDeleteDiscovery
      requestBody:
        description: Discovery UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Discoveries deleted
  /v1/discoveries/schedule:
    post:
      tags:
      - Discovery Management
      summary: Schedule Discovery
      operationId: scheduleDiscovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleDiscoveryDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "201":
          description: Discovery Scheduled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/discoveries/list:
    post:
      tags:
      - Discovery Management
      summary: List Discovery
      operationId: listDiscoveries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of available Discoveries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscoveryResponseDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/credentials:
    get:
      tags:
      - Credential Management
      summary: List of All Credentials
      operationId: listCredentials
      responses:
        "200":
          description: List of all Credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CredentialDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Credential Management
      summary: Add Credential
      operationId: createCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredentialRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "201":
          description: New Credential added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Credential Management
      summary: Delete multiple Credentials
      operationId: bulkDeleteCredential
      requestBody:
        description: Credential UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Credentials deleted
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/connectors:
    get:
      tags:
      - Connector Management
      summary: List Connectors by Function Group and Kind
      operationId: listConnectors
      parameters:
      - name: functionGroup
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/FunctionGroupCode"
      - name: kind
        in: query
        required: false
        schema:
          type: string
      - name: status
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/ConnectorStatus"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List all Connectors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectorDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Connector Management
      summary: Create a new Connector
      operationId: createConnector
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorRequestDto"
        required: true
      responses:
        "200":
          description: New Connector created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Connector Management
      summary: Delete multiple Connectors
      operationId: bulkDeleteConnector
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: Connectors deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}/{functionGroup}/{kind}/validate:
    post:
      tags:
      - Connector Management
      summary: Validate Attributes
      operationId: validateAttributes
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: functionGroup
        in: path
        description: Function Group name
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attributes Validated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}/{functionGroup}/{kind}/callback:
    post:
      tags:
      - Callback
      summary: Connector Callback API
      description: API to trigger the Callback for Connector.
      operationId: callback
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: functionGroup
        in: path
        description: Function Group
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestAttributeCallback"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Callback executed
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/auth/attributes/jwt/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate JWT auth Attributes
      operationId: validateJWTAuthAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
  /v1/connectors/auth/attributes/certificate/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate certificate auth Attributes
      operationId: validateCertificateAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
  /v1/connectors/auth/attributes/basic/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate basic auth Attributes
      operationId: validateBasicAuthAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
  /v1/connectors/auth/attributes/apiKey/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate API Key Attributes
      operationId: validateApiKeyAuthAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes validated
  /v1/connector/register:
    post:
      tags:
      - Connector Registration
      summary: Register a Connector
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Connector registration initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles:
    get:
      tags:
      - Compliance Profile Management
      summary: List of available Compliance Profiles
      operationId: listComplianceProfiles
      responses:
        "200":
          description: Compliance Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComplianceProfilesListDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Compliance Profile Management
      summary: Add Compliance Profile
      operationId: createComplianceProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComplianceProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "201":
          description: New Compliance profile added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete multiple Compliance Profiles
      operationId: bulkDeleteComplianceProfiles
      requestBody:
        description: Compliance Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Compliance Profiles deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/{uuid}/rules:
    post:
      tags:
      - Compliance Profile Management
      summary: Add rule to a Compliance Profile
      operationId: addRule
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComplianceRuleAdditionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: New rule added to the profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplianceProfileRuleDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete rule from a Compliance Profile
      operationId: removeRule
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComplianceRuleDeletionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "204":
          description: New group is added to the profile
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/{uuid}/groups:
    post:
      tags:
      - Compliance Profile Management
      summary: Add group to a Compliance Profile
      operationId: addGroup
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComplianceGroupRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: New group is deleted from the profile
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete group from a Compliance Profile
      operationId: removeGroup
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComplianceGroupRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "204":
          description: New rule is added to the profile
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/compliance:
    post:
      tags:
      - Compliance Profile Management
      summary: Initiate Certificate Compliance Check
      operationId: checkCompliance
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Compliance check initiated
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles:
    get:
      tags:
      - CMP Profile Management
      summary: Get list of CMP Profiles
      operationId: listCmpProfiles
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: CMP Profile list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CmpProfileDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - CMP Profile Management
      summary: Create CMP Profile
      operationId: createCmpProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CmpProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "201":
          description: CMP Profile created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CmpProfileDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates:
    post:
      tags:
      - Certificate Inventory
      summary: List Certificates
      operationId: listCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of all the certificates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Certificate Inventory
      summary: Update Group and/or Owner for multiple Certificates
      description: "In this operation, when the list of Certificate UUIDs are provided\
        \ and the filter is left as null or undefined, then the change will be applied\
        \ only to the list of Certificate UUIDs provided. When the filter is provided\
        \ in the request, the list of UUIDs will be ignored and the change will be\
        \ applied for the all the certificates that matches the filter criteria. To\
        \ apply this change for all the Certificates in the inventory, provide an\
        \ empty array \"[]\" for the value of \"filters\" in the request body"
      operationId: bulkUpdateCertificateObjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultipleCertificateObjectUpdateDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Certificate objects updated
        "500":
          description: Internal Server Error
        "501":
          description: Certificate objects update by filters not supported
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/certificates/upload:
    post:
      tags:
      - Certificate Inventory
      summary: Upload a new Certificate
      operationId: upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadCertificateRequestDto"
        required: true
      responses:
        "201":
          description: Certificate uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/delete:
    post:
      tags:
      - Certificate Inventory
      summary: Delete multiple certificates
      description: "In this operation, when the list of Certificate UUIDs are provided\
        \ and the filter is left as null or undefined, then the change will be applied\
        \ only to the list of Certificate UUIDs provided. When the filter is provided\
        \ in the request, the list of UUIDs will be ignored and the change will be\
        \ applied for the all the certificates that matches the filter criteria. To\
        \ apply this change for all the Certificates in the inventory, provide an\
        \ empty array \"[]\" for the value of \"filters\" in the request body"
      operationId: bulkDeleteCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveCertificateDto"
        required: true
      responses:
        "200":
          description: Certificates deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOperationResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "501":
          description: Certificate objects delete by filters not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOperationResponse"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/create:
    post:
      tags:
      - Certificate Inventory
      summary: Submit certificate request
      operationId: submitCertificateRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCertificateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: "Certificate request submit, certificate created and ready\
            \ to be issued"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateDetailDto"
  /v1/certificates/content:
    post:
      tags:
      - Certificate Inventory
      summary: Get Certificate Content
      operationId: getCertificateContent
      requestBody:
        description: Certificate UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Certificate content retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateContentDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/compliance:
    post:
      tags:
      - Certificate Inventory
      summary: Initiate Certificate Compliance Check
      operationId: checkCertificatesCompliance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateComplianceCheckDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Compliance check initiated
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities:
    get:
      tags:
      - Authority Management
      summary: List of available Authority instances
      operationId: listAuthorityInstances
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of Authority instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthorityInstanceDto"
    post:
      tags:
      - Authority Management
      summary: Add Authority instance
      operationId: createAuthorityInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorityInstanceRequestDto"
        required: true
      responses:
        "201":
          description: New Authority instance added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Authority Management
      summary: Delete multiple Authority instances
      operationId: bulkDeleteAuthorityInstance
      requestBody:
        description: Authority Instance UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authority instances deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{uuid}/attributes/raProfile/validate:
    post:
      tags:
      - Authority Management
      summary: Validate RA Profile Attributes
      operationId: validateRAProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attribute information validated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles:
    post:
      tags:
      - RA Profile Management
      summary: Create RA Profile
      operationId: createRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRaProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "201":
          description: RA Profile added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/auditLogs:
    post:
      tags:
      - Audit Log
      summary: List Audit logs
      operationId: listAuditLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of audit logs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/auditLogs/purge:
    post:
      tags:
      - Audit Log
      summary: Purge Audit logs
      operationId: purgeAuditLogs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SearchFilterRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Audit logs purged
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/auditLogs/export:
    post:
      tags:
      - Audit Log
      summary: Export Audit logs
      operationId: exportAuditLogs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SearchFilterRequestDto"
        required: true
      responses:
        "200":
          description: Export of audit logs
          content:
            application/json:
              schema:
                type: string
                format: binary
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/metadata:
    get:
      tags:
      - Global Metadata
      summary: List Global Metadata
      operationId: listGlobalMetadata
      responses:
        "200":
          description: list of available Global Metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeDefinitionDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Global Metadata
      summary: Create Global Metadata
      operationId: createGlobalMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalMetadataCreateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "201":
          description: Global Metadata created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
    delete:
      tags:
      - Global Metadata
      summary: Delete multiple Global Metadata
      operationId: bulkDeleteGlobalMetadata
      requestBody:
        description: Global Metadata UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Global Metadata deleted
  /v1/attributes/metadata/promote:
    get:
      tags:
      - Global Metadata
      summary: Get Available Connector Metadata
      operationId: getConnectorMetadata
      parameters:
      - name: connectorUuid
        in: query
        required: false
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Connector Metadata retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectorMetadataResponseDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Global Metadata
      summary: Promote Connector Metadata to Global Metadata
      operationId: promoteConnectorMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorMetadataPromotionRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Connector Metadata promoted to global metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalMetadataDefinitionDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom:
    get:
      tags:
      - Custom Attributes
      summary: List Custom Attributes
      operationId: listCustomAttributes
      parameters:
      - name: attributeContentType
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/AttributeContentType"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: list of available Custom Attributes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomAttributeDefinitionDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Custom Attributes
      summary: Create Custom Attribute
      operationId: createCustomAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomAttributeCreateRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "201":
          description: Custom Attribute created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Custom Attributes
      summary: Delete multiple Custom Attributes
      operationId: bulkDeleteCustomAttributes
      requestBody:
        description: Attribute UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Custom Attributes deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvalProfiles:
    get:
      tags:
      - Approval profile Inventory
      summary: List Approval Profiles
      operationId: listApprovalProfiles
      parameters:
      - name: paginationRequestDto
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/PaginationRequestDto"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of all the approval profiles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalProfileResponseDto"
    post:
      tags:
      - Approval profile Inventory
      summary: Create a Approval profile
      operationId: createApprovalProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApprovalProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: New Approval profile created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles:
    get:
      tags:
      - ACME Profile Management
      summary: Get list of ACME Profiles
      operationId: listAcmeProfiles
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: ACME Profile list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcmeProfileListDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - ACME Profile Management
      summary: Create ACME Profile
      operationId: createAcmeProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcmeProfileRequestDto"
        required: true
      responses:
        "201":
          description: ACME Profile created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UuidDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles/{acmeProfileUuid}/acmeAccounts/{acmeAccountUuid}:
    get:
      tags:
      - ACME Account Management
      summary: Details of ACME Account
      operationId: getAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: ACME Account details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcmeAccountResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - ACME Account Management
      summary: Revoke ACME Account
      operationId: revokeAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: ACME Account revoked
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/users/{userUuid}/roles:
    get:
      tags:
      - User Management
      summary: Get User Roles
      operationId: getUserRoles
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User roles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleDto"
        "401":
          description: Unauthorized
    patch:
      tags:
      - User Management
      summary: Add roles to User
      operationId: updateRoles
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Role UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/enable:
    patch:
      tags:
      - User Management
      summary: Enable User
      operationId: enableUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: User enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/disable:
    patch:
      tags:
      - User Management
      summary: Disable User
      operationId: disableUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: User disabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/tokens/{uuid}/deactivate:
    patch:
      tags:
      - Token Instance Controller
      summary: Deactivate Token Instance
      operationId: deactivateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token Instance Deactivated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{uuid}/activate:
    patch:
      tags:
      - Token Instance Controller
      summary: Activate Token Instance
      operationId: activateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token Instance Activated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/enable:
    patch:
      tags:
      - Token Profile Management
      summary: Enable Token Profile
      operationId: enableTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Token Profile enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/disable:
    patch:
      tags:
      - Token Profile Management
      summary: Disable Token Profile
      operationId: disableTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Token Profile disabled
  /v1/tokens/{tokenInstanceUuid}/sync:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Sync Keys from connector
      operationId: syncKeys
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key sync completed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable Key
      description: "If the request body provided, only those key items will be enabled.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be enabled"
      operationId: enableKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "204":
          description: Key enabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable Key
      description: "If the request body provided, only those key items will be disabled.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be disabled"
      operationId: disableKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Key disabled
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Cryptographic Key
      description: "If the request body provided, only those key items will be destroyed.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: destroyKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Keys destroyed
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Key and its Items as Compromised
      description: "If the request body is provided with the UUID of the items of\
        \ Key, then only those itemswill be compromised. Else all the sub items of\
        \ the key will be compromised"
      operationId: compromiseKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompromiseKeyRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key marked as compromised
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokenProfiles/enable:
    patch:
      tags:
      - Token Profile Management
      summary: Enable multiple Token Profiles
      operationId: enableTokenProfiles
      requestBody:
        description: Token Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Token Profiles enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokenProfiles/disable:
    patch:
      tags:
      - Token Profile Management
      summary: Disable multiple Token Profiles
      operationId: disableTokenProfiles
      requestBody:
        description: Token Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token Profiles disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scheduler/jobs/{uuid}/enable:
    patch:
      tags:
      - Scheduled Jobs Management
      summary: Enabling of Scheduled job
      operationId: enableScheduledJob
      parameters:
      - name: uuid
        in: path
        description: Scheduled job UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Scheduled job enabled
  /v1/scheduler/jobs/{uuid}/disable:
    patch:
      tags:
      - Scheduled Jobs Management
      summary: Disabling of Scheduled job
      operationId: disableScheduledJob
      parameters:
      - name: uuid
        in: path
        description: Scheduled job UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Scheduled job disabled
  /v1/scepProfiles/{uuid}/raProfiles/{raProfileUuid}:
    patch:
      tags:
      - SCEP Profile Management
      summary: Update RA Profile for SCEP Profile
      operationId: updateRaProfile
      parameters:
      - name: uuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: RA Profile updated
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/scepProfiles/{uuid}/enable:
    patch:
      tags:
      - SCEP Profile Management
      summary: Enable SCEP Profile
      operationId: enableScepProfile
      parameters:
      - name: uuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: SCEP Profile enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scepProfiles/{uuid}/disable:
    patch:
      tags:
      - SCEP Profile Management
      summary: Disable SCEP Profile
      operationId: disableScepProfile
      parameters:
      - name: uuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: SCEP Profile disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scepProfiles/enable:
    patch:
      tags:
      - SCEP Profile Management
      summary: Enable multiple SCEP Profiles
      operationId: bulkEnableScepProfile
      requestBody:
        description: SCEP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: SCEP Profiles enabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scepProfiles/disable:
    patch:
      tags:
      - SCEP Profile Management
      summary: Disable multiple SCEP Profile
      operationId: bulkDisableScepProfile
      requestBody:
        description: SCEP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: SCEP Profiles disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/roles/{roleUuid}/users:
    get:
      tags:
      - Role Management
      summary: Get Role Users
      operationId: getRoleUsers
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Role users retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        "401":
          description: Unauthorized
    patch:
      tags:
      - Role Management
      summary: Add users to Role
      operationId: updateUsers
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        description: User UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Role users updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/raProfiles/enable:
    patch:
      tags:
      - RA Profile Management
      summary: Enable multiple RA Profiles
      operationId: bulkEnableRaProfile
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: RA Profiles enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/raProfiles/disable:
    patch:
      tags:
      - RA Profile Management
      summary: Disable multiple RA Profiles
      operationId: bulkDisableRaProfile
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: RA Profiles disabled
  /v1/notifications:
    get:
      tags:
      - Internal Notification
      summary: List notifications for logged user
      operationId: listNotifications
      parameters:
      - name: request
        in: query
        description: Show only unread notifications
        required: true
        schema:
          $ref: "#/components/schemas/NotificationRequestDto"
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Internal Notification
      summary: Delete a list of notifications for logged user
      operationId: bulkDeleteNotification
      requestBody:
        description: Notifications UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Notifications deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Internal Notification
      summary: Mark a list of notifications as read for logged user
      operationId: bulkMarkNotificationAsRead
      requestBody:
        description: Notifications UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Notifications marked as read
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/notifications/{uuid}:
    delete:
      tags:
      - Internal Notification
      summary: Delete a notification for logged user
      operationId: deleteNotification
      parameters:
      - name: uuid
        in: path
        description: Notification UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Notification deleted
    patch:
      tags:
      - Internal Notification
      summary: Mark notification as read for logged user
      operationId: markNotificationAsRead
      parameters:
      - name: uuid
        in: path
        description: Notification UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Notification marked as read
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/{uuid}/items/{keyItemUuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail without Token Instance
      operationId: getKeyItem
      parameters:
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: UUID of the Key Item
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyItemDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Edit Key Item
      operationId: editKeyItem
      parameters:
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditKeyItemDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "204":
          description: Key Item updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeyItemDetailDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/items/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable multiple Key Items
      operationId: enableKeyItems
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Key Items enabled
  /v1/keys/items/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable multiple Key Items
      operationId: disableKeyItems
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key Items disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/items/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Multiple Cryptographic Key items
      operationId: destroyKeyItems
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Keys Items destroyed
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/items/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Multiple Key Items as Compromised
      description: This API can be used to mark multiple keys items to be marked as
        compromised.
      operationId: compromiseKeyItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkCompromiseKeyItemRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Key Items marked as compromised
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable multiple Keys
      operationId: enableKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Keys enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable multiple Keys
      operationId: disableKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Keys disabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Multiple Cryptographic Key and its items
      operationId: destroyKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Keys destroyed
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Multiple Key and all its Items as Compromised
      description: This API can be used to mark multiple keys and its sub items to
        be marked as compromised.Specific part of the key cannot be mentioned in this
        API
      operationId: compromiseKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkCompromiseKeyRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Key marked as compromised
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}/enable:
    patch:
      tags:
      - Location Management
      summary: Enable Location
      operationId: enableLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Location enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}/disable:
    patch:
      tags:
      - Location Management
      summary: Disable Location
      operationId: disableLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Location disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/credentials/{uuid}/enable:
    patch:
      tags:
      - Credential Management
      summary: Enable Credential
      operationId: enableCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Credential enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/credentials/{uuid}/disable:
    patch:
      tags:
      - Credential Management
      summary: Disable Credential
      operationId: disableCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Credential disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/{uuid}/raProfiles/disassociate:
    patch:
      tags:
      - Compliance Profile Management
      summary: Disassociate Compliance Profile to RA Profile
      operationId: disassociateProfiles
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RaProfileAssociationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: RA Profile disassociation successful
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/complianceProfiles/{uuid}/raProfiles/associate:
    patch:
      tags:
      - Compliance Profile Management
      summary: Associate Compliance Profile to RA Profile
      operationId: associateProfiles
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RaProfileAssociationRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: RA Profile association successful
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/cmpProfiles/{cmpProfileUuid}/raProfiles/{raProfileUuid}:
    patch:
      tags:
      - CMP Profile Management
      summary: Update RA Profile for CMP Profile
      operationId: updateRaProfile_1
      parameters:
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: RA Profile updated
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/cmpProfiles/{cmpProfileUuid}/enable:
    patch:
      tags:
      - CMP Profile Management
      summary: Enable CMP Profile
      operationId: enableCmpProfile
      parameters:
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: CMP Profile enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles/{cmpProfileUuid}/disable:
    patch:
      tags:
      - CMP Profile Management
      summary: Disable CMP Profile
      operationId: disableCmpProfile
      parameters:
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: CMP Profile disabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles/enable:
    patch:
      tags:
      - CMP Profile Management
      summary: Enable multiple CMP Profiles
      operationId: bulkEnableCmpProfile
      requestBody:
        description: CMP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: CMP Profiles enabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles/disable:
    patch:
      tags:
      - CMP Profile Management
      summary: Disable multiple CMP Profile
      operationId: bulkDisableCmpProfile
      requestBody:
        description: CMP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: CMP Profiles disabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate Details
      operationId: getCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateDetailDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Certificate Inventory
      summary: Delete a certificate
      operationId: deleteCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Certificate deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Certificate Inventory
      summary: Update Certificate Objects
      operationId: updateCertificateObjects
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateUpdateObjectsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Certificate objects updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/scep/deactivate:
    patch:
      tags:
      - RA Profile Management
      summary: Deactivate SCEP for RA Profile
      operationId: deactivateScepForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "204":
          description: SCEP deactivated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/scep/activate/{scepProfileUuid}:
    patch:
      tags:
      - RA Profile Management
      summary: Activate SCEP for RA Profile
      operationId: activateScepForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: scepProfileUuid
        in: path
        description: SCEP Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateScepForRaProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: SCEP activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileScepDetailResponseDto"
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/cmp/deactivate:
    patch:
      tags:
      - RA Profile Management
      summary: Deactivate CMP for RA Profile
      operationId: deactivateCmpForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "204":
          description: CMP deactivated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/cmp/activate/{cmpProfileUuid}:
    patch:
      tags:
      - RA Profile Management
      summary: Activate CMP for RA Profile
      operationId: activateCmpForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: cmpProfileUuid
        in: path
        description: CMP Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateCmpForRaProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: CMP activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileCmpDetailResponseDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/acme/deactivate:
    patch:
      tags:
      - RA Profile Management
      summary: Deactivate ACME for RA Profile
      operationId: deactivateAcmeForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: ACME deactivated
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/acme/activate/{acmeProfileUuid}:
    patch:
      tags:
      - RA Profile Management
      summary: Activate ACME for RA Profile
      operationId: activateAcmeForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateAcmeForRaProfileRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: ACME activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileAcmeDetailResponseDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/enable:
    patch:
      tags:
      - RA Profile Management
      summary: Enable RA Profiles
      operationId: enableRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: RA Profile enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/disable:
    patch:
      tags:
      - RA Profile Management
      summary: Disable RA Profiles
      operationId: disableRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: RA Profile disabled
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/approvalProfiles/{approvalProfileUuid}:
    delete:
      tags:
      - RA Profile Management
      summary: Disassociated RA profile with the Approval profile
      operationId: disassociateRAProfileFromApprovalProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA profile UUID
        required: true
        schema:
          type: string
      - name: approvalProfileUuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Approval profile disassociated from the RA profile
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - RA Profile Management
      summary: Associated RA profile with the Approval profile
      operationId: associateRAProfileWithApprovalProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA profile UUID
        required: true
        schema:
          type: string
      - name: approvalProfileUuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Approval profile associated with the RA profile
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom/{uuid}/resources:
    patch:
      tags:
      - Custom Attributes
      summary: Associate Custom Attribute to Resource
      operationId: updateResources
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      requestBody:
        description: List of Resources
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - raProfiles
            - authorities
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Custom Attribute associated to the resources
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom/{uuid}/enable:
    patch:
      tags:
      - Custom Attributes
      summary: Enable Custom Attribute
      operationId: enableCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Custom Attribute enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom/{uuid}/disable:
    patch:
      tags:
      - Custom Attributes
      summary: Disable Custom Attribute
      operationId: disableCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Custom Attribute disabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom/resources/{resourceName}/objects/{objectUuid}/{attributeUuid}:
    delete:
      tags:
      - Custom Attributes
      summary: Delete Value of a Custom Attribute for a Resource
      operationId: deleteAttributeContentForResource
      parameters:
      - name: resourceName
        in: path
        description: Resource Type
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      - name: attributeUuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Custom Attribute value deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResponseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    patch:
      tags:
      - Custom Attributes
      summary: Update Value of a Custom Attribute for a Resource
      operationId: updateAttributeContentForResource
      parameters:
      - name: resourceName
        in: path
        description: Resource Type
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      - name: attributeUuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/BaseAttributeContentDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Custom Attribute value updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResponseAttributeDto"
  /v1/attributes/custom/enable:
    patch:
      tags:
      - Custom Attributes
      summary: Enable multiple Custom Attributes
      operationId: bulkEnableCustomAttributes
      requestBody:
        description: Attribute UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Custom Attributes enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom/disable:
    patch:
      tags:
      - Custom Attributes
      summary: Disable multiple Custom Attributes
      operationId: bulkDisableCustomAttributes
      requestBody:
        description: Attribute UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Custom Attributes disabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvals/{uuid}/reject:
    patch:
      tags:
      - Approval Inventory
      summary: Rejecting of the Approval
      operationId: rejectApproval
      parameters:
      - name: uuid
        in: path
        description: Approval UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Approval rejected
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvals/{uuid}/rejectRecipient:
    patch:
      tags:
      - Approval Inventory
      summary: Rejecting of Recipient of the Approval
      operationId: rejectApprovalRecipient
      parameters:
      - name: uuid
        in: path
        description: Approval UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserApprovalDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Approval Recipient rejected
  /v1/approvals/{uuid}/approve:
    patch:
      tags:
      - Approval Inventory
      summary: Approving of the Approval
      operationId: approveApproval
      parameters:
      - name: uuid
        in: path
        description: Approval UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Approval approved
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvals/{uuid}/approveRecipient:
    patch:
      tags:
      - Approval Inventory
      summary: Approving of Recipient of the Approval
      operationId: approveApprovalRecipient
      parameters:
      - name: uuid
        in: path
        description: Approval UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserApprovalDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Approval Recipient approved
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvalProfiles/{uuid}/enable:
    patch:
      tags:
      - Approval profile Inventory
      summary: Enabling of Approval profile
      operationId: enableApprovalProfile
      parameters:
      - name: uuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Approval profile enabled
  /v1/approvalProfiles/{uuid}/disable:
    patch:
      tags:
      - Approval profile Inventory
      summary: Disabling of Approval profile
      operationId: disableApprovalProfile
      parameters:
      - name: uuid
        in: path
        description: Approval profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: Approval profile disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles/{uuid}/raprofile/{raProfileUuid}:
    patch:
      tags:
      - ACME Profile Management
      summary: Update RA Profile for ACME Profile
      operationId: updateRaProfile_2
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: RA Profile updated
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/acmeProfiles/{uuid}/enable:
    patch:
      tags:
      - ACME Profile Management
      summary: Enable ACME Profile
      operationId: enableAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ACME Profile enabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/acmeProfiles/{uuid}/disable:
    patch:
      tags:
      - ACME Profile Management
      summary: Disable ACME Profile
      operationId: disableAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: ACME Profile disabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/acmeProfiles/{acmeProfileUuid}/acmeAccounts/{acmeAccountUuid}/enable:
    patch:
      tags:
      - ACME Account Management
      summary: Enable ACME Account
      operationId: enableAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ACME Account enabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles/{acmeProfileUuid}/acmeAccounts/{acmeAccountUuid}/disable:
    patch:
      tags:
      - ACME Account Management
      summary: Disable ACME Account
      operationId: disableAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: ACME Account disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles/enable:
    patch:
      tags:
      - ACME Profile Management
      summary: Enable multiple ACME Profiles
      operationId: bulkEnableAcmeProfile
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: ACME Profiles enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/acmeProfiles/disable:
    patch:
      tags:
      - ACME Profile Management
      summary: Disable multiple ACME Profile
      operationId: bulkDisableAcmeProfile
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: ACME Profiles disabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: No Content
  /v1/acmeAccounts/enable:
    patch:
      tags:
      - ACME Account Management
      summary: Enable multiple ACME Accounts
      operationId: bulkEnableAcmeAccount
      requestBody:
        description: ACME Account UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "204":
          description: ACME Accounts enabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeAccounts/disable:
    patch:
      tags:
      - ACME Account Management
      summary: Disable multiple ACME Accounts
      operationId: bulkDisableAcmeAccount
      requestBody:
        description: ACME Account UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: ACME Accounts disabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke:
    get:
      tags:
      - Client Operations v2
      summary: Get revocation Attributes
      operationId: listRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue:
    get:
      tags:
      - Client Operations v2
      summary: Get issue Certificate Attributes
      operationId: listIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/workflows/triggers/{triggerUuid}/history/{associationObjectUuid}:
    get:
      tags:
      - Workflow Triggers Management
      summary: Get Trigger History
      operationId: getTriggerHistory
      parameters:
      - name: triggerUuid
        in: path
        description: Trigger UUID
        required: true
        schema:
          type: string
      - name: associationObjectUuid
        in: path
        description: Trigger Association Object UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Trigger History retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TriggerHistoryDto"
        "401":
          description: Unauthorized
  /v1/workflows/triggers/history/{associationObjectUuid}:
    get:
      tags:
      - Workflow Triggers Management
      summary: Get Trigger History Summary
      operationId: getTriggerHistorySummary
      parameters:
      - name: associationObjectUuid
        in: path
        description: Trigger Association Object UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Trigger History Summary retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerHistorySummaryDto"
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/permissions:
    get:
      tags:
      - User Management
      summary: Get User permissions
      operationId: getPermissions
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: User permissions removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectPermissionsDto"
        "401":
          description: Unauthorized
  /v1/tokens/{uuid}/tokenProfiles/attributes:
    get:
      tags:
      - Token Instance Controller
      summary: List Token Profile Attributes
      operationId: listTokenProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Token Profile Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{uuid}/activate/attributes:
    get:
      tags:
      - Token Instance Controller
      summary: List Token activation Attributes
      operationId: listTokenInstanceActivationAttributes
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Token activation Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}/attributes:
    get:
      tags:
      - Cryptographic Key Controller
      summary: List of Attributes to create a Key
      operationId: listCreateKeyAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Type of the key to be created
        required: true
        schema:
          $ref: "#/components/schemas/KeyRequestType"
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail with Token Instance
      operationId: getKey_1
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Cryptographic Key with Token Instance
      description: "If the request body provided, only those key items will be deleted.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: deleteKey_1
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "204":
          description: Key deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail with Token Instance
      operationId: getKeyItem_1
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: UUID of the Key Item
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyItemDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}/history:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Key Item event history
      operationId: getEventHistory
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Certificate event history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KeyEventHistoryDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokenProfiles:
    get:
      tags:
      - Token Profile Management
      summary: List of available Token Profiles
      operationId: listTokenProfiles
      parameters:
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Token Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenProfileDto"
    delete:
      tags:
      - Token Profile Management
      summary: Delete multiple Token Profiles
      operationId: deleteTokenProfiles
      requestBody:
        description: Token Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "204":
          description: Token Profiles deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/statistics:
    get:
      tags:
      - Statistics/Dashboard
      summary: Get Dashboard/Statistics Details
      operationId: getStatistics
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scheduler/jobs:
    get:
      tags:
      - Scheduled Jobs Management
      summary: List of scheduled jobs
      operationId: listScheduledJobs
      parameters:
      - name: pagination
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/PaginationRequestDto"
      responses:
        "200":
          description: List of scheduled jobs fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledJobsResponseDto"
  /v1/scheduler/jobs/{uuid}/history:
    get:
      tags:
      - Scheduled Jobs Management
      summary: Scheduled job history
      operationId: getScheduledJobHistory
      parameters:
      - name: pagination
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/PaginationRequestDto"
      - name: uuid
        in: path
        description: Scheduled job UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Scheduled job history retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledJobHistoryResponseDto"
  /v1/scepProfiles/caCertificates:
    get:
      tags:
      - SCEP Profile Management
      summary: Get list of certificates eligible for CA certificate of SCEP requests
      operationId: listScepCaCertificates
      parameters:
      - name: intuneEnabled
        in: query
        description: flag to return certificates that are eligible for Intune integration
        required: true
        schema:
          type: boolean
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of CA certificates retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/roles/{roleUuid}/permissions/{resourceUuid}:
    get:
      tags:
      - Role Management
      summary: Get Resources of a Role
      operationId: getRoleResourcePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Role resources retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermissionsDto"
        "401":
          description: Unauthorized
  /v1/resources:
    get:
      tags:
      - Resource Management
      summary: Retrieve list of resources with information and settings
      operationId: listResources
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Resources retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/resources/{resource}/filters/rules:
    get:
      tags:
      - Resource Management
      summary: Retrieve filter fields that can be used for creating rule conditions
        and actions
      operationId: listResourceRuleFilterFields
      parameters:
      - name: resource
        in: path
        description: Resource
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      - name: settable
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Filter fields retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "401":
          description: Unauthorized
  /v1/resources/{resource}/events:
    get:
      tags:
      - Resource Management
      summary: Retrieve a list of all events that can be triggered by a resource
      operationId: listResourceEvents
      parameters:
      - name: resource
        in: path
        description: Resource
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Events retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceEventDto"
        "401":
          description: Unauthorized
  /v1/raProfiles:
    get:
      tags:
      - RA Profile Management
      summary: List of available RA Profiles
      operationId: listRaProfiles
      parameters:
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: RA Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RaProfileDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - RA Profile Management
      summary: Delete multiple RA Profiles
      operationId: bulkDeleteRaProfile
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: RA Profiles deleted
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/raProfiles/{raProfileUuid}:
    get:
      tags:
      - RA Profile Management
      summary: Details of RA Profile
      operationId: getRaProfileWithoutAuthority
      parameters:
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: RA Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - RA Profile Management
      summary: Delete RA Profile
      operationId: deleteRaProfileWithoutAuthority
      parameters:
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: RA Profile deleted
  ? /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/signature/{algorithm}/attributes
  : get:
      tags:
      - Cryptographic Operations Controller
      summary: List of signature Attributes
      operationId: listSignatureAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key instance UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      - name: algorithm
        in: path
        description: Cryptographic algorithm
        required: true
        schema:
          $ref: "#/components/schemas/KeyAlgorithm"
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  ? /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/cipher/{algorithm}/attributes
  : get:
      tags:
      - Cryptographic Operations Controller
      summary: List of cipher Attributes
      operationId: listCipherAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      - name: algorithm
        in: path
        description: Cryptographic algorithm
        required: true
        schema:
          $ref: "#/components/schemas/KeyAlgorithm"
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/operations/tokens/{tokenInstanceUuid}/random/attributes:
    get:
      tags:
      - Cryptographic Operations Controller
      summary: List of random generator Attributes
      operationId: listRandomAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/notificationInstances/attributes/mapping/{connectorUuid}/{kind}:
    get:
      tags:
      - External Notification Management
      summary: List of mapping attributes
      operationId: listMappingAttributes
      parameters:
      - name: connectorUuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of mapping attributes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataAttribute"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/locations/search:
    get:
      tags:
      - Location Management
      summary: Get Locations searchable fields information
      operationId: getSearchableFieldInformation
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Locations searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/search:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get CryptographicKey searchable fields information
      operationId: getSearchableFieldInformation_1
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: CryptographicKey searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/pairs:
    get:
      tags:
      - Cryptographic Key Controller
      summary: List Cryptographic Keys with full Key Pairs
      description: This API contains the logic to get the keys that contains the full
        key pair (private and public Key)
      operationId: listKeyPairs
      parameters:
      - name: tokenProfileUuid
        in: query
        required: false
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Cryptographic Keys retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KeyDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/enums:
    get:
      tags:
      - Enums
      summary: Get platform enums
      operationId: getPlatformEnums
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Platform settings retrieved
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/EnumItemDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}/attributes/push:
    get:
      tags:
      - Location Management
      summary: Get push Attributes
      operationId: listPushAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Push attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
  /v1/entities/{entityUuid}/locations/{locationUuid}/attributes/issue:
    get:
      tags:
      - Location Management
      summary: Get CSR Attributes
      operationId: listCsrAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: CSR Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/{entityUuid}/attributes/location:
    get:
      tags:
      - Entity Management
      summary: List Location Attributes
      operationId: listLocationAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Location attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/entities/search:
    get:
      tags:
      - Entity Management
      summary: Get Entities searchable fields information
      operationId: getSearchableFieldInformation_2
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Entity searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/discoveries/{uuid}:
    get:
      tags:
      - Discovery Management
      summary: Discovery Details
      operationId: getDiscovery
      parameters:
      - name: uuid
        in: path
        description: Discovery UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Discovery details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscoveryHistoryDetailDto"
    delete:
      tags:
      - Discovery Management
      summary: Delete Discovery
      operationId: deleteDiscovery
      parameters:
      - name: uuid
        in: path
        description: Discovery UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Discovery deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/discoveries/{uuid}/certificates:
    get:
      tags:
      - Discovery Management
      summary: Discovery Details
      operationId: getDiscoveryCertificates
      parameters:
      - name: uuid
        in: path
        description: Discovery UUID
        required: true
        schema:
          type: string
      - name: newlyDiscovered
        in: query
        required: false
        schema:
          type: boolean
      - name: itemsPerPage
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: pageNumber
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Discovery details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscoveryCertificateResponseDto"
  /v1/discoveries/search:
    get:
      tags:
      - Discovery Management
      summary: Get Discovery searchable fields information
      operationId: getSearchableFieldInformation_3
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Discovery searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}/health:
    get:
      tags:
      - Connector Management
      summary: Check Health of a Connector
      operationId: checkHealth
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Health check completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}/attributes:
    get:
      tags:
      - Connector Management
      summary: Get attributes of all Function Groups
      operationId: getAttributesAll
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes received
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: "#/components/schemas/BaseAttributeDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/{uuid}/attributes/{functionGroup}/{kind}:
    get:
      tags:
      - Connector Management
      summary: Get Attributes from a Connector
      operationId: getAttributes
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: functionGroup
        in: path
        description: Function Group name
        required: true
        schema:
          $ref: "#/components/schemas/FunctionGroupCode"
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Attributes received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/auth/types:
    get:
      tags:
      - Connector Authentication
      summary: Get list of Authentication Types
      operationId: getAuthenticationTypes
      responses:
        "200":
          description: Auth Types retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/auth/attributes/jwt:
    get:
      tags:
      - Connector Authentication
      summary: Get JWT auth Attributes
      operationId: getJWTAuthAttributes
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/auth/attributes/certificate:
    get:
      tags:
      - Connector Authentication
      summary: Get Attributes for certificate auth
      operationId: getCertificateAttributes
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/auth/attributes/basic:
    get:
      tags:
      - Connector Authentication
      summary: Get basic auth Attributes
      operationId: getBasicAuthAttributes
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/auth/attributes/apiKey:
    get:
      tags:
      - Connector Authentication
      summary: Get API Key auth Attributes
      operationId: getApiKeyAuthAttributes
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/{uuid}:
    get:
      tags:
      - Compliance Profile Management
      summary: Details of a Compliance Profiles
      operationId: getComplianceProfile
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Compliance Profile details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplianceProfileDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete Compliance Profile
      operationId: deleteComplianceProfile
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Compliance Profile deleted
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/{uuid}/raProfiles:
    get:
      tags:
      - Compliance Profile Management
      summary: Get RA Profiles for a Compliance Profile
      operationId: getAssociatedRAProfiles
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: RA Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SimplifiedRaProfileDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/rules:
    get:
      tags:
      - Compliance Profile Management
      summary: Get Compliance rules
      operationId: getComplianceRules
      parameters:
      - name: complianceProvider
        in: query
        required: false
        schema:
          type: string
      - name: kind
        in: query
        required: false
        schema:
          type: string
      - name: certificateType
        in: query
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/CertificateType"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Compliance rules retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComplianceRulesListResponseDto"
  /v1/complianceProfiles/groups:
    get:
      tags:
      - Compliance Profile Management
      summary: Get Compliance groups
      operationId: getComplianceGroups
      parameters:
      - name: complianceProvider
        in: query
        required: false
        schema:
          type: string
      - name: kind
        in: query
        required: false
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Compliance groups retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComplianceGroupsListResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles/signingCertificates:
    get:
      tags:
      - CMP Profile Management
      summary: Get list of certificates eligible for signing of CMP responses
      operationId: listCmpSigningCertificates
      responses:
        "200":
          description: List of signing certificates retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}/{certificateFormat}:
    get:
      tags:
      - Certificate Inventory
      summary: Download Certificate
      operationId: downloadCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      - name: certificateFormat
        in: path
        description: Certificate format
        required: true
        schema:
          $ref: "#/components/schemas/CertificateFormat"
      - name: encoding
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CertificateFormatEncoding"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Certificate downloaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateDownloadResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}/validate:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate Validation Result
      operationId: getCertificateValidationResult
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Certificate validation detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateValidationResultDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}/history:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate event history
      operationId: getCertificateEventHistory
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Certificate event history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateEventHistoryDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}/chain:
    get:
      tags:
      - Certificate Inventory
      summary: Get certificate chain
      description: "Get certificate chain for the certificate with the given UUID.\
        \ The certificate chain is returned in the order of the chain, with the first\
        \ certificate being the certificate with the given UUID, up to the last identified\
        \ certificate in the chain. If the certificate with the given UUID has status\
        \ `NEW` or `REJECTED`, an empty list is returned."
      operationId: getCertificateChain
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      - name: withEndCertificate
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Certificate chain retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateChainResponseDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}/chain/{certificateFormat}:
    get:
      tags:
      - Certificate Inventory
      summary: Download Certificate Chain in chosen format
      operationId: downloadCertificateChain
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      - name: certificateFormat
        in: path
        description: Certificate format
        required: true
        schema:
          $ref: "#/components/schemas/CertificateFormat"
      - name: withEndCertificate
        in: query
        required: false
        schema:
          type: boolean
      - name: encoding
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CertificateFormatEncoding"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Chain certificates downloaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateChainDownloadResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/{uuid}/approvals:
    get:
      tags:
      - Certificate Inventory
      summary: List Certificates Approvals
      operationId: listCertificateApprovals
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      - name: paginationRequestDto
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/PaginationRequestDto"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of all approvals for the certificate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalResponseDto"
  /v1/certificates/{certificateUuid}/locations:
    get:
      tags:
      - Certificate Inventory
      summary: List of available Locations for the Certificate
      operationId: listCertificateLocations
      parameters:
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/search:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate searchable fields information
      operationId: getSearchableFieldInformation_4
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Certificate searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/certificates/csr/attributes:
    get:
      tags:
      - Certificate Inventory
      summary: Get CSR Generation Attributes
      operationId: getCsrGenerationAttributes
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: CSR Generation attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{uuid}/endentityprofiles:
    get:
      tags:
      - Authority Management
      operationId: listEntityProfiles
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Entity profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NameAndIdDto"
  /v1/authorities/{uuid}/endentityprofiles/{endEntityProfileId}/certificateprofiles:
    get:
      tags:
      - Authority Management
      operationId: listCertificateProfiles
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Certificate profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NameAndIdDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{uuid}/endentityprofiles/{endEntityProfileId}/cas:
    get:
      tags:
      - Authority Management
      operationId: listCAsInProfile
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: CAs in Profile retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NameAndIdDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{uuid}/attributes/raProfile:
    get:
      tags:
      - Authority Management
      summary: List RA Profile Attributes
      operationId: listRAProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attribute information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/scep:
    get:
      tags:
      - RA Profile Management
      summary: Get SCEP details for RA Profile
      operationId: getScepForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: SCEP details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileScepDetailResponseDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/cmp:
    get:
      tags:
      - RA Profile Management
      summary: Get CMP details for RA Profile
      operationId: getCmpForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "204":
          description: CMP details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileCmpDetailResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/acme:
    get:
      tags:
      - RA Profile Management
      summary: Get ACME details for RA Profile
      operationId: getAcmeForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: ACME details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaProfileAcmeDetailResponseDto"
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/complianceProfiles:
    get:
      tags:
      - RA Profile Management
      summary: Get Compliance Profiles for an RA Profile
      operationId: getAssociatedComplianceProfiles
      parameters:
      - name: authorityUuid
        in: path
        description: Authority UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Compliance Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SimplifiedComplianceProfileDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/caCertificates:
    get:
      tags:
      - RA Profile Management
      summary: Retrieve certificates of authority belonging to RA profile
      operationId: getAuthorityCertificateChain
      parameters:
      - name: authorityUuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Approval profile associated with the RA profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke:
    get:
      tags:
      - RA Profile Management
      summary: Get revocation Attributes
      operationId: listRaProfileRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Revocation attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue:
    get:
      tags:
      - RA Profile Management
      summary: Get issue Certificate Attributes
      operationId: listRaProfileIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Issue certificate attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/approvalProfiles:
    get:
      tags:
      - RA Profile Management
      summary: List of Approval profiles associated with the RAProfile
      operationId: getAssociatedApprovalProfiles
      parameters:
      - name: authorityUuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Approval profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApprovalProfileDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/auth/resources:
    get:
      tags:
      - Authentication Management
      summary: Get Auth Resources
      operationId: getAuthResources
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Resources retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthResourceDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/auth/resources/{resourceName}/objects:
    get:
      tags:
      - Authentication Management
      summary: Get List of objects for Object Access
      operationId: getObjectsForResource
      parameters:
      - name: resourceName
        in: path
        description: Resource Name
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: Objects retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NameAndUuidDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/auditLogs/search:
    get:
      tags:
      - Audit Log
      summary: Get Audit logs searchable fields information
      operationId: getSearchableFieldInformation_5
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Audit logs searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/attributes/custom/resources:
    get:
      tags:
      - Custom Attributes
      summary: Get available resources for Custom Attributes
      operationId: getResources
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Custom Attribute retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
  /v1/attributes/custom/resources/{resource}:
    get:
      tags:
      - Custom Attributes
      summary: Get Custom Attributes for a resource
      operationId: getResourceCustomAttributes
      parameters:
      - name: resource
        in: path
        description: Resource Name
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Custom Attribute retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomAttribute"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvals:
    get:
      tags:
      - Approval Inventory
      summary: List of Approvals
      operationId: listApprovals
      parameters:
      - name: paginationRequestDto
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/PaginationRequestDto"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of all approvals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalResponseDto"
  /v1/approvals/{uuid}:
    get:
      tags:
      - Approval Inventory
      summary: Get Approval Detail
      operationId: getApproval
      parameters:
      - name: uuid
        in: path
        description: Approval UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Approval detail retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalDetailDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/approvals/user:
    get:
      tags:
      - Approval Inventory
      summary: List of User's Approvals
      operationId: listUserApprovals
      parameters:
      - name: paginationRequestDto
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/PaginationRequestDto"
      - name: approvalUserDto
        in: query
        description: Select if you want to list all history of approvals by user
        required: true
        schema:
          $ref: "#/components/schemas/ApprovalUserDto"
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: List of all approvals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalResponseDto"
  /v1/acmeAccounts:
    get:
      tags:
      - ACME Account Management
      summary: List ACME Accounts
      operationId: listAcmeAccounts
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: ACME Accounts list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcmeAccountListResponseDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/tokens/delete:
    delete:
      tags:
      - Token Instance Controller
      description: Delete multiple Token Instance
      operationId: deleteTokenInstance_1
      requestBody:
        description: Token Instance UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Token Instances deleted
  /v1/tokenProfiles/{uuid}:
    delete:
      tags:
      - Token Profile Management
      summary: Delete Token Profile
      operationId: deleteRaProfileWithoutTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token Profile deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scepProfiles/delete:
    delete:
      tags:
      - SCEP Profile Management
      summary: Delete multiple SCEP Profiles
      operationId: bulkDeleteScepProfile
      requestBody:
        description: SCEP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: SCEP Profiles deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/scepProfiles/delete/force:
    delete:
      tags:
      - SCEP Profile Management
      summary: Force delete multiple SCEP Profiles
      operationId: forceDeleteScepProfiles
      requestBody:
        description: SCEP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: SCEP Profiles forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/keys/items:
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Multiple Cryptographic Key Items
      operationId: deleteKeyItems
      requestBody:
        description: Key Items UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Key Items deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/connectors/force:
    delete:
      tags:
      - Connector Management
      summary: Force Delete multiple Connectors
      operationId: forceDeleteConnector
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: Connectors deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/complianceProfiles/force:
    delete:
      tags:
      - Compliance Profile Management
      summary: Force delete Compliance Profiles
      operationId: forceDeleteComplianceProfiles
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: Compliance Profiles forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles/delete:
    delete:
      tags:
      - CMP Profile Management
      summary: Delete multiple CMP Profiles
      operationId: bulkDeleteCmpProfile
      requestBody:
        description: CMP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: CMP Profiles deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cmpProfiles/delete/force:
    delete:
      tags:
      - CMP Profile Management
      summary: Force delete multiple CMP Profiles
      operationId: forceDeleteCmpProfiles
      requestBody:
        description: CMP Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: CMP Profiles forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/authorities/force:
    delete:
      tags:
      - Authority Management
      summary: Force delete multiple Authority instances
      operationId: forceDeleteAuthorityInstances
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Authority instances forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/acmeProfiles/delete:
    delete:
      tags:
      - ACME Profile Management
      summary: Delete multiple ACME Profiles
      operationId: bulkDeleteAcmeProfile
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: ACME Profiles deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
  /v1/acmeProfiles/delete/force:
    delete:
      tags:
      - ACME Profile Management
      summary: Force delete multiple ACME Profiles
      operationId: forceDeleteACMEProfiles
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "500":
          description: Internal Server Error
        "200":
          description: ACME Profiles forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkActionMessageDto"
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
components:
  schemas:
    Resource:
      type: string
      enum:
      - NONE
      - dashboard
      - settings
      - auditLogs
      - credentials
      - connectors
      - attributes
      - jobs
      - notificationInstances
      - users
      - roles
      - acmeAccounts
      - acmeProfiles
      - scepProfiles
      - cmpProfiles
      - authorities
      - raProfiles
      - certificates
      - certificateRequests
      - groups
      - complianceProfiles
      - discoveries
      - entities
      - locations
      - tokenProfiles
      - tokens
      - keys
      - approvalProfiles
      - approvals
      - rules
      - actions
      - triggers
      - resources
      - resourceEvents
      - searchFilters
      - keyItems
      - platformEnums
      - notifications
      - conditions
      - executions
      - complianceRules
      - complianceGroups
      - customAttributes
      - globalMetadata
      - acmeOrders
      - acmeAuthorizations
      - acmeChallenges
      - cmpTransactions
      - endEntityProfiles
      - authenticationProviders
    TriggerType:
      type: string
      enum:
      - event
      - manual
    UpdateTriggerRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the trigger
        type:
          $ref: "#/components/schemas/TriggerType"
          description: Type of the trigger
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the trigger
        ignoreTrigger:
          type: boolean
          description: "Flag if to ignore object when trigger rules are matched and\
            \ do not perform any actions and stop evaluating other triggers. Based\
            \ on context could have other implications to object processing. If ignore\
            \ is set, trigger does not have any actions."
        event:
          type: string
          description: Event of the trigger
          enum:
          - discoveryFinished
        eventResource:
          $ref: "#/components/schemas/Resource"
          description: Type of the the trigger event source object
        rulesUuids:
          type: array
          description: List of UUIDs of existing rules to add to the trigger
          items:
            type: string
        actionsUuids:
          type: array
          description: List of UUIDs of existing actions to add to the trigger
          items:
            type: string
      required:
      - ignoreTrigger
      - resource
      - type
    AuthenticationServiceExceptionDto:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          description: Status code of the HTTP Request
        code:
          type: string
          description: Code of the result
        message:
          type: string
          description: Exception message
      required:
      - code
      - message
      - statusCode
    ActionDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the action
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the action
        executions:
          type: array
          description: List of executions
          items:
            $ref: "#/components/schemas/ExecutionDto"
      required:
      - executions
      - name
      - resource
      - uuid
    ConditionDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the condition
        type:
          $ref: "#/components/schemas/ConditionType"
          description: Type of the condition
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the condition
        items:
          type: array
          description: List of the condition items
          items:
            $ref: "#/components/schemas/ConditionItemDto"
      required:
      - items
      - name
      - resource
      - type
      - uuid
    ConditionItemDto:
      type: object
      properties:
        fieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
          description: Source of the field in the condition item
        fieldIdentifier:
          type: string
          description: Field identifier of the condition item
        operator:
          $ref: "#/components/schemas/FilterConditionOperator"
          description: Operator of the condition item
        value:
          type: object
          description: Value of the condition item
      required:
      - fieldIdentifier
      - fieldSource
      - operator
    ConditionType:
      type: string
      enum:
      - checkField
    ExecutionDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the execution
        type:
          $ref: "#/components/schemas/ExecutionType"
          description: Type of the execution
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the execution
        items:
          type: array
          description: List of the execution items
          items:
            $ref: "#/components/schemas/ExecutionItemDto"
      required:
      - items
      - name
      - resource
      - type
      - uuid
    ExecutionItemDto:
      type: object
      properties:
        fieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
          description: Source of the field in the execution item
        fieldIdentifier:
          type: string
          description: Field identifier of the execution item
        data:
          type: object
          description: Data of the execution item
      required:
      - fieldIdentifier
      - fieldSource
    ExecutionType:
      type: string
      enum:
      - setField
    FilterConditionOperator:
      type: string
      enum:
      - EQUALS
      - NOT_EQUALS
      - GREATER
      - GREATER_OR_EQUAL
      - LESSER
      - LESSER_OR_EQUAL
      - CONTAINS
      - NOT_CONTAINS
      - STARTS_WITH
      - ENDS_WITH
      - EMPTY
      - NOT_EMPTY
      - SUCCESS
      - FAILED
      - UNKNOWN
      - NOT_CHECKED
    FilterFieldSource:
      type: string
      enum:
      - meta
      - custom
      - data
      - property
    RuleDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Rule
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the Rule
        conditions:
          type: array
          description: List of conditions in the Rule
          items:
            $ref: "#/components/schemas/ConditionDto"
      required:
      - conditions
      - name
      - resource
      - uuid
    TriggerDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the trigger
        type:
          $ref: "#/components/schemas/TriggerType"
          description: Type of the trigger
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the trigger
        ignoreTrigger:
          type: boolean
          description: "Flag if to ignore object when trigger rules are matched and\
            \ do not perform any actions and stop evaluating other triggers. Based\
            \ on context could have other implications to object processing. If ignore\
            \ is set, trigger does not have any actions."
        event:
          type: string
          description: Event that should fire trigger
          enum:
          - discoveryFinished
        eventResource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with trigger event
        rules:
          type: array
          description: List of Rules in the Rule Trigger
          items:
            $ref: "#/components/schemas/RuleDetailDto"
        actions:
          type: array
          description: List of Action Groups in the Rule Trigger
          items:
            $ref: "#/components/schemas/ActionDetailDto"
      required:
      - actions
      - ignoreTrigger
      - name
      - resource
      - rules
      - type
      - uuid
    UpdateRuleRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the Rule
        conditionsUuids:
          type: array
          description: List of UUIDs of existing conditions to add to the rule
          items:
            type: string
      required:
      - conditionsUuids
    ExecutionItemRequestDto:
      type: object
      properties:
        fieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
          description: Source of the field in the execution item
        fieldIdentifier:
          type: string
          description: Field identifier of the execution item
        data:
          type: object
          description: Data of the execution item
      required:
      - fieldIdentifier
      - fieldSource
    UpdateExecutionRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the execution
        items:
          type: array
          description: List of the execution items to add to execution
          items:
            $ref: "#/components/schemas/ExecutionItemRequestDto"
      required:
      - items
    ConditionItemRequestDto:
      type: object
      properties:
        fieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
          description: Source of the field in the condition item
        fieldIdentifier:
          type: string
          description: Field identifier of the condition item
        operator:
          $ref: "#/components/schemas/FilterConditionOperator"
          description: Operator of the condition item
        value:
          type: object
          description: Value of the condition item
      required:
      - fieldIdentifier
      - fieldSource
      - operator
    UpdateConditionRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the condition
        items:
          type: array
          description: List of the condition items to add to condition
          items:
            $ref: "#/components/schemas/ConditionItemRequestDto"
      required:
      - items
    UpdateActionRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the action
        executionsUuids:
          type: array
          description: List of UUIDs of existing executions to add to the action
          items:
            type: string
      required:
      - executionsUuids
    AttributeCallback:
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          type: array
          description: Mappings for the callback method
          items:
            $ref: "#/components/schemas/AttributeCallbackMapping"
          uniqueItems: true
      required:
      - callbackContext
      - callbackMethod
      - mappings
    AttributeCallbackMapping:
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          $ref: "#/components/schemas/AttributeType"
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
        attributeContentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: 'Type of the attribute content. '
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          type: array
          description: Set of targets for propagating value.
          items:
            $ref: "#/components/schemas/AttributeValueTarget"
          uniqueItems: true
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      required:
      - targets
      - to
    AttributeConstraintType:
      type: string
      enum:
      - regExp
      - range
      - dateTime
    AttributeContentType:
      type: string
      enum:
      - string
      - text
      - integer
      - boolean
      - float
      - date
      - time
      - datetime
      - secret
      - file
      - credential
      - codeblock
      - object
    AttributeType:
      type: string
      enum:
      - data
      - group
      - info
      - meta
      - custom
    AttributeValueTarget:
      type: string
      enum:
      - pathVariable
      - requestParameter
      - body
    BaseAttributeConstraint:
      type: object
      description: Optional regular expressions and constraints used for validating
        the Attribute content
      oneOf:
      - $ref: "#/components/schemas/RegexpAttributeConstraint"
      - $ref: "#/components/schemas/RangeAttributeConstraint"
      - $ref: "#/components/schemas/DateTimeAttributeConstraint"
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          type: object
          description: Attribute Constraint Data
      required:
      - data
      - type
    BaseAttributeContentDto:
      type: object
      description: Base Attribute content definition
      oneOf:
      - $ref: "#/components/schemas/BooleanAttributeContent"
      - $ref: "#/components/schemas/CodeBlockAttributeContent"
      - $ref: "#/components/schemas/CredentialAttributeContent"
      - $ref: "#/components/schemas/DateAttributeContent"
      - $ref: "#/components/schemas/DateTimeAttributeContent"
      - $ref: "#/components/schemas/FileAttributeContent"
      - $ref: "#/components/schemas/FloatAttributeContent"
      - $ref: "#/components/schemas/IntegerAttributeContent"
      - $ref: "#/components/schemas/ObjectAttributeContent"
      - $ref: "#/components/schemas/SecretAttributeContent"
      - $ref: "#/components/schemas/StringAttributeContent"
      - $ref: "#/components/schemas/TextAttributeContent"
      - $ref: "#/components/schemas/TimeAttributeContent"
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      required:
      - data
    BooleanAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: boolean
          description: Boolean attribute value
      required:
      - data
    CodeBlockAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/CodeBlockAttributeContentData"
          description: CodeBlock attribute content data
      required:
      - data
    CodeBlockAttributeContentData:
      type: object
      properties:
        language:
          $ref: "#/components/schemas/ProgrammingLanguageEnum"
          description: Definition of programming languages used for code
          example: "JAVA, PHP, C, etc"
        code:
          type: string
          description: Block of the code in Base64. Formatting of the code is specified
            by variable language
      required:
      - code
      - language
    CredentialAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/CredentialAttributeContentData"
          description: Credential attribute content data
      required:
      - data
    CredentialAttributeContentData:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: "#/components/schemas/DataAttribute"
      required:
      - attributes
      - kind
      - name
      - uuid
    DataAttribute:
      type: object
      description: Data attribute allows to store and transfer dynamic data. Its content
        can be edited and send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          description: Content of the Attribute
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/DataAttributeProperties"
          description: Properties of the Attributes
        constraints:
          type: array
          description: Optional regular expressions and constraints used for validating
            the Attribute content
          items:
            $ref: "#/components/schemas/BaseAttributeConstraint"
          oneOf:
          - $ref: "#/components/schemas/RegexpAttributeConstraint"
          - $ref: "#/components/schemas/RangeAttributeConstraint"
          - $ref: "#/components/schemas/DateTimeAttributeConstraint"
        attributeCallback:
          $ref: "#/components/schemas/AttributeCallback"
          description: Optional definition of callback for getting the content of
            the Attribute based on the action
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
    DataAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
    DateAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          format: date
          description: Date attribute value in format yyyy-MM-dd
      required:
      - data
    DateTimeAttributeConstraint:
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          $ref: "#/components/schemas/DateTimeAttributeConstraintData"
          description: DateTime Range Attribute Constraint Data
      required:
      - type
    DateTimeAttributeConstraintData:
      type: object
      properties:
        from:
          type: string
          format: date-time
          description: Start of the datetime for validation
        to:
          type: string
          format: date-time
          description: End of the datetime for validation
    DateTimeAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          format: date-time
          description: DateTime attribute value in format yyyy-MM-ddTHH:mm:ss.SSSXXX
      required:
      - data
    FileAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/FileAttributeContentData"
          description: File attribute content data
      required:
      - data
    FileAttributeContentData:
      type: object
      properties:
        content:
          type: string
          description: File content
        fileName:
          type: string
          description: Name of the file
        mimeType:
          type: string
          description: Type of the file uploaded
      required:
      - content
      - fileName
      - mimeType
    FloatAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: number
          format: float
          description: Float attribute value
      required:
      - data
    IntegerAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: integer
          format: int32
          description: Integer attribute value
      required:
      - data
    ObjectAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Object attribute content data
      required:
      - data
    ProgrammingLanguageEnum:
      type: string
      enum:
      - apacheconf
      - bash
      - basic
      - c
      - csharp
      - cpp
      - css
      - docker
      - fsharp
      - gherkin
      - git
      - go
      - graphql
      - html
      - http
      - ini
      - java
      - javascript
      - json
      - kotlin
      - latex
      - lisp
      - makefile
      - markdown
      - matlab
      - nginx
      - objectivec
      - perl
      - php
      - powershell
      - properties
      - python
      - ruby
      - rust
      - smalltalk
      - sql
      - typescript
      - vbnet
      - xquery
      - xml
      - yaml
    RangeAttributeConstraint:
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          $ref: "#/components/schemas/RangeAttributeConstraintData"
          description: Integer Range Attribute Constraint Data
      required:
      - type
    RangeAttributeConstraintData:
      type: object
      properties:
        from:
          type: integer
          format: int32
          description: Start of the range for validation
        to:
          type: integer
          format: int32
          description: End of the range for validation
    RegexpAttributeConstraint:
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          type: string
          description: Regular Expression Attribute Constraint Data
      required:
      - type
    RequestAttributeDto:
      type: object
      description: Request attribute to send attribute content for object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Content Type of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
      required:
      - content
      - contentType
      - name
      - uuid
    SecretAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/SecretAttributeContentData"
          description: Secret attribute content data
      required:
      - data
    SecretAttributeContentData:
      type: object
      properties:
        secret:
          type: string
          description: Secret attribute data
        protectionLevel:
          type: string
          description: Level of protection of the data
    StringAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: String attribute value
      required:
      - data
    TextAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Text attribute value
      required:
      - data
    TimeAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Time attribute value in format HH:mm:ss
      required:
      - data
    UpdateUserRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        groupUuids:
          type: array
          description: Groups UUIDs of the user (set to empty list to remove certificate
            from all groups)
          items:
            type: string
        certificateData:
          type: string
          description: Base64 Content of the admin certificate
        certificateUuid:
          type: string
          description: UUID of the existing certificate in the Inventory. Mandatory
            if certificate is not provided
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - email
    NameAndUuidDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
      required:
      - name
      - uuid
    ResponseAttributeDto:
      type: object
      description: Response attribute with content for object it belongs to
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: "#/components/schemas/AttributeType"
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Content Type of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
      required:
      - contentType
      - label
      - name
      - type
    RoleDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the user
        email:
          type: string
          description: Role contact email
        systemRole:
          type: boolean
          description: "Is system role. True = Yes, False = No"
      required:
      - name
      - systemRole
      - uuid
    UserCertificateDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the certificate
        fingerprint:
          type: string
          description: Fingerprint of the certificate
      required:
      - fingerprint
      - uuid
    UserDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the User
          example: 5b5f0784-2519-11ed-861d-0242ac120002
        username:
          type: string
          description: Username of the user
          example: user1
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        description:
          type: string
          description: Description of the user
        groups:
          type: array
          description: Groups of the user
          items:
            $ref: "#/components/schemas/NameAndUuidDto"
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        systemUser:
          type: boolean
          description: "Is System user. True = Yes, False = No"
        certificate:
          $ref: "#/components/schemas/UserCertificateDto"
          description: User Certificate details
        roles:
          type: array
          description: Roles for the user
          items:
            $ref: "#/components/schemas/RoleDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - enabled
      - groups
      - roles
      - systemUser
      - username
      - uuid
    TokenInstanceRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Token Instance
        description:
          type: string
          description: Token Instance description
        connectorUuid:
          type: string
          description: UUID of the Connector
        kind:
          type: string
          description: Connector Kind
        customAttributes:
          type: array
          description: Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        attributes:
          type: array
          description: Attributes for Token Instance
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
      - connectorUuid
      - customAttributes
      - kind
      - name
    ErrorMessageDto:
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
      required:
      - message
    MetadataResponseDto:
      type: object
      description: Metadata response attributes with their source connector
      properties:
        connectorUuid:
          type: string
          description: UUID of the Connector
        connectorName:
          type: string
          description: Name of the Connector
        sourceObjectType:
          $ref: "#/components/schemas/Resource"
          description: Source Object Type
        items:
          type: array
          description: List of Metadata
          items:
            $ref: "#/components/schemas/ResponseMetadataDto"
      required:
      - items
    ResponseMetadataDto:
      type: object
      description: Response metadata attribute instance with content
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: "#/components/schemas/AttributeType"
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Content Type of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        sourceObjects:
          type: array
          description: Source Objects
          items:
            $ref: "#/components/schemas/NameAndUuidDto"
      required:
      - contentType
      - label
      - name
      - sourceObjects
      - type
    TokenInstanceDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        connectorName:
          type: string
          description: Connector Name
        connectorUuid:
          type: string
          description: Connector UUID
        kind:
          type: string
          description: Connector Kind
        status:
          $ref: "#/components/schemas/TokenInstanceStatusDetailDto"
          description: Status Of the Token Instance
        tokenProfiles:
          type: integer
          format: int32
          description: Number of Token Profiles associated
        attributes:
          type: array
          description: List of Token instance Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        metadata:
          type: array
          description: Token instance Metadata
          items:
            $ref: "#/components/schemas/MetadataResponseDto"
        customAttributes:
          type: array
          description: Custom Attributes for the Token Instance
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - attributes
      - name
      - status
      - tokenProfiles
      - uuid
    TokenInstanceStatus:
      type: string
      enum:
      - Connected
      - Disconnected
      - Activated
      - Deactivated
      - Warning
      - Unknown
    TokenInstanceStatusComponent:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Token instance component status
        details:
          type: object
          additionalProperties:
            type: object
          description: Token instance component details
      required:
      - status
    TokenInstanceStatusDetailDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Token instance status
        components:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TokenInstanceStatusComponent"
          description: Components of the Token instance status
      required:
      - status
    EditTokenProfileRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of Token Profile
        attributes:
          type: array
          description: List of Attributes for Token Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
      required:
      - attributes
    KeyUsage:
      type: string
      enum:
      - sign
      - verify
      - encrypt
      - decrypt
      - wrap
      - unwrap
    TokenProfileDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of Token Profile
        tokenInstanceUuid:
          type: string
          description: UUID of Token Instance
        tokenInstanceName:
          type: string
          description: Name of Token instance
        attributes:
          type: array
          description: List of Token Profile attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        tokenInstanceStatus:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Token Instance Status
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        usages:
          type: array
          description: Usages for the Keys assoiated to the profile
          items:
            $ref: "#/components/schemas/KeyUsage"
      required:
      - attributes
      - enabled
      - name
      - tokenInstanceName
      - tokenInstanceStatus
      - tokenInstanceUuid
      - usages
      - uuid
    TokenProfileKeyUsageRequestDto:
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
      required:
      - usage
    UpdateKeyUsageRequestDto:
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
        uuids:
          type: array
          description: "List of UUIDs of the key Items. If not provided, the usage\
            \ will be updated to all the itemsin the key"
          items:
            type: string
            format: uuid
      required:
      - usage
    BulkTokenProfileKeyUsageRequestDto:
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
        uuids:
          type: array
          description: Token Profile UUIDs
          items:
            type: string
            format: uuid
      required:
      - usage
      - uuids
    PlatformSettingsDto:
      type: object
      properties:
        utils:
          $ref: "#/components/schemas/UtilsSettingsDto"
          description: Utils settings of the platform
      required:
      - utils
    UtilsSettingsDto:
      type: object
      properties:
        utilsServiceUrl:
          type: string
          description: URL of the Util Service
          example: http://util-service:8080
    NotificationSettingsDto:
      type: object
      properties:
        notificationsMapping:
          type: object
          additionalProperties:
            type: string
          description: Map of notification instances where key is notification type
            enum
      required:
      - notificationsMapping
    AuditLoggingSettingsDto:
      type: object
      properties:
        logAllModules:
          type: boolean
          description: "Collect logs for all modules. If true, logged modules list\
            \ is not taken into account only ignored modules"
        logAllResources:
          type: boolean
          description: "Collect logs for all resources. If true, logged resources\
            \ list is not taken into account only ignored resources"
        loggedModules:
          type: array
          description: List of modules for which logs are collected.
          items:
            $ref: "#/components/schemas/Module"
          uniqueItems: true
        ignoredModules:
          type: array
          description: List of modules that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Module"
          uniqueItems: true
        loggedResources:
          type: array
          description: List of resources for which logs are collected.
          items:
            $ref: "#/components/schemas/Resource"
          uniqueItems: true
        ignoredResources:
          type: array
          description: List of resources that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Resource"
          uniqueItems: true
        output:
          type: string
          description: Type of audit logs output/storage channel
          enum:
          - NONE
          - ALL
          - CONSOLE
          - DATABASE
      required:
      - logAllModules
      - logAllResources
      - output
    LoggingSettingsDto:
      type: object
      properties:
        auditLogs:
          $ref: "#/components/schemas/AuditLoggingSettingsDto"
          description: Settings of audit logging
        eventLogs:
          $ref: "#/components/schemas/ResourceLoggingSettingsDto"
          description: Settings of event logging
      required:
      - auditLogs
      - eventLogs
    Module:
      type: string
      enum:
      - approvals
      - auth
      - certificates
      - keys
      - compliance
      - core
      - discovery
      - entities
      - protocols
      - scheduler
      - workflows
    ResourceLoggingSettingsDto:
      type: object
      properties:
        logAllModules:
          type: boolean
          description: "Collect logs for all modules. If true, logged modules list\
            \ is not taken into account only ignored modules"
        logAllResources:
          type: boolean
          description: "Collect logs for all resources. If true, logged resources\
            \ list is not taken into account only ignored resources"
        loggedModules:
          type: array
          description: List of modules for which logs are collected.
          items:
            $ref: "#/components/schemas/Module"
          uniqueItems: true
        ignoredModules:
          type: array
          description: List of modules that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Module"
          uniqueItems: true
        loggedResources:
          type: array
          description: List of resources for which logs are collected.
          items:
            $ref: "#/components/schemas/Resource"
          uniqueItems: true
        ignoredResources:
          type: array
          description: List of resources that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Resource"
          uniqueItems: true
      required:
      - logAllModules
      - logAllResources
    AuthenticationSettingsUpdateDto:
      type: object
      properties:
        disableLocalhostUser:
          type: boolean
          description: Disable using localhost user for requests from localhost
        oauth2Providers:
          type: array
          items:
            $ref: "#/components/schemas/OAuth2ProviderSettingsDto"
      required:
      - disableLocalhostUser
    OAuth2ProviderSettingsDto:
      type: object
      properties:
        name:
          type: string
          description: Name of OAuth2 Provider
        issuerUrl:
          type: string
          description: "URL of issuer issuing authentication tokens. If provided,\
            \ authentication via JWT token is enabled for this provider."
        clientId:
          type: string
          description: The client ID used to identify the client application during
            the authorization process.
        clientSecret:
          type: string
          description: The client secret used by the client application to authenticate
            with the authorization server.
        authorizationUrl:
          type: string
          description: The URL where the authorization server redirects the user for
            login and authorization.
        tokenUrl:
          type: string
          description: The URl used to exchange the authorization code or credentials
            for an access token.
        jwkSetUrl:
          type: string
          description: The URL where the JSON Web Key Set (JWKS) containing the public
            keys used to verify JWT tokens can be retrieved.
        jwkSet:
          type: string
          description: "Base64 encoded JWK Set, provided in case JWK Set URL is not\
            \ available"
        scope:
          type: array
          description: ' The list of scopes that define the access levels and permissions
            requested by the client application.'
          items:
            type: string
        logoutUrl:
          type: string
          description: URL to end session on provider side.
        postLogoutUrl:
          type: string
          description: URL that user will be redirected after logout from application.
        userInfoUrl:
          type: string
          description: The URL containing information about user.
        audiences:
          type: array
          description: "A list of expected audiences for validating the issued tokens,\
            \ used to match the intended recipients of the tokens."
          items:
            type: string
        skew:
          type: integer
          format: int32
          description: "The allowed time skew, in seconds, for token validation. This\
            \ accounts for clock differences between systems. Default value is 30\
            \ seconds."
        sessionMaxInactiveInterval:
          type: integer
          format: int32
          default: 15m
          description: Duration in seconds after which will inactive user's session
            be terminated.
      required:
      - name
    OAuth2ProviderSettingsUpdateDto:
      type: object
      properties:
        issuerUrl:
          type: string
          description: "URL of issuer issuing authentication tokens. If provided,\
            \ authentication via JWT token is enabled for this provider."
        clientId:
          type: string
          description: The client ID used to identify the client application during
            the authorization process.
        clientSecret:
          type: string
          description: The client secret used by the client application to authenticate
            with the authorization server.
        authorizationUrl:
          type: string
          description: The URL where the authorization server redirects the user for
            login and authorization.
        tokenUrl:
          type: string
          description: The URl used to exchange the authorization code or credentials
            for an access token.
        jwkSetUrl:
          type: string
          description: The URL where the JSON Web Key Set (JWKS) containing the public
            keys used to verify JWT tokens can be retrieved.
        jwkSet:
          type: string
          description: "Base64 encoded JWK Set, provided in case JWK Set URL is not\
            \ available"
        scope:
          type: array
          description: ' The list of scopes that define the access levels and permissions
            requested by the client application.'
          items:
            type: string
        logoutUrl:
          type: string
          description: URL to end session on provider side.
        postLogoutUrl:
          type: string
          description: URL that user will be redirected after logout from application.
        userInfoUrl:
          type: string
          description: The URL containing information about user.
        audiences:
          type: array
          description: "A list of expected audiences for validating the issued tokens,\
            \ used to match the intended recipients of the tokens."
          items:
            type: string
        skew:
          type: integer
          format: int32
          description: "The allowed time skew, in seconds, for token validation. This\
            \ accounts for clock differences between systems. Default value is 30\
            \ seconds."
        sessionMaxInactiveInterval:
          type: integer
          format: int32
          default: 15m
          description: Duration in seconds after which will inactive user's session
            be terminated.
    UpdateScheduledJob:
      type: object
      properties:
        cronExpression:
          type: string
          description: Cron expression for job schedule
    ScheduledJobDetailDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: UUID of the scheduled job
        jobName:
          type: string
          description: Name of the scheduled job
        jobType:
          type: string
          description: Type of scheduled job (job processor name)
        cronExpression:
          type: string
          description: CRON expression representing configuration of pattern how to
            run scheduled job
        enabled:
          type: boolean
          description: "Status of the scheduled job. True = Enabled, False = Disabled"
        oneTime:
          type: boolean
          description: Is scheduled job triggered only once
        system:
          type: boolean
          description: Is system scheduled job
        lastExecutionStatus:
          $ref: "#/components/schemas/SchedulerJobExecutionStatus"
          description: Execution status of last job triggered task
        userUuid:
          type: string
          format: uuid
        objectData:
          type: object
      required:
      - cronExpression
      - enabled
      - jobName
      - jobType
      - lastExecutionStatus
      - oneTime
      - system
      - uuid
    SchedulerJobExecutionStatus:
      type: string
      enum:
      - started
      - succeeded
      - failed
    ScepProfileEditRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the SCEP Profile
          example: Sample description
        raProfileUuid:
          type: string
          description: RA Profile UUID
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        caCertificateUuid:
          type: string
          description: UUID of the Certificate to be used as CA Certificate for SCEP
            Requests
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        renewalThreshold:
          type: integer
          format: int32
          default: Half of certificate validity
          description: Minimum expiry days to allow renewal of certificate. Empty
            or the value '0' will be considered as null and half life of the certificate
            validity will be considered for the protocol
        includeCaCertificate:
          type: boolean
          default: "False"
          description: Include CA Certificate in the SCEP Message response
        includeCaCertificateChain:
          type: boolean
          default: "False"
          description: Include CA Certificate Chain in the SCEP Message response
        challengePassword:
          type: string
          description: Challenge Password for the SCEP Request
        enableIntune:
          type: boolean
          description: Status of Intune
        intuneTenant:
          type: string
          description: Intune Tenant
        intuneApplicationId:
          type: string
          description: Intune Application ID
        intuneApplicationKey:
          type: string
          description: Intune Application Key
      required:
      - caCertificateUuid
      - issueCertificateAttributes
    CertificateDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        issuerCommonName:
          type: string
          description: Certificate issuer common name
        issuerDn:
          type: string
          description: Issuer DN of the Certificate
        subjectDn:
          type: string
          description: Subject DN of the Certificate
        notBefore:
          type: string
          format: date-time
          description: Certificate validity start date
        notAfter:
          type: string
          format: date-time
          description: Certificate expiration date
        publicKeyAlgorithm:
          type: string
          description: Public key algorithm
        signatureAlgorithm:
          type: string
          description: Certificate signature algorithm
        keySize:
          type: integer
          format: int32
          description: Certificate key size
        state:
          $ref: "#/components/schemas/CertificateState"
          description: State of the Certificate
        validationStatus:
          $ref: "#/components/schemas/CertificateValidationStatus"
          description: Current validation status of the certificate
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile associated to the Certificate
        fingerprint:
          type: string
          description: SHA256 fingerprint of the Certificate
        groups:
          type: array
          description: Groups associated to the Certificate
          items:
            $ref: "#/components/schemas/GroupDto"
        owner:
          type: string
          description: Certificate Owner
        ownerUuid:
          type: string
          description: Certificate Owner UUID
        certificateType:
          $ref: "#/components/schemas/CertificateType"
          description: Certificate type
        issuerSerialNumber:
          type: string
          description: Serial number of the issuer
        complianceStatus:
          $ref: "#/components/schemas/ComplianceStatus"
          description: Certificate compliance status
        issuerCertificateUuid:
          type: string
          description: UUID of the issuer certificate
        privateKeyAvailability:
          type: boolean
          description: Private Key Availability
        trustedCa:
          type: boolean
          description: "Indicator whether CA is marked as trusted, set to null if\
            \ certificate is not CA"
      required:
      - commonName
      - keySize
      - privateKeyAvailability
      - publicKeyAlgorithm
      - signatureAlgorithm
      - state
      - subjectDn
      - trustedCa
      - uuid
      - validationStatus
    CertificateState:
      type: string
      enum:
      - requested
      - rejected
      - pending_approval
      - pending_issue
      - pending_revoke
      - failed
      - issued
      - revoked
      - archived
    CertificateType:
      type: string
      enum:
      - X.509
      - SSH
    CertificateValidationStatus:
      type: string
      enum:
      - not_checked
      - failed
      - inactive
      - invalid
      - valid
      - revoked
      - expiring
      - expired
    ComplianceStatus:
      type: string
      enum:
      - not_checked
      - ok
      - nok
      - na
    GroupDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Group
        email:
          type: string
          description: Group contact email
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - name
      - uuid
    ScepProfileDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        description:
          type: string
          description: SCEP Profile description
          example: Sample description
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile
        includeCaCertificate:
          type: boolean
          description: Include CA certificate in the SCEP response
        includeCaCertificateChain:
          type: boolean
          description: Include CA certificate chain in the SCEP response
        renewThreshold:
          type: integer
          format: int32
          description: Renewal time threshold in days
          example: 30
        scepUrl:
          type: string
          description: SCEP URL
          example: https://some-server.com/api/v1/protocols/scep/profile/pkiclient.exe
        enableIntune:
          type: boolean
          description: Status of Intune
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue a Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        caCertificate:
          $ref: "#/components/schemas/CertificateDto"
          description: CA Certificate for the SCEP Profile
        intuneTenant:
          type: string
          description: Intune tenant
        intuneApplicationId:
          type: string
          description: Intune application ID
      required:
      - enabled
      - includeCaCertificate
      - includeCaCertificateChain
      - name
      - uuid
    SimplifiedRaProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        authorityInstanceUuid:
          type: string
          description: Authority Instance UUID
      required:
      - enabled
      - name
      - uuid
    RoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the role
        description:
          type: string
          description: Description for the role
        email:
          type: string
          description: Role contact email
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
    RoleDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the user
        email:
          type: string
          description: Role contact email
        systemRole:
          type: boolean
          description: "Is system role. True = Yes, False = No"
        users:
          type: array
          description: List of Users with the role
          items:
            $ref: "#/components/schemas/UserDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - name
      - systemRole
      - users
      - uuid
    UserDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the User
          example: 5b5f0784-2519-11ed-861d-0242ac120002
        username:
          type: string
          description: Username of the user
          example: user1
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        description:
          type: string
          description: Description of the user
        groups:
          type: array
          description: Groups of the user
          items:
            $ref: "#/components/schemas/NameAndUuidDto"
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        systemUser:
          type: boolean
          description: "Is System user. True = Yes, False = No"
      required:
      - enabled
      - groups
      - systemUser
      - username
      - uuid
    ObjectPermissionsRequestDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Object
        name:
          type: string
          description: Name of the Object
        allow:
          type: array
          description: Allowed Action list
          items:
            type: string
        deny:
          type: array
          description: Denied Action list
          items:
            type: string
      required:
      - name
      - uuid
    AttributeMappingDto:
      type: object
      properties:
        mappingAttributeUuid:
          type: string
          description: Mapping Attribute UUID
        mappingAttributeName:
          type: string
          description: Mapping Attribute Name
        customAttributeUuid:
          type: string
          description: Custom Attribute Uuid
        customAttributeLabel:
          type: string
          description: Custom Attribute Label
      required:
      - customAttributeLabel
      - customAttributeUuid
      - mappingAttributeName
      - mappingAttributeUuid
    NotificationInstanceUpdateRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Notification instance description
        attributes:
          type: array
          description: List of Notification instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        attributeMappings:
          type: array
          description: List of attribute mappings between mapping attributes and (recipient)
            custom attributes
          items:
            $ref: "#/components/schemas/AttributeMappingDto"
      required:
      - attributes
    NotificationInstanceDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Notification instance description
        connectorUuid:
          type: string
          description: UUID of Notification provider
        connectorName:
          type: string
          description: Name of Notification provider
        kind:
          type: string
          description: Notification Instance Kind
        attributes:
          type: array
          description: List of Notification instance Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        attributeMappings:
          type: array
          description: List of attribute mappings between mapping attributes and (recipient)
            custom attributes
          items:
            $ref: "#/components/schemas/AttributeMappingDto"
      required:
      - attributes
      - connectorName
      - connectorUuid
      - kind
      - name
      - uuid
    EditKeyRequestDto:
      type: object
      properties:
        tokenProfileUuid:
          type: string
          description: UUID of the token profile
        name:
          type: string
          description: Name of the Cryptographic Key
        description:
          type: string
          description: Description of the Cryptographic Key
        ownerUuid:
          type: string
          description: Key Owner UUID
        groupUuids:
          type: array
          description: UUIDs of the groups to associate with key
          items:
            type: string
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - description
      - name
      - tokenProfileUuid
    KeyAlgorithm:
      type: string
      enum:
      - RSA
      - ECDSA
      - FALCON
      - CRYSTALS-Dilithium
      - SPHINCS+
      - Unknown
    KeyAssociationDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        resource:
          $ref: "#/components/schemas/Resource"
          description: Type of the resource
      required:
      - name
      - resource
      - uuid
    KeyCompromiseReason:
      type: string
      enum:
      - disclosure
      - modification
      - substitution
      - use_of_sensitive_data
    KeyDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          format: date-time
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        customAttributes:
          type: array
          description: Custom Attributes for the Cryptographic Key
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        attributes:
          type: array
          description: Attributes for the Cryptographic Key
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        owner:
          type: string
          description: Owner of the Key
        ownerUuid:
          type: string
          description: UUID of the owner of the Key
        groups:
          type: array
          description: Groups associated to the key
          items:
            $ref: "#/components/schemas/GroupDto"
        items:
          type: array
          description: Key Objects
          items:
            $ref: "#/components/schemas/KeyItemDetailDto"
        associations:
          type: array
          description: List of associated items
          items:
            $ref: "#/components/schemas/KeyAssociationDto"
      required:
      - attributes
      - creationTime
      - description
      - items
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
    KeyFormat:
      type: string
      enum:
      - Raw
      - SubjectPublicKeyInfo
      - PrivateKeyInfo
      - EncryptedPrivateKeyInfo
      - Custom
    KeyItemDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        keyReferenceUuid:
          type: string
          description: UUID of the key item in the Connector
        type:
          $ref: "#/components/schemas/KeyType"
          description: Type of the Key
        keyAlgorithm:
          $ref: "#/components/schemas/KeyAlgorithm"
          description: Key Algorithm
        format:
          $ref: "#/components/schemas/KeyFormat"
          description: Key Format
        keyData:
          type: string
          description: Key Data
        length:
          type: integer
          format: int32
          description: Key Length
        metadata:
          type: array
          description: Metadata for the key
          items:
            $ref: "#/components/schemas/MetadataResponseDto"
        usage:
          type: array
          description: Key Usages
          items:
            $ref: "#/components/schemas/KeyUsage"
        enabled:
          type: boolean
          description: Boolean describing if the key is enabled or not
        state:
          $ref: "#/components/schemas/KeyState"
          description: Key State
        reason:
          $ref: "#/components/schemas/KeyCompromiseReason"
          description: Reason for Compromise
      required:
      - enabled
      - keyAlgorithm
      - keyReferenceUuid
      - name
      - state
      - type
      - usage
      - uuid
    KeyState:
      type: string
      enum:
      - pre-active
      - active
      - deactivated
      - compromised
      - destroyed
      - destroyedCompromised
    KeyType:
      type: string
      enum:
      - Secret
      - Public
      - Private
      - Split
    BulkKeyUsageRequestDto:
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
        uuids:
          type: array
          description: Key UUIDs
          items:
            type: string
            format: uuid
      required:
      - usage
      - uuids
    BulkKeyItemUsageRequestDto:
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
        uuids:
          type: array
          description: Key Item UUIDs
          items:
            type: string
            format: uuid
      required:
      - usage
      - uuids
    GroupRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Group
        description:
          type: string
          description: Description of the Group
        email:
          type: string
          description: Group contact email
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - name
    EntityInstanceUpdateRequestDto:
      type: object
      properties:
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
    EntityInstanceDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        status:
          type: string
          description: Status of Entity instance
        connectorUuid:
          type: string
          description: UUID of Entity Provider
        connectorName:
          type: string
          description: Name of Entity Provider
        kind:
          type: string
          description: Entity instance Kind
          example: "Keystore, etc."
      required:
      - attributes
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
    EditLocationRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the Location
        attributes:
          type: array
          description: List of Attributes for Location
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
      required:
      - attributes
    CertificateInLocationDto:
      type: object
      properties:
        certificateUuid:
          type: string
          description: UUID of the Certificate
        state:
          $ref: "#/components/schemas/CertificateState"
          description: State of the Certificate
        validationStatus:
          $ref: "#/components/schemas/CertificateValidationStatus"
          description: Current validation status of the certificate
        commonName:
          type: string
          description: Common Name of the Subject DN field of the Certificate
        serialNumber:
          type: string
          description: Serial number in HEX of the Certificate
        metadata:
          type: array
          description: Metadata of the Certificate in Location
          items:
            $ref: "#/components/schemas/MetadataResponseDto"
        pushAttributes:
          type: array
          description: Applied push attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        csrAttributes:
          type: array
          description: Applied issue attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        withKey:
          type: boolean
          default: "false"
          description: If the Certificate in Location has associated private key
      required:
      - certificateUuid
      - commonName
      - serialNumber
      - state
      - validationStatus
    LocationDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Location
        entityInstanceUuid:
          type: string
          description: UUID of Entity instance
        entityInstanceName:
          type: string
          description: Name of Entity instance
        attributes:
          type: array
          description: List of Location attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        supportMultipleEntries:
          type: boolean
          default: "false"
          description: If the location supports multiple Certificates
        supportKeyManagement:
          type: boolean
          default: "false"
          description: If the location supports key management operations
        certificates:
          type: array
          description: List of Certificates in Location
          items:
            $ref: "#/components/schemas/CertificateInLocationDto"
        metadata:
          type: array
          description: Location metadata
          items:
            $ref: "#/components/schemas/MetadataResponseDto"
      required:
      - attributes
      - certificates
      - enabled
      - entityInstanceName
      - entityInstanceUuid
      - name
      - supportKeyManagement
      - supportMultipleEntries
      - uuid
    PushToLocationRequestDto:
      type: object
      properties:
        attributes:
          type: array
          description: List of push Attributes for Location
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
    CredentialUpdateRequestDto:
      type: object
      properties:
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
    CredentialDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        connectorUuid:
          type: string
          description: UUID of Credential provider Connector
        connectorName:
          type: string
          description: Name of Credential provider Connector
      required:
      - attributes
      - connectorName
      - connectorUuid
      - enabled
      - kind
      - name
      - uuid
    AuthType:
      type: string
      enum:
      - none
      - basic
      - certificate
      - apiKey
      - jwt
    ConnectorUpdateRequestDto:
      type: object
      properties:
        url:
          type: string
          description: URL of the Connector to connect
          example: http://network-discovery-provicer:8080
        authType:
          $ref: "#/components/schemas/AuthType"
          description: Type of authentication for the Connector
          example: none
        authAttributes:
          type: array
          description: List of authentication Attributes. Required if the authentication
            type is not NONE
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
    ConnectorDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        functionGroups:
          type: array
          description: List of Function Groups implemented by the Connector
          items:
            $ref: "#/components/schemas/FunctionGroupDto"
        url:
          type: string
          description: URL of the Connector
          example: http://network-discovery-provider:8080
        authType:
          $ref: "#/components/schemas/AuthType"
          description: Type of authentication for the Connector
          example: none
        authAttributes:
          type: array
          description: List of Attributes for the authentication type
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        status:
          $ref: "#/components/schemas/ConnectorStatus"
          description: Status of the Connector
          example: CONNECTED
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - authType
      - functionGroups
      - name
      - status
      - url
      - uuid
    ConnectorStatus:
      type: string
      enum:
      - waitingForApproval
      - connected
      - failed
      - offline
    EndpointDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        context:
          type: string
          description: Context of the Endpoint
          example: /v1
        method:
          type: string
          description: Method to be used for the Endpoint
          example: POST
        required:
          type: boolean
          description: True if the Endpoint is required for implementation
          example: true
      required:
      - context
      - method
      - name
      - required
      - uuid
    FunctionGroupCode:
      type: string
      enum:
      - credentialProvider
      - legacyAuthorityProvider
      - authorityProvider
      - discoveryProvider
      - entityProvider
      - complianceProvider
      - cryptographyProvider
      - notificationProvider
    FunctionGroupDto:
      type: object
      properties:
        functionGroupCode:
          $ref: "#/components/schemas/FunctionGroupCode"
          description: Enumerated code of functional group
        kinds:
          type: array
          description: List of supported functional group kinds
          example:
          - SoftKeyStore
          - Basic
          - ApiKey
          items:
            type: string
        endPoints:
          type: array
          description: List of end points related to functional group
          items:
            $ref: "#/components/schemas/EndpointDto"
        uuid:
          type: string
          description: UUID of the Function Group
          example: 204a57f6-2ed3-45b6-bf09-af8b8c900e33
        name:
          type: string
          description: Function Group Name
      required:
      - endPoints
      - functionGroupCode
      - kinds
      - name
      - uuid
    ConnectDto:
      type: object
      properties:
        functionGroup:
          $ref: "#/components/schemas/FunctionGroupDto"
          description: Function Group information of a connector
      required:
      - functionGroup
    ConnectRequestDto:
      type: object
      properties:
        url:
          type: string
          description: URL of the Connector to connect
          example: http://network-discovery-provicer:8080
        uuid:
          type: string
          description: UUID of the Connector. Mandatory if connection is needed for
            the same Connector
        authType:
          $ref: "#/components/schemas/AuthType"
          description: Type of authentication for the Connector
          example: none
        authAttributes:
          type: array
          description: List of authentication Attributes. Required if the authentication
            type is not NONE
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - authType
      - url
    CmpProfileEditRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the CMP Profile
          example: Sample text description
        raProfileUuid:
          type: string
          description: RA Profile UUID that the CMP Profile is associated with
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate for the associated
            RA Profile. Required when raProfileUuid is provided
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate for the associated
            RA Profile. Required when raProfileUuid is provided
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes for CMP Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        requestProtectionMethod:
          $ref: "#/components/schemas/ProtectionMethod"
          description: Protection Method for the CMP Request
        responseProtectionMethod:
          $ref: "#/components/schemas/ProtectionMethod"
          description: Protection Method for the CMP Response
        sharedSecret:
          type: string
          description: Shared secret for the CMP Request. Required when requestProtectionMethod
            is sharedSecret
        signingCertificateUuid:
          type: string
          description: UUID of the Certificate to be used as signing certificate for
            CMP responses. Required when responseProtectionMethod is signature
        name:
          type: string
          description: Name of the CMP Profile
          example: Example CMP Profile
        variant:
          type: string
          description: Variant of the CMP Profile
          enum:
          - v2
          - v2_3gpp
          - v3
      required:
      - name
      - requestProtectionMethod
      - responseProtectionMethod
      - variant
    ProtectionMethod:
      type: string
      enum:
      - sharedSecret
      - signature
    CmpProfileDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        variant:
          type: string
          description: Variant of the CMP Profile
          enum:
          - v2
          - v2_3gpp
          - v3
        description:
          type: string
          description: CMP Profile description
          example: Sample text description
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile associated with the CMP Profile
        cmpUrl:
          type: string
          description: CMP URL
          example: https://your-domain.com/api/v1/protocols/cmp/cmpProfile
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue a Certificate for the associated
            RA Profile
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke a Certificate for the associated
            RA Profile
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes for CMP Profile
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        requestProtectionMethod:
          $ref: "#/components/schemas/ProtectionMethod"
          description: Protection Method for the CMP Request
        responseProtectionMethod:
          $ref: "#/components/schemas/ProtectionMethod"
          description: Protection Method for the CMP Response
        signingCertificate:
          $ref: "#/components/schemas/CertificateDto"
          description: Signing certificate for the CMP responses
      required:
      - enabled
      - name
      - requestProtectionMethod
      - responseProtectionMethod
      - uuid
      - variant
    AuthorityInstanceUpdateRequestDto:
      type: object
      properties:
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
    AuthorityInstanceDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        status:
          type: string
          description: Status of Authority instance
        connectorUuid:
          type: string
          description: UUID of Authority provider
        connectorName:
          type: string
          description: Name of Authority provider
        kind:
          type: string
          description: Authority Instance Kind
          example: "LegacyEjbca, ADCS, etc."
      required:
      - attributes
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
    EditRaProfileRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of RA Profile
        attributes:
          type: array
          description: List of Attributes for RA Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
      required:
      - attributes
    RaProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of RA Profile
        authorityInstanceUuid:
          type: string
          description: UUID of Authority provider
        authorityInstanceName:
          type: string
          description: Name of Authority instance
        legacyAuthority:
          type: boolean
          description: Has Authority of legacy authority provider
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        attributes:
          type: array
          description: List of RA Profiles attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        enabledProtocols:
          type: array
          description: List of protocols enabled
          items:
            type: string
      required:
      - authorityInstanceName
      - authorityInstanceUuid
      - enabled
      - name
      - uuid
    GlobalMetadataUpdateRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      required:
      - label
    GlobalMetadataDefinitionDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute Content Type
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
        type:
          $ref: "#/components/schemas/AttributeType"
          default: custom
          description: Type of the Attribute
          example: custom
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      required:
      - contentType
      - description
      - label
      - name
      - type
      - uuid
    CustomAttributeUpdateRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
        content:
          type: array
          description: Predefined content for the attribute if needed. The content
            of the Attribute must satisfy the type
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
        resources:
          type: array
          description: List of resource to be associated with the custom attribute
          items:
            $ref: "#/components/schemas/Resource"
      required:
      - label
    CustomAttributeDefinitionDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute Content Type
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
        type:
          $ref: "#/components/schemas/AttributeType"
          default: custom
          description: Type of the Attribute
          example: custom
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
        content:
          type: array
          description: Predefined content for the attribute if needed. The content
            of the Attribute must satisfy the type
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
        resources:
          type: array
          description: List of resources which are allowed to use the Custom Attribute
          items:
            $ref: "#/components/schemas/Resource"
      required:
      - contentType
      - description
      - label
      - name
      - required
      - type
      - uuid
    ApprovalProfileUpdateRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the Approval profile
          example: Detail description of the approval profile
        expiry:
          type: integer
          format: int32
          description: Expiration of the Approval profile in hours
          example: 30
        approvalSteps:
          type: array
          description: List of Approval steps for the Approval profile
          items:
            $ref: "#/components/schemas/ApprovalStepRequestDto"
      required:
      - approvalSteps
    ApprovalStepRequestDto:
      type: object
      properties:
        userUuid:
          type: string
          format: uuid
          description: UUID of the responsible user to approve action in approval
            step
        roleUuid:
          type: string
          format: uuid
          description: UUID of the responsible role of the users to approve action
            in approval step
        groupUuid:
          type: string
          format: uuid
          description: UUID of the responsible group of the users to approve action
            in approval step
        description:
          type: string
          description: Description of the approval step
        order:
          type: integer
          format: int32
          description: Order of the position in the approval steps flow
        requiredApprovals:
          type: integer
          format: int32
          description: "Count of the required approvals for the approval step, by\
            \ default there is 1 approval needed."
      required:
      - order
    AcmeProfileEditRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the ACME Profile
          example: Sample description
        termsOfServiceUrl:
          type: string
          description: Terms of Service URL
          example: https://sample-url.com/termsOfService
        websiteUrl:
          type: string
          description: Website URL
          example: https://sample-url.com
        dnsResolverIp:
          type: string
          default: System Default
          description: DNS Resolver IP address
          example: 8.8.8.8
        dnsResolverPort:
          type: string
          default: "53"
          description: DNS Resolver port number
          example: 53
        raProfileUuid:
          type: string
          description: RA Profile UUID
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        retryInterval:
          type: integer
          format: int32
          default: "30"
          description: Retry interval for the Orders
          example: 60
        termsOfServiceChangeDisable:
          type: boolean
          default: "false"
          description: Disable new Orders due to change in Terms of Service
          example: false
        termsOfServiceChangeUrl:
          type: string
          description: Changes of Terms of Service URL
          example: https://sample-url.com/termsOfService/change
        validity:
          type: integer
          format: int32
          default: "36000"
          description: Order Validity
          example: 3000
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        requireContact:
          type: boolean
          default: "false"
          description: Require contact information for new Account
          example: true
        requireTermsOfService:
          type: boolean
          default: "false"
          description: Require new Account to agree on Terms of Service
          example: false
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - issueCertificateAttributes
      - revokeCertificateAttributes
    AcmeProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        description:
          type: string
          description: ACME Profile description
          example: Sample description
        termsOfServiceUrl:
          type: string
          description: Terms of Service URL
          example: https://sample-url.com/termsOfService
        websiteUrl:
          type: string
          description: Website URL
          example: https://sample-company.com
        dnsResolverIp:
          type: string
          description: DNS Resolver IP address
          example: 8.8.8.8
        dnsResolverPort:
          type: string
          description: DNS Resolver port number
          example: 53
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile
        retryInterval:
          type: integer
          format: int32
          description: Retry interval for ACME client requests
          example: 30
        termsOfServiceChangeDisable:
          type: boolean
          description: Disable new Orders (change in Terms of Service)
          example: false
        validity:
          type: integer
          format: int32
          description: Order validity
          example: 36000
        directoryUrl:
          type: string
          description: ACME Directory URL
          example: https://some-server.com/api/v1/protocols/acme/profile1/directory
        termsOfServiceChangeUrl:
          type: string
          description: Changes of Terms of Service URL
          example: https://some-company.com/termsOfService/change
        requireContact:
          type: boolean
          description: Require Contact information for new Account
          example: true
        requireTermsOfService:
          type: boolean
          description: Require new Account to agree on Terms of Service
          example: true
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue a Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke a Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - enabled
      - name
      - uuid
    CertificateRequestFormat:
      type: string
      enum:
      - pkcs10
      - crmf
    ClientCertificateSignRequestDto:
      type: object
      properties:
        csrAttributes:
          type: array
          description: List of attributes to create CSR. Required if CSR is not provided
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        signatureAttributes:
          type: array
          description: List of attributes to sign the CSR
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        request:
          type: string
          description: Certificate signing request encoded as Base64 string
        format:
          $ref: "#/components/schemas/CertificateRequestFormat"
          default: pkcs10
          description: Certificate signing request format
        tokenProfileUuid:
          type: string
          format: uuid
          description: Token Profile UUID. Required if CSR is not uploaded
        keyUuid:
          type: string
          format: uuid
          description: Key UUID. Required if CSR is not uploaded
        attributes:
          type: array
          description: List of RA Profile related Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
      - request
    ClientCertificateDataResponseDto:
      type: object
      properties:
        certificateData:
          type: string
          description: Base64 encoded Certificate content
        uuid:
          type: string
          description: UUID of Certificate
      required:
      - uuid
    CertificateRevocationReason:
      type: string
      enum:
      - unspecified
      - keyCompromise
      - cACompromise
      - affiliationChanged
      - superseded
      - cessationOfOperation
      - certificateHold
      - privilegeWithdrawn
      - aACompromise
    ClientCertificateRevocationDto:
      type: object
      properties:
        reason:
          $ref: "#/components/schemas/CertificateRevocationReason"
          default: UNSPECIFIED
          description: Reason for revocation
        attributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        destroyKey:
          type: boolean
          default: "false"
          description: Destroy Key upon successful revocation
      required:
      - attributes
    ClientCertificateRenewRequestDto:
      type: object
      properties:
        replaceInLocations:
          type: boolean
          default: "false"
          description: True to replace renewed certificate in the associated locations
        request:
          type: string
          description: "Certificate signing request encoded as Base64 string. If not\
            \ provided, Existing CSR will be used"
        format:
          $ref: "#/components/schemas/CertificateRequestFormat"
          default: pkcs10
          description: Certificate signing request format
    ClientCertificateRekeyRequestDto:
      type: object
      properties:
        replaceInLocations:
          type: boolean
          default: "false"
          description: True to replace renewed certificate in the associated locations
        request:
          type: string
          description: "Certificate signing request encoded as Base64 string. If not\
            \ provided, CSR attributes will be used"
        format:
          $ref: "#/components/schemas/CertificateRequestFormat"
          default: pkcs10
          description: Certificate signing request format
        keyUuid:
          type: string
          format: uuid
          description: Key UUID
        tokenProfileUuid:
          type: string
          format: uuid
          description: Token Profile UUID
        signatureAttributes:
          type: array
          description: "Signature Attributes. If not provided, existing attributes\
            \ will be used to generate the new CSR"
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - keyUuid
      - tokenProfileUuid
    RequestAttributeCallback:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        pathVariable:
          type: object
          additionalProperties:
            type: object
          description: Map of path variables supported by the callback method
        requestParameter:
          type: object
          additionalProperties:
            type: object
          description: Map of the query parameters supported by the callback method
        body:
          type: object
          additionalProperties:
            type: object
          description: Request body for the callback method
      required:
      - name
    TriggerRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the trigger
        description:
          type: string
          description: Description of the trigger
        type:
          $ref: "#/components/schemas/TriggerType"
          description: Type of the trigger
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the trigger
        ignoreTrigger:
          type: boolean
          description: "Flag if to ignore object when trigger rules are matched and\
            \ do not perform any actions and stop evaluating other triggers. Based\
            \ on context could have other implications to object processing. If ignore\
            \ is set, trigger does not have any actions."
        event:
          type: string
          description: Event that should fire trigger
          enum:
          - discoveryFinished
        eventResource:
          $ref: "#/components/schemas/Resource"
          description: Type of the the trigger event source object
        rulesUuids:
          type: array
          description: List of UUIDs of existing rules to add to the trigger
          items:
            type: string
        actionsUuids:
          type: array
          description: List of UUIDs of existing actions to add to the trigger
          items:
            type: string
      required:
      - ignoreTrigger
      - name
      - resource
      - type
    RuleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the rule
        description:
          type: string
          description: Description of the rule
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the rule
        conditionsUuids:
          type: array
          description: List of UUIDs of existing conditions to add to the rule
          items:
            type: string
      required:
      - conditionsUuids
      - name
      - resource
    ExecutionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the execution
        description:
          type: string
          description: Description of the execution
        type:
          $ref: "#/components/schemas/ExecutionType"
          description: Type of the execution
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the execution
        items:
          type: array
          description: List of the execution items to add to execution
          items:
            $ref: "#/components/schemas/ExecutionItemRequestDto"
      required:
      - items
      - name
      - resource
      - type
    ConditionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the condition
        description:
          type: string
          description: Description of the condition
        type:
          $ref: "#/components/schemas/ConditionType"
          description: Type of the condition
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the condition
        items:
          type: array
          description: List of the condition items to add to condition
          items:
            $ref: "#/components/schemas/ConditionItemRequestDto"
      required:
      - items
      - name
      - resource
      - type
    ActionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the action
        description:
          type: string
          description: Description of the action
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the action
        executionsUuids:
          type: array
          description: List of UUIDs of existing executions to add to the action
          items:
            type: string
      required:
      - executionsUuids
      - name
      - resource
    AddUserRequestDto:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: user1
        description:
          type: string
          description: Description of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        groupUuids:
          type: array
          description: Groups UUIDs of the user
          items:
            type: string
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        certificateData:
          type: string
          description: Base64 Content of the user certificate
        certificateUuid:
          type: string
          description: UUID of the existing certificate in the Inventory
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        name:
          type: string
      required:
      - username
    UserIdentificationRequestDto:
      type: object
      properties:
        certificateContent:
          type: string
          description: Base64 Content of the certificate
        authenticationToken:
          type: string
          description: Authentication Token
    AddTokenProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Token Profile name
        description:
          type: string
          description: Token Profile description
        attributes:
          type: array
          description: List of Attributes to create Token Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          default: "false"
          description: Enabled flag - true = enabled; false = disabled
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: "#/components/schemas/KeyUsage"
      required:
      - attributes
      - name
    KeyRequestType:
      type: string
      enum:
      - secret
      - keyPair
    KeyRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Cryptographic Key
        description:
          type: string
          description: Description of the Cryptographic Key
        groupUuids:
          type: array
          description: UUIDs of the groups to associate with key
          items:
            type: string
        attributes:
          type: array
          description: List of Attributes to create a Key
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: Custom Attributes for the key
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          default: "false"
          description: "Enabled status of created key. True = Enabled, False = Disabled"
      required:
      - attributes
      - description
      - name
    ScepProfileRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the SCEP Profile
          example: Sample description
        raProfileUuid:
          type: string
          description: RA Profile UUID
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        caCertificateUuid:
          type: string
          description: UUID of the Certificate to be used as CA Certificate for SCEP
            Requests
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        renewalThreshold:
          type: integer
          format: int32
          default: Half of certificate validity
          description: Minimum expiry days to allow renewal of certificate. Empty
            or the value '0' will be considered as null and half life of the certificate
            validity will be considered for the protocol
        includeCaCertificate:
          type: boolean
          default: "False"
          description: Include CA Certificate in the SCEP Message response
        includeCaCertificateChain:
          type: boolean
          default: "False"
          description: Include CA Certificate Chain in the SCEP Message response
        challengePassword:
          type: string
          description: Challenge Password for the SCEP Request
        enableIntune:
          type: boolean
          description: Status of Intune
        intuneTenant:
          type: string
          description: Intune Tenant
        intuneApplicationId:
          type: string
          description: Intune Application ID
        intuneApplicationKey:
          type: string
          description: Intune Application Key
        name:
          type: string
          description: Name of the SCEP Profile
          example: Profile Name 1
      required:
      - caCertificateUuid
      - issueCertificateAttributes
      - name
    ResourcePermissionsRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Resource
        allowAllActions:
          type: boolean
          description: "Allow all actions. True = Yes, False = No"
        actions:
          type: array
          description: List of actions permitted
          items:
            type: string
        objects:
          type: array
          description: Object permissions
          items:
            $ref: "#/components/schemas/ObjectPermissionsRequestDto"
      required:
      - allowAllActions
      - name
    RolePermissionsRequestDto:
      type: object
      properties:
        allowAllResources:
          type: boolean
          description: "Allow all resources, True = Yes, False = No"
        resources:
          type: array
          description: Resources
          items:
            $ref: "#/components/schemas/ResourcePermissionsRequestDto"
      required:
      - allowAllResources
    ObjectPermissionsDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Object
        name:
          type: string
          description: Name of the Object
        allow:
          type: array
          description: Allowed Action list
          items:
            type: string
        deny:
          type: array
          description: Denied Action list
          items:
            type: string
      required:
      - allow
      - deny
      - name
      - uuid
    ResourcePermissionsDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Resource
        allowAllActions:
          type: boolean
          description: "Allow all actions. True = Yes, False = No"
        actions:
          type: array
          description: List of actions permitted
          items:
            type: string
        objects:
          type: array
          description: Object permissions
          items:
            $ref: "#/components/schemas/ObjectPermissionsDto"
      required:
      - actions
      - allowAllActions
      - name
      - objects
    SubjectPermissionsDto:
      type: object
      properties:
        allowAllResources:
          type: boolean
          description: "Allow all resources, True = Yes, False = No"
        resources:
          type: array
          description: Resources
          items:
            $ref: "#/components/schemas/ResourcePermissionsDto"
      required:
      - allowAllResources
      - resources
    SignatureRequestData:
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded data to be signed or verified
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
      required:
      - data
    VerifyDataRequestDto:
      type: object
      properties:
        signatureAttributes:
          type: array
          description: List of signature Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        data:
          type: array
          description: Data to be signed
          items:
            $ref: "#/components/schemas/SignatureRequestData"
        signatures:
          type: array
          description: Signatures to verify
          items:
            $ref: "#/components/schemas/SignatureRequestData"
      required:
      - data
      - signatureAttributes
      - signatures
    VerificationResponseData:
      type: object
      properties:
        result:
          type: boolean
          description: Data to be signed or verified
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details for the result, for example reason, etc."
      required:
      - result
    VerifyDataResponseDto:
      type: object
      properties:
        verifications:
          type: array
          description: Signatures
          items:
            $ref: "#/components/schemas/VerificationResponseData"
      required:
      - verifications
    SignDataRequestDto:
      type: object
      properties:
        signatureAttributes:
          type: array
          description: List of signature Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        data:
          type: array
          description: Data to be signed
          items:
            $ref: "#/components/schemas/SignatureRequestData"
      required:
      - data
      - signatureAttributes
    SignDataResponseDto:
      type: object
      properties:
        signatures:
          type: array
          description: Signatures
          items:
            $ref: "#/components/schemas/SignatureResponseData"
      required:
      - signatures
    SignatureResponseData:
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded signature data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details of the data, for example, the data type,\
            \ error handling, etc."
      required:
      - data
    CipherDataRequestDto:
      type: object
      properties:
        cipherAttributes:
          type: array
          description: List of cipher Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        cipherData:
          type: array
          description: Encrypted/decrypted data
          items:
            $ref: "#/components/schemas/CipherRequestData"
      required:
      - cipherAttributes
      - cipherData
    CipherRequestData:
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded encrypted/decrypted data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
      required:
      - data
    CipherResponseData:
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded encrypted/decrypted data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details of the data, for example, the data type,\
            \ error handling, etc."
      required:
      - data
    EncryptDataResponseDto:
      type: object
      properties:
        encryptedData:
          type: array
          description: Encrypted data
          items:
            $ref: "#/components/schemas/CipherResponseData"
      required:
      - encryptedData
    DecryptDataResponseDto:
      type: object
      properties:
        decryptedData:
          type: array
          description: Decrypted data
          items:
            $ref: "#/components/schemas/CipherResponseData"
      required:
      - decryptedData
    RandomDataRequestDto:
      type: object
      properties:
        length:
          type: integer
          format: int32
          description: Number of random bytes to generate
        attributes:
          type: array
          description: Random generator Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - length
    RandomDataResponseDto:
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded random data
      required:
      - data
    NotificationInstanceRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Notification instance description
        attributes:
          type: array
          description: List of Notification instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        attributeMappings:
          type: array
          description: List of attribute mappings between mapping attributes and (recipient)
            custom attributes
          items:
            $ref: "#/components/schemas/AttributeMappingDto"
        name:
          type: string
          description: Notification instance name
        connectorUuid:
          type: string
          description: UUID of Notification provider
        kind:
          type: string
          description: Notification instance Kind
      required:
      - attributes
      - connectorUuid
      - kind
      - name
    UuidDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
      required:
      - uuid
    SearchFilterRequestDto:
      type: object
      properties:
        fieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
          description: Field group of search filter
        fieldIdentifier:
          type: string
          description: "Field identifier of search filter. List of available fields\
            \ with their identifiers can be retrieved from corresponding endpoint\
            \ `GET /v1/{resource}/search`, e.g.: [**GET /v1/certificates/search**](../core-certificate/#tag/Certificate-Inventory/operation/getSearchableFieldInformation)"
        condition:
          $ref: "#/components/schemas/FilterConditionOperator"
          description: Condition for the search filter
        value:
          type: object
          description: Value to match
      required:
      - condition
      - fieldIdentifier
      - fieldSource
    SearchRequestDto:
      type: object
      properties:
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: "#/components/schemas/SearchFilterRequestDto"
        itemsPerPage:
          type: integer
          format: int32
          default: "10"
          description: Number of entries per page
          maximum: 1000
        pageNumber:
          type: integer
          format: int32
          default: "1"
          description: Page number for the request
    LocationsResponseDto:
      type: object
      properties:
        locations:
          type: array
          description: Locations
          items:
            $ref: "#/components/schemas/LocationDto"
        itemsPerPage:
          type: integer
          format: int32
          description: Number of locations per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
      required:
      - itemsPerPage
      - locations
      - pageNumber
      - totalItems
      - totalPages
    CryptographicKeyResponseDto:
      type: object
      properties:
        cryptographicKeys:
          type: array
          description: Cryptographic Keys
          items:
            $ref: "#/components/schemas/KeyItemDto"
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
      required:
      - cryptographicKeys
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    KeyItemDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          format: date-time
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
        keyWrapperUuid:
          type: string
          description: UUID of the wrapper object
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        owner:
          type: string
          description: Owner of the Key
        ownerUuid:
          type: string
          description: UUID of the owner of the Key
        groups:
          type: array
          description: Groups associated to the Key
          items:
            $ref: "#/components/schemas/GroupDto"
        associations:
          type: integer
          format: int32
          description: Number of associated objects
        keyReferenceUuid:
          type: string
          description: UUID of the key item in the Connector
        type:
          $ref: "#/components/schemas/KeyType"
          description: Type of the Key
        keyAlgorithm:
          $ref: "#/components/schemas/KeyAlgorithm"
          description: Key Algorithm
        format:
          $ref: "#/components/schemas/KeyFormat"
          description: Key Format
        length:
          type: integer
          format: int32
          description: Key Length
        usage:
          type: array
          description: Key Usages
          items:
            $ref: "#/components/schemas/KeyUsage"
        enabled:
          type: boolean
          description: Boolean describing if the key is enabled or not
        state:
          $ref: "#/components/schemas/KeyState"
          description: Key State
      required:
      - creationTime
      - description
      - enabled
      - keyAlgorithm
      - keyReferenceUuid
      - keyWrapperUuid
      - name
      - state
      - tokenInstanceName
      - tokenInstanceUuid
      - type
      - usage
      - uuid
    EntityInstanceRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Entity instance name
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        connectorUuid:
          type: string
          description: UUID of Entity Provider
        kind:
          type: string
          description: Entity instance Kind
          example: "Keystore, etc."
      required:
      - attributes
      - connectorUuid
      - kind
      - name
    AddLocationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Location name
        description:
          type: string
          description: Location description
        attributes:
          type: array
          description: List of Attributes to register Location
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          default: "false"
          description: Enabled flag - true = enabled; false = disabled
      required:
      - attributes
      - name
    IssueToLocationRequestDto:
      type: object
      properties:
        raProfileUuid:
          type: string
          description: RA Profile UUID
        csrAttributes:
          type: array
          description: List of CSR Attributes for Location
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        issueAttributes:
          type: array
          description: List of certificate issue Attributes for RA Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        certificateCustomAttributes:
          type: array
          description: List of Certificate Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - csrAttributes
      - issueAttributes
      - raProfileUuid
    EntityInstanceResponseDto:
      type: object
      properties:
        entities:
          type: array
          description: Entities
          items:
            $ref: "#/components/schemas/EntityInstanceDto"
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
      required:
      - entities
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    DiscoveryDto:
      type: object
      properties:
        name:
          type: string
          description: Discovery name
        attributes:
          type: array
          description: List of Attributes for Discovery
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        connectorUuid:
          type: string
          description: Discovery Provider UUID
        kind:
          type: string
          description: Discovery Kind
        triggers:
          type: array
          description: "List of triggers to be triggered after the discovery is finished,\
            \ triggers will be evaluated in given order"
          items:
            type: string
            format: uuid
      required:
      - attributes
      - connectorUuid
      - kind
      - name
    ScheduleDiscoveryDto:
      type: object
      properties:
        jobName:
          type: string
        cronExpression:
          type: string
        oneTime:
          type: boolean
        request:
          $ref: "#/components/schemas/DiscoveryDto"
    DiscoveryHistoryDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Discovery Kind
          example: IP-HostName
        status:
          $ref: "#/components/schemas/DiscoveryStatus"
          description: Status of Discovery
        startTime:
          type: string
          format: date-time
          description: Date and time when Discovery started
        endTime:
          type: string
          format: date-time
          description: Date and time when Discovery finished
        totalCertificatesDiscovered:
          type: integer
          format: int32
          default: "0"
          description: Number of certificates that are discovered
        connectorUuid:
          type: string
          description: UUID of the Discovery Provider
        connectorName:
          type: string
          description: Name of the Discovery Provider
      required:
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
    DiscoveryResponseDto:
      type: object
      properties:
        discoveries:
          type: array
          description: Discoveries
          items:
            $ref: "#/components/schemas/DiscoveryHistoryDto"
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
      required:
      - discoveries
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    DiscoveryStatus:
      type: string
      enum:
      - inProgress
      - processing
      - failed
      - completed
      - warning
    CredentialRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Credential name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        connectorUuid:
          type: string
          description: UUID of Credential provider Connector
      required:
      - attributes
      - connectorUuid
      - kind
      - name
    ConnectorRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Connector
          example: Connector1
        url:
          type: string
          description: URL of the Connector to connect
          example: http://network-discovery-provicer:8080
        authType:
          $ref: "#/components/schemas/AuthType"
          description: Type of authentication for the Connector
          example: none
        authAttributes:
          type: array
          description: List of authentication Attributes. Required if the authentication
            type is not NONE
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - authType
      - name
      - url
    ComplianceProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Compliance Profile
          example: Profile 1
        description:
          type: string
          description: Description of the Compliance Profile
          example: Profile 1
        rules:
          type: array
          description: Rules to be associated with the Compliance Profile. Profiles
            can be created without rules and can be added later
          items:
            $ref: "#/components/schemas/ComplianceProfileRulesRequestDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - name
    ComplianceProfileRulesRequestDto:
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: c35bc88c-d0ef-11ec-9d64-0242ac120005
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: x509
        rules:
          type: array
          description: Rules for new Compliance Profiles
          items:
            $ref: "#/components/schemas/ComplianceRequestRulesDto"
        groups:
          type: array
          description: Groups for Compliance Profile
          items:
            type: string
      required:
      - connectorUuid
      - kind
    ComplianceRequestRulesDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        attributes:
          type: array
          description: Attributes for the rule
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - uuid
    ComplianceRuleAdditionRequestDto:
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: default
        ruleUuid:
          type: string
          description: UUID of the rule
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        attributes:
          type: array
          description: Attributes for the rule
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - connectorUuid
      - kind
      - ruleUuid
    ComplianceProfileRuleDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
        connectorName:
          type: string
          description: Connector Name
        connectorUuid:
          type: string
          description: Connector UUID
        kind:
          type: string
          description: Connector Kind
        groupUuid:
          type: string
          description: Group UUID
        certificateType:
          $ref: "#/components/schemas/CertificateType"
          description: Certificate type for the rule
          example: X509
        attributes:
          type: array
          description: List of attributes for the rule
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        complianceProfileUuid:
          type: string
          description: UUID of the Compliance Profile
        complianceProfileName:
          type: string
          description: Name of the Compliance Profile
      required:
      - attributes
      - certificateType
      - complianceProfileName
      - complianceProfileUuid
      - connectorName
      - connectorUuid
      - kind
      - name
      - uuid
    ComplianceGroupRequestDto:
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: default
        groupUuid:
          type: string
          description: UUID of the group
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
      required:
      - connectorUuid
      - groupUuid
      - kind
    CmpProfileRequestDto:
      type: object
      properties:
        description:
          type: string
          description: Description of the CMP Profile
          example: Sample text description
        raProfileUuid:
          type: string
          description: RA Profile UUID that the CMP Profile is associated with
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate for the associated
            RA Profile. Required when raProfileUuid is provided
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate for the associated
            RA Profile. Required when raProfileUuid is provided
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes for CMP Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        requestProtectionMethod:
          $ref: "#/components/schemas/ProtectionMethod"
          description: Protection Method for the CMP Request
        responseProtectionMethod:
          $ref: "#/components/schemas/ProtectionMethod"
          description: Protection Method for the CMP Response
        sharedSecret:
          type: string
          description: Shared secret for the CMP Request. Required when requestProtectionMethod
            is sharedSecret
        signingCertificateUuid:
          type: string
          description: UUID of the Certificate to be used as signing certificate for
            CMP responses. Required when responseProtectionMethod is signature
        name:
          type: string
          description: Name of the CMP Profile
          example: Example CMP Profile
        variant:
          type: string
          description: Variant of the CMP Profile
          enum:
          - v2
          - v2_3gpp
          - v3
      required:
      - name
      - requestProtectionMethod
      - responseProtectionMethod
      - variant
    CertificateResponseDto:
      type: object
      properties:
        certificates:
          type: array
          description: Certificates
          items:
            $ref: "#/components/schemas/CertificateDto"
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
      required:
      - certificates
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    UploadCertificateRequestDto:
      type: object
      properties:
        certificate:
          type: string
          description: Base64 Content of the Certificate
        customAttributes:
          type: array
          description: Custom Attributes for the Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - certificate
      - customAttributes
    RemoveCertificateDto:
      type: object
      properties:
        uuids:
          type: array
          description: List of Certificate UUIDs
          items:
            type: string
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: "#/components/schemas/SearchFilterRequestDto"
    BulkOperationResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          enum:
          - SUCCESS
          - FAILED
          - PARTIAL
        failedItem:
          type: integer
          format: int64
          description: Number of items failed
        message:
          type: string
          description: Message for the action
      required:
      - failedItem
      - message
      - status
    ClientCertificateRequestDto:
      type: object
      properties:
        raProfileUuid:
          type: string
          format: uuid
          description: RA Profile UUID. Required if CSR is not uploaded
        sourceCertificateUuid:
          type: string
          format: uuid
          description: Source certificate UUID to specify in case of renew/rekey operation
        csrAttributes:
          type: array
          description: List of attributes to create CSR. Required if CSR is not provided
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        signatureAttributes:
          type: array
          description: List of attributes to sign the CSR
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        request:
          type: string
          description: Certificate signing request encoded as Base64 string
        format:
          $ref: "#/components/schemas/CertificateRequestFormat"
          default: pkcs10
          description: Certificate signing request format
        tokenProfileUuid:
          type: string
          format: uuid
          description: Token Profile UUID. Required if CSR is not uploaded
        keyUuid:
          type: string
          format: uuid
          description: Key UUID. Required if CSR is not uploaded
        issueAttributes:
          type: array
          description: List of RA Profile related Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - issueAttributes
      - raProfileUuid
    CertificateComplianceResultDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        ruleName:
          type: string
          description: Name of the rule
          example: RuleName
        ruleDescription:
          type: string
          description: Description of the rule
          example: Description sample
        status:
          $ref: "#/components/schemas/ComplianceRuleStatus"
          description: Status of the rule
          example: nok
        attributes:
          type: array
          description: Attributes of the rule
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - connectorName
      - ruleDescription
      - ruleName
      - status
    CertificateDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        issuerCommonName:
          type: string
          description: Certificate issuer common name
        issuerDn:
          type: string
          description: Issuer DN of the Certificate
        subjectDn:
          type: string
          description: Subject DN of the Certificate
        notBefore:
          type: string
          format: date-time
          description: Certificate validity start date
        notAfter:
          type: string
          format: date-time
          description: Certificate expiration date
        publicKeyAlgorithm:
          type: string
          description: Public key algorithm
        signatureAlgorithm:
          type: string
          description: Certificate signature algorithm
        keySize:
          type: integer
          format: int32
          description: Certificate key size
        state:
          $ref: "#/components/schemas/CertificateState"
          description: State of the Certificate
        validationStatus:
          $ref: "#/components/schemas/CertificateValidationStatus"
          description: Current validation status of the certificate
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile associated to the Certificate
        fingerprint:
          type: string
          description: SHA256 fingerprint of the Certificate
        groups:
          type: array
          description: Groups associated to the Certificate
          items:
            $ref: "#/components/schemas/GroupDto"
        owner:
          type: string
          description: Certificate Owner
        ownerUuid:
          type: string
          description: Certificate Owner UUID
        certificateType:
          $ref: "#/components/schemas/CertificateType"
          description: Certificate type
        issuerSerialNumber:
          type: string
          description: Serial number of the issuer
        complianceStatus:
          $ref: "#/components/schemas/ComplianceStatus"
          description: Certificate compliance status
        issuerCertificateUuid:
          type: string
          description: UUID of the issuer certificate
        privateKeyAvailability:
          type: boolean
          description: Private Key Availability
        trustedCa:
          type: boolean
          description: "Indicator whether CA is marked as trusted, set to null if\
            \ certificate is not CA"
        extendedKeyUsage:
          type: array
          description: Extended key usages
          items:
            type: string
        keyUsage:
          type: array
          description: Key usages
          items:
            type: string
        subjectType:
          $ref: "#/components/schemas/CertificateSubjectType"
          description: Certificate subject type
        metadata:
          type: array
          description: Certificate metadata
          items:
            $ref: "#/components/schemas/MetadataResponseDto"
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
        subjectAlternativeNames:
          type: object
          additionalProperties:
            type: object
          description: Subject alternative names
        locations:
          type: array
          description: Locations associated to the Certificate
          items:
            $ref: "#/components/schemas/LocationDto"
          uniqueItems: true
        nonCompliantRules:
          type: array
          description: Certificate compliance check result
          items:
            $ref: "#/components/schemas/CertificateComplianceResultDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        key:
          $ref: "#/components/schemas/KeyDto"
          description: Key Pair of the certificate
        certificateRequest:
          $ref: "#/components/schemas/CertificateRequestDto"
          description: Certificate request data
        sourceCertificateUuid:
          type: string
          format: uuid
          description: Source certificate UUID
        issueAttributes:
          type: array
          description: List of issue attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        revokeAttributes:
          type: array
          description: List of revoke attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        relatedCertificates:
          type: array
          description: List of related certificates
          items:
            $ref: "#/components/schemas/CertificateDto"
        protocolInfo:
          $ref: "#/components/schemas/CertificateProtocolDto"
          description: Information about protocol used to issue the certificate
      required:
      - certificateContent
      - commonName
      - keySize
      - keyUsage
      - privateKeyAvailability
      - publicKeyAlgorithm
      - signatureAlgorithm
      - state
      - subjectDn
      - subjectType
      - trustedCa
      - uuid
      - validationStatus
    CertificateProtocol:
      type: string
      enum:
      - acme
      - scep
      - cmp
    CertificateProtocolDto:
      type: object
      properties:
        protocol:
          $ref: "#/components/schemas/CertificateProtocol"
          description: Protocol used to issue certificate
        protocolProfileUuid:
          type: string
          format: uuid
          description: UUID of the protocol
        additionalProtocolUuid:
          type: string
          format: uuid
          description: "Additional UUID for use of the protocol, for example ACME\
            \ Account UUID in case of ACME protocol"
      required:
      - protocol
      - protocolProfileUuid
    CertificateRequestDto:
      type: object
      properties:
        certificateType:
          $ref: "#/components/schemas/CertificateType"
          description: Certificate type
        certificateRequestFormat:
          $ref: "#/components/schemas/CertificateRequestFormat"
          description: Certificate request format
        publicKeyAlgorithm:
          type: string
          description: Public key algorithm
        signatureAlgorithm:
          type: string
          description: Certificate signature algorithm
        content:
          type: string
          description: Certificate request content
        commonName:
          type: string
          description: Certificate common name
        subjectDn:
          type: string
          description: Subject DN of the Certificate
        subjectAlternativeNames:
          type: object
          additionalProperties:
            type: object
          description: Subject alternative names
        attributes:
          type: array
          description: CSR Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        signatureAttributes:
          type: array
          description: Signature Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        keyUuid:
          type: string
          description: UUID of the Key
      required:
      - commonName
      - content
      - publicKeyAlgorithm
      - signatureAlgorithm
      - subjectDn
    CertificateSubjectType:
      type: string
      enum:
      - endEntity
      - selfSignedEndEntity
      - intermediateCa
      - rootCa
    ComplianceRuleStatus:
      type: string
      enum:
      - ok
      - nok
      - na
    KeyDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          format: date-time
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        owner:
          type: string
          description: Owner of the Key
        ownerUuid:
          type: string
          description: UUID of the owner of the Key
        groups:
          type: array
          description: Groups associated to the key
          items:
            $ref: "#/components/schemas/GroupDto"
        items:
          type: array
          description: Key Items
          items:
            $ref: "#/components/schemas/KeyItemDto"
        associations:
          type: integer
          format: int32
          description: Number of associated objects
      required:
      - creationTime
      - description
      - items
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
    CertificateContentDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
      required:
      - certificateContent
      - commonName
      - serialNumber
      - uuid
    CertificateComplianceCheckDto:
      type: object
      properties:
        certificateUuids:
          type: array
          description: List of UUIDs of the Certificates
          items:
            type: string
    AuthorityInstanceRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Authority instance name
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        connectorUuid:
          type: string
          description: UUID of Authority provider
        kind:
          type: string
          description: Authority instance Kind
          example: "LegacyEjbca, ADCS, etc"
      required:
      - attributes
      - connectorUuid
      - kind
      - name
    AddRaProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: RA Profile name
        description:
          type: string
          description: RA Profile description
        attributes:
          type: array
          description: List of Attributes to create RA Profile
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        enabled:
          type: boolean
          default: "false"
          description: Enabled flag - true = enabled; false = disabled
      required:
      - attributes
      - name
    ActorRecord:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ActorType"
        authMethod:
          $ref: "#/components/schemas/AuthMethod"
        uuid:
          type: string
          format: uuid
        name:
          type: string
      required:
      - authMethod
      - type
    ActorType:
      type: string
      enum:
      - anonymous
      - core
      - user
      - connector
      - protocol
    AuditLogDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Audit log Id
        version:
          type: string
          description: Log schema version
        loggedAt:
          type: string
          format: date-time
          description: Time when the audit log is stored
        module:
          $ref: "#/components/schemas/Module"
          description: Module of platform where log occurred
        actor:
          $ref: "#/components/schemas/ActorRecord"
          description: Actor of log record
        source:
          $ref: "#/components/schemas/SourceRecord"
          description: Source of log record
        resource:
          $ref: "#/components/schemas/ResourceRecord"
          description: Resource that is subject of action logged
        affiliatedResource:
          $ref: "#/components/schemas/ResourceRecord"
          description: Affiliated resource that is related to subject resource
        operation:
          $ref: "#/components/schemas/Operation"
          description: Resource operation that is being logged
        operationResult:
          $ref: "#/components/schemas/OperationResult"
          description: Result of the resource operation. Either success or failed
        message:
          type: string
          description: Additional message
        operationData:
          type: object
          description: Structured data dependent on resource and its operation
        additionalData:
          type: object
          additionalProperties:
            type: object
          description: Additional data specific to event logged
      required:
      - actor
      - id
      - loggedAt
      - module
      - operation
      - operationResult
      - resource
      - version
    AuditLogResponseDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
        items:
          type: array
          description: Audit log items
          items:
            $ref: "#/components/schemas/AuditLogDto"
      required:
      - items
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    AuthMethod:
      type: string
      enum:
      - none
      - certificate
      - token
      - session
      - apiKey
      - userProxy
    Operation:
      type: string
      enum:
      - unknown
      - list
      - detail
      - create
      - update
      - delete
      - forceDelete
      - add
      - remove
      - request
      - register
      - enable
      - disable
      - activate
      - deactivate
      - listAssociations
      - associate
      - disassociate
      - history
      - summary
      - checkCompliance
      - checkValidation
      - issue
      - renew
      - rekey
      - revoke
      - export
      - getStatus
      - getContent
      - getChain
      - download
      - downloadChain
      - getProtocolInfo
      - listProtocolCertificates
      - updateProtocolIssueProfile
      - activateProtocol
      - deactivateProtocol
      - acmeDirectory
      - acmeNonce
      - acmeKeyRollover
      - acmeValidate
      - acmeFinalize
      - scepCaCapabilities
      - scepCertificatePoll
      - scepTransactionCheck
      - cmpConfirm
      - upload
      - sync
      - compromise
      - destroy
      - updateKeyUsage
      - encrypt
      - decrypt
      - sign
      - verify
      - randomData
      - pushToLocation
      - removeFromLocation
      - issueInLocation
      - renewInLocation
      - connect
      - reconnect
      - checkHealth
      - statistics
      - approve
      - approveOverride
      - reject
      - rejectOverride
      - login
      - logout
      - authentication
      - getUserProfile
      - updateUserProfile
      - identify
      - markAsRead
      - getPermissions
      - getObjectPermissions
      - updatePermissions
      - updateObjectPermissions
      - schedule
      - listAttributes
      - validateAttributes
      - attributeCallback
      - updateAttributeResources
      - updateAttributeContent
      - deleteAttributeContent
      - promoteMetadata
      - listCertificateProfiles
      - listCas
    OperationResult:
      type: string
      enum:
      - success
      - failure
    ResourceRecord:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/Resource"
        uuids:
          type: array
          items:
            type: string
            format: uuid
        names:
          type: array
          items:
            type: string
      required:
      - type
    SourceRecord:
      type: object
      properties:
        method:
          type: string
        path:
          type: string
        contentType:
          type: string
        ipAddress:
          type: string
        userAgent:
          type: string
      required:
      - method
      - path
    GlobalMetadataCreateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute Content Type
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      required:
      - contentType
      - label
      - name
    ConnectorMetadataPromotionRequestDto:
      type: object
      properties:
        uuid:
          type: string
          description: Metadata UUID
        connectorUuid:
          type: string
          description: Connector UUID
      required:
      - connectorUuid
      - uuid
    CustomAttributeCreateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute Content Type
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
        content:
          type: array
          description: Predefined content for the attribute if needed. The content
            of the Attribute must satisfy the type
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
        resources:
          type: array
          description: List of resource to be associated with the custom attribute
          items:
            $ref: "#/components/schemas/Resource"
      required:
      - contentType
      - label
      - name
    ApprovalProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the Approval profile
          example: ApprovalProfile1
        description:
          type: string
          description: Description of the Approval profile
          example: Detail description of the approval profile
        enabled:
          type: boolean
          description: Enable of the Approval profile
          example: true
        expiry:
          type: integer
          format: int32
          description: Expiration of the Approval profile in hours
          example: 30
        approvalSteps:
          type: array
          description: List of Approval steps for the Approval profile
          items:
            $ref: "#/components/schemas/ApprovalStepRequestDto"
      required:
      - approvalSteps
      - enabled
      - name
    AcmeProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the ACME Profile
          example: Profile Name 1
        description:
          type: string
          description: Description of the ACME Profile
          example: Sample description
        termsOfServiceUrl:
          type: string
          description: Terms of Service URL
          example: https://sample-url.com/termsOfService
        websiteUrl:
          type: string
          description: Website URL
          example: https://sample-url.com
        dnsResolverIp:
          type: string
          default: System Default
          description: DNS Resolver IP address
          example: 8.8.8.8
        dnsResolverPort:
          type: string
          default: "53"
          description: DNS Resolver port number
          example: 53
        raProfileUuid:
          type: string
          description: RA Profile UUID
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        retryInterval:
          type: integer
          format: int32
          default: "30"
          description: Retry interval for the Orders
          example: 60
        validity:
          type: integer
          format: int32
          default: "36000"
          description: Order Validity
          example: 3000
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        requireContact:
          type: boolean
          default: "false"
          description: Require contact information for new Account
          example: true
        requireTermsOfService:
          type: boolean
          default: "false"
          description: Require new Account to agree on Terms of Service
          example: false
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - issueCertificateAttributes
      - name
      - revokeCertificateAttributes
    CompromiseKeyRequestDto:
      type: object
      properties:
        reason:
          $ref: "#/components/schemas/KeyCompromiseReason"
          description: Usages for the Key
        uuids:
          type: array
          description: "List of UUIDs of the key Items. If not provided, the usage\
            \ will be updated to all the itemsin the key"
          items:
            type: string
            format: uuid
      required:
      - reason
    EditKeyItemDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the key item
      required:
      - name
    BulkCompromiseKeyItemRequestDto:
      type: object
      properties:
        reason:
          $ref: "#/components/schemas/KeyCompromiseReason"
          description: Usages for the Key
        uuids:
          type: array
          description: List of Key Item UUID
          items:
            type: string
            format: uuid
      required:
      - reason
    BulkCompromiseKeyRequestDto:
      type: object
      properties:
        reason:
          $ref: "#/components/schemas/KeyCompromiseReason"
          description: Usages for the Key
        uuids:
          type: array
          description: List of UUIDs of the keys. This will mark all the items inside
            the selected key as compromised
          items:
            type: string
            format: uuid
      required:
      - reason
    RaProfileAssociationRequestDto:
      type: object
      properties:
        raProfileUuids:
          type: array
          description: List of UUIDs of RA Profiles to be associated
          example:
          - 18324af0-e95c-11ec-8fea-0242ac120002
          - 18324c94-e95c-11ec-8fea-0242ac120002
          items:
            type: string
      required:
      - raProfileUuids
    MultipleCertificateObjectUpdateDto:
      type: object
      properties:
        groupUuids:
          type: array
          description: Certificate Groups UUIDs (set to empty list to remove certificate
            from all groups)
          items:
            type: string
        ownerUuid:
          type: string
          description: Certificate owner user UUID (set to empty string to remove
            owner of certificate)
        raProfileUuid:
          type: string
          description: RA Profile UUID (set to empty string to remove certificate
            from RA profile)
        certificateUuids:
          type: array
          description: List of Certificate UUIDs
          items:
            type: string
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: "#/components/schemas/SearchFilterRequestDto"
    CertificateUpdateObjectsDto:
      type: object
      properties:
        groupUuids:
          type: array
          description: Certificate Groups UUIDs (set to empty list to remove certificate
            from all groups)
          items:
            type: string
        ownerUuid:
          type: string
          description: Certificate owner user UUID (set to empty string to remove
            owner of certificate)
        raProfileUuid:
          type: string
          description: RA Profile UUID (set to empty string to remove certificate
            from RA profile)
        trustedCa:
          type: boolean
          description: Mark CA certificate as trusted
    ActivateScepForRaProfileRequestDto:
      type: object
      properties:
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - issueCertificateAttributes
    RaProfileScepDetailResponseDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        scepAvailable:
          type: boolean
          description: SCEP availability flag - true = yes; false = no
        url:
          type: string
          description: SCEP URL
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - name
      - scepAvailable
      - uuid
    ActivateCmpForRaProfileRequestDto:
      type: object
      properties:
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - issueCertificateAttributes
      - revokeCertificateAttributes
    RaProfileCmpDetailResponseDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        cmpAvailable:
          type: boolean
          description: CMP availability flag - true = yes; false = no
        cmpUrl:
          type: string
          description: CMP URL
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - cmpAvailable
      - name
      - uuid
    ActivateAcmeForRaProfileRequestDto:
      type: object
      properties:
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - issueCertificateAttributes
      - revokeCertificateAttributes
    RaProfileAcmeDetailResponseDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        acmeAvailable:
          type: boolean
          description: ACME availability flag - true = yes; false = no
        directoryUrl:
          type: string
          description: ACME Directory URL
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - acmeAvailable
      - name
      - uuid
    UserApprovalDto:
      type: object
      properties:
        comment:
          type: string
    BaseAttributeDto:
      type: object
      description: Base Attribute definition
      discriminator:
        propertyName: type
        mapping:
          data: "#/components/schemas/DataAttribute"
          info: "#/components/schemas/InfoAttribute"
          group: "#/components/schemas/GroupAttribute"
          meta: "#/components/schemas/MetadataAttribute"
          custom: "#/components/schemas/CustomAttribute"
      oneOf:
      - $ref: "#/components/schemas/DataAttribute"
      - $ref: "#/components/schemas/InfoAttribute"
      - $ref: "#/components/schemas/GroupAttribute"
      - $ref: "#/components/schemas/MetadataAttribute"
      - $ref: "#/components/schemas/CustomAttribute"
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        content:
          type: object
          description: Content of the Attribute
      required:
      - name
      - type
      - uuid
    CustomAttribute:
      type: object
      description: Custom attribute allows to store and transfer dynamic data. Its
        content can be edited and send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/CustomAttributeProperties"
          description: Properties of the Attributes
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
    CustomAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
    GroupAttribute:
      type: object
      description: Group attribute and its content represents dynamic list of additional
        attributes retrieved by callback. Its content can not be edited and is not
        send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: List of all different types of attributes
          items:
            $ref: "#/components/schemas/BaseAttributeDto"
          oneOf:
          - $ref: "#/components/schemas/DataAttribute"
          - $ref: "#/components/schemas/InfoAttribute"
          - $ref: "#/components/schemas/GroupAttribute"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        attributeCallback:
          $ref: "#/components/schemas/AttributeCallback"
          description: Optional definition of callback for getting the content of
            the Attribute based on the action
      required:
      - name
      - type
      - uuid
    InfoAttribute:
      type: object
      description: Info attribute contains content that is for information purpose
        or represents additional information for object (metadata). Its content can
        not be edited and is not send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/InfoAttributeProperties"
          description: Properties of the Attributes
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
    InfoAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      required:
      - label
      - visible
    MetadataAttribute:
      type: object
      description: Info attribute contains content that is for metadata. Its content
        can not be edited and is not send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/MetadataAttributeProperties"
          description: Properties of the Attributes
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
    MetadataAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        global:
          type: boolean
          default: "false"
          description: Boolean determining if the Metadata is a global metadata.
        overwrite:
          type: boolean
          default: "false"
          description: Boolean determining if the new metadata content should overwrite
            (replace) existing content instead of appending.
      required:
      - label
      - visible
    TriggerDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the trigger
        type:
          $ref: "#/components/schemas/TriggerType"
          description: Type of the trigger
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the trigger
        ignoreTrigger:
          type: boolean
          description: "Flag if to ignore object when trigger rules are matched and\
            \ do not perform any actions and stop evaluating other triggers. Based\
            \ on context could have other implications to object processing. If ignore\
            \ is set, trigger does not have any actions."
        event:
          type: string
          description: Event that should fire trigger
          enum:
          - discoveryFinished
        eventResource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with trigger event
      required:
      - ignoreTrigger
      - name
      - resource
      - type
      - uuid
    TriggerHistoryDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
        triggerUuid:
          type: string
          description: UUID of the trigger.
        objectUuid:
          type: string
          description: UUID of the object that the trigger has been evaluated on.
        referenceObjectUuid:
          type: string
          description: Reference UUID of the object that the trigger has been evaluated
            on.
        conditionsMatched:
          type: boolean
          description: All conditions in the trigger have been matched.
        actionsPerformed:
          type: boolean
          description: All actions in the trigger have been performed.
        triggeredAt:
          type: string
          format: date-time
          description: Time at which has the trigger been triggered
        message:
          type: string
          description: 'Additional message. '
        records:
          type: array
          description: List of records for each action that has not been performed
            and each condition that has not been evaluated.
          items:
            $ref: "#/components/schemas/TriggerHistoryRecordDto"
      required:
      - actionsPerformed
      - conditionsMatched
      - records
      - triggerUuid
      - triggeredAt
      - uuid
    TriggerHistoryRecordDto:
      type: object
      properties:
        message:
          type: string
          description: Message with cause of action/condition failure.
        condition:
          $ref: "#/components/schemas/ConditionDto"
          description: Condition that is referenced by history record
        execution:
          $ref: "#/components/schemas/ExecutionDto"
          description: Execution that is referenced by history record
      required:
      - message
    TriggerHistoryObjectSummaryDto:
      type: object
      properties:
        objectUuid:
          type: string
          format: uuid
          description: UUID of the object that the trigger has been evaluated on.
        referenceObjectUuid:
          type: string
          format: uuid
          description: Reference UUID of the object that the trigger has been evaluated
            on.
        matched:
          type: boolean
          description: Was matched at least by one trigger.
        ignored:
          type: boolean
          description: Was matched by ignore trigger.
        triggers:
          type: array
          description: List of records for each trigger that has been evaluated.
          items:
            $ref: "#/components/schemas/TriggerHistoryObjectTriggerSummaryDto"
      required:
      - ignored
      - matched
      - triggers
    TriggerHistoryObjectTriggerSummaryDto:
      type: object
      properties:
        triggerUuid:
          type: string
          format: uuid
          description: UUID of the object that the trigger has been evaluated on.
        triggerName:
          type: string
          description: Reference UUID of the object that the trigger has been evaluated
            on.
        triggeredAt:
          type: string
          format: date-time
          description: Time at which has the trigger been triggered
        message:
          type: string
          description: 'Additional message. '
        records:
          type: array
          description: List of records for each action that has not been performed
            and each condition that has not been evaluated.
          items:
            $ref: "#/components/schemas/TriggerHistoryRecordDto"
      required:
      - records
      - triggerName
      - triggerUuid
      - triggeredAt
    TriggerHistorySummaryDto:
      type: object
      properties:
        associationResource:
          $ref: "#/components/schemas/Resource"
          description: Resource of the object associated with triggers.
        associationObjectUuid:
          type: string
          description: UUID of the object associated with triggers.
        objectsResource:
          $ref: "#/components/schemas/Resource"
          description: Resource of objects that triggers has been evaluated on.
        objectsEvaluated:
          type: integer
          format: int32
          description: Number of objects evaluated.
        objectsMatched:
          type: integer
          format: int32
          description: Number of objects matched at least by one trigger.
        objectsIgnored:
          type: integer
          format: int32
          description: Number of objects matched by ignore triggers.
        objects:
          type: array
          description: List of history of objects that triggers has been evaluated
            on.
          items:
            $ref: "#/components/schemas/TriggerHistoryObjectSummaryDto"
      required:
      - associationObjectUuid
      - associationResource
      - objects
      - objectsEvaluated
      - objectsIgnored
      - objectsMatched
      - objectsResource
    RuleDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Rule
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the Rule
      required:
      - name
      - resource
      - uuid
    ActionDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the action
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource associated with the action
      required:
      - name
      - resource
      - uuid
    TokenInstanceDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        status:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Status Of the Token Instance
        tokenProfiles:
          type: integer
          format: int32
          description: Number of Token Profiles associated
        connectorName:
          type: string
          description: Connector Name
        connectorUuid:
          type: string
          description: Connector UUID
        kind:
          type: string
          description: Connector Kind
      required:
      - name
      - status
      - tokenProfiles
      - uuid
    KeyEventHistoryDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the event
        keyUuid:
          type: string
          description: UUID of the Key
        created:
          type: string
          format: date-time
          description: Event creation time
        createdBy:
          type: string
          description: Created By
        event:
          type: string
          description: Event type
          enum:
          - Create Key
          - Compromised Key
          - Destroy Key
          - Update Key Usages
          - Sign Data
          - Verify Data
          - Encrypt Data
          - Decrypt Data
          - Enable Key
          - Disable Key
        status:
          type: string
          description: Event result
          enum:
          - SUCCESS
          - FAILED
        message:
          type: string
          description: Event message
        additionalInformation:
          type: object
          additionalProperties:
            type: object
          description: Additional information for the event
      required:
      - created
      - createdBy
      - event
      - keyUuid
      - message
      - status
      - uuid
    TokenProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of Token Profile
        tokenInstanceUuid:
          type: string
          description: UUID of Token Instance
        tokenInstanceName:
          type: string
          description: Name of Token instance
        tokenInstanceStatus:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Token Instance Status
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        usages:
          type: array
          description: Usages for the Keys assoiated to the profile
          items:
            $ref: "#/components/schemas/KeyUsage"
      required:
      - enabled
      - name
      - tokenInstanceName
      - tokenInstanceStatus
      - tokenInstanceUuid
      - usages
      - uuid
    StatisticsDto:
      type: object
      properties:
        totalCertificates:
          type: integer
          format: int64
          description: Number Certificates available
        totalGroups:
          type: integer
          format: int64
          description: Number of Groups
        totalDiscoveries:
          type: integer
          format: int64
          description: Number of Discoveries triggered
        totalConnectors:
          type: integer
          format: int64
          description: Number of Connectors added
        totalRaProfiles:
          type: integer
          format: int64
          description: Number of RA Profiles in the platform
        totalCredentials:
          type: integer
          format: int64
          description: Number of Credentials
        totalAuthorities:
          type: integer
          format: int64
          description: Number of Authority instances
        totalAdministrators:
          type: integer
          format: int64
          description: Number of Administrators
        totalClients:
          type: integer
          format: int64
          description: Number of Clients added
        groupStatByCertificateCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by Group
        raProfileStatByCertificateCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by RA Profile
        certificateStatByType:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by Type
        certificateStatByExpiry:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by expiry date
        certificateStatByKeySize:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by key size
        certificateStatBySubjectType:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by subject type
        certificateStatByState:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by state
        certificateStatByValidationStatus:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by validationStatus
        certificateStatByComplianceStatus:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Certificate count by compliance status
        connectorStatByStatus:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Connector count by status
        raProfileStatByStatus:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of RA Profile count by status
        administratorStatByStatus:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Administrator count by status
        clientStatByStatus:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of Client count by status
    AuthenticationSettingsDto:
      type: object
      properties:
        disableLocalhostUser:
          type: boolean
          description: Disable using localhost user for requests from localhost
        oauth2Providers:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/OAuth2ProviderSettingsDto"
      required:
      - disableLocalhostUser
    PaginationRequestDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          default: "10"
          description: Number of entries per page
          maximum: 1000
        pageNumber:
          type: integer
          format: int32
          default: "1"
          description: Page number for the request
    ScheduledJobDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: UUID of the scheduled job
        jobName:
          type: string
          description: Name of the scheduled job
        jobType:
          type: string
          description: Type of scheduled job (job processor name)
        cronExpression:
          type: string
          description: CRON expression representing configuration of pattern how to
            run scheduled job
        enabled:
          type: boolean
          description: "Status of the scheduled job. True = Enabled, False = Disabled"
        oneTime:
          type: boolean
          description: Is scheduled job triggered only once
        system:
          type: boolean
          description: Is system scheduled job
        lastExecutionStatus:
          $ref: "#/components/schemas/SchedulerJobExecutionStatus"
          description: Execution status of last job triggered task
      required:
      - cronExpression
      - enabled
      - jobName
      - jobType
      - lastExecutionStatus
      - oneTime
      - system
      - uuid
    ScheduledJobsResponseDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
        scheduledJobs:
          type: array
          description: Scheduled jobs
          items:
            $ref: "#/components/schemas/ScheduledJobDto"
      required:
      - itemsPerPage
      - pageNumber
      - scheduledJobs
      - totalItems
      - totalPages
    ScheduledJobHistoryDto:
      type: object
      properties:
        jobUuid:
          type: string
          format: uuid
          description: Scheduled job UUID
        startTime:
          type: string
          format: date-time
          description: Start time of triggered task
        endTime:
          type: string
          format: date-time
          description: End time of triggered task
        status:
          $ref: "#/components/schemas/SchedulerJobExecutionStatus"
          description: Execution status of triggered task
        resultMessage:
          type: string
          description: Message explaining result status
        resultObjectType:
          $ref: "#/components/schemas/Resource"
          description: Result object type
        resultObjectIdentification:
          type: array
          description: Result object identification (UUID)
          items:
            type: string
      required:
      - startTime
      - status
    ScheduledJobHistoryResponseDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
        scheduledJobHistory:
          type: array
          description: Scheduled job history
          items:
            $ref: "#/components/schemas/ScheduledJobHistoryDto"
      required:
      - itemsPerPage
      - pageNumber
      - scheduledJobHistory
      - totalItems
      - totalPages
    ScepProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        description:
          type: string
          description: SCEP Profile description
          example: Sample description
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile
        includeCaCertificate:
          type: boolean
          description: Include CA certificate in the SCEP response
        includeCaCertificateChain:
          type: boolean
          description: Include CA certificate chain in the SCEP response
        renewThreshold:
          type: integer
          format: int32
          description: Renewal time threshold in days
          example: 30
        scepUrl:
          type: string
          description: SCEP URL
          example: https://some-server.com/api/v1/protocols/scep/profile/pkiclient.exe
        enableIntune:
          type: boolean
          description: Status of Intune
      required:
      - enabled
      - includeCaCertificate
      - includeCaCertificateChain
      - name
      - uuid
    ResourceDto:
      type: object
      properties:
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource code
          example: certificates
        hasObjectAccess:
          type: boolean
          description: "If resource has Object access permissions. True = Yes, False\
            \ = No"
        hasCustomAttributes:
          type: boolean
          description: Support assigning custom attributes to resource objects
        hasGroups:
          type: boolean
          description: Support assigning groups to resource objects
        hasOwner:
          type: boolean
          description: Support assigning owner to resource objects
        hasEvents:
          type: boolean
          description: Has events that can be used in triggers
        hasRuleEvaluator:
          type: boolean
          description: Has rule evaluator that can evaluate conditions and actions
      required:
      - hasCustomAttributes
      - hasEvents
      - hasGroups
      - hasObjectAccess
      - hasOwner
      - hasRuleEvaluator
      - resource
    FilterFieldType:
      type: string
      enum:
      - string
      - number
      - list
      - date
      - datetime
      - boolean
    PlatformEnum:
      type: string
      enum:
      - Resource
      - FilterConditionOperator
      - FilterFieldType
      - FilterFieldSource
      - SettingsSection
      - NotificationType
      - AuthType
      - HealthStatus
      - ConnectorStatus
      - FunctionGroupCode
      - CertificateType
      - CertificateState
      - CertificateValidationStatus
      - CertificateFormat
      - CertificateFormatEncoding
      - CertificateValidationCheck
      - CertificateRevocationReason
      - CertificateRequestFormat
      - DiscoveryStatus
      - CertificateProtocol
      - CertificateSubjectType
      - KeyAlgorithm
      - KeyFormat
      - KeyState
      - KeyType
      - KeyUsage
      - KeyRequestType
      - KeyCompromiseReason
      - TokenInstanceStatus
      - DigestAlgorithm
      - RsaSignatureScheme
      - RsaEncryptionScheme
      - ComplianceStatus
      - ComplianceRuleStatus
      - AccountStatus
      - ProtectionMethod
      - CmpProfileVariant
      - AttributeType
      - AttributeContentType
      - AttributeConstraintType
      - AttributeValueTarget
      - ProgrammingLanguageEnum
      - SchedulerJobExecutionStatus
      - TriggerType
      - ConditionType
      - ExecutionType
      - ResourceEvent
      - Module
      - ActorType
      - AuthMethod
      - Operation
      - OperationResult
    SearchFieldDataByGroupDto:
      type: object
      properties:
        filterFieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
          description: Search group
        searchFieldData:
          type: array
          description: List of search fields for specified search group
          items:
            $ref: "#/components/schemas/SearchFieldDataDto"
      required:
      - filterFieldSource
    SearchFieldDataDto:
      type: object
      properties:
        fieldIdentifier:
          type: string
          description: Identifier of field to search
        fieldLabel:
          type: string
          description: Label for the field
        type:
          $ref: "#/components/schemas/FilterFieldType"
          description: Type of the field
        conditions:
          type: array
          description: List of available conditions for the field
          items:
            $ref: "#/components/schemas/FilterConditionOperator"
        platformEnum:
          $ref: "#/components/schemas/PlatformEnum"
          description: Platform enum of the field values
        attributeContentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute filter field content type
        value:
          type: object
          description: Available values for the field
        multiValue:
          type: boolean
          description: "Multivalue flag. true = yes, false = no"
      required:
      - conditions
      - fieldIdentifier
      - fieldLabel
      - type
    ResourceEventDto:
      type: object
      properties:
        event:
          type: string
          description: Resource event code
          enum:
          - discoveryFinished
          example: discoveryFinished
        producedResource:
          $ref: "#/components/schemas/Resource"
          description: Resource of objects that are subject of event
      required:
      - event
    NotificationRequestDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          default: "10"
          description: Number of entries per page
          maximum: 1000
        pageNumber:
          type: integer
          format: int32
          default: "1"
          description: Page number for the request
        unread:
          type: boolean
          default: "false"
          description: Show only unread notifications
    NotificationDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Notification UUID
        message:
          type: string
          description: Notification message
        detail:
          type: string
          description: Notification message detail
        readAt:
          type: string
          format: date-time
          description: Notification read date
        sentAt:
          type: string
          format: date-time
          description: Notification sent date
        targetObjectType:
          $ref: "#/components/schemas/Resource"
          description: Target object type
        targetObjectIdentification:
          type: array
          description: Target object identification (UUID)
          items:
            type: string
      required:
      - message
      - sentAt
      - uuid
    NotificationResponseDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
        items:
          type: array
          description: Notifications
          items:
            $ref: "#/components/schemas/NotificationDto"
      required:
      - items
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    EnumItemDto:
      type: object
      properties:
        code:
          type: string
          description: Enum item code
          example: X509
        label:
          type: string
          description: Enum item display label
          example: X.509
        description:
          type: string
          description: Enum item description
          example: X.509 Certificate type
      required:
      - code
      - label
    DiscoveryHistoryDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Discovery Kind
          example: IP-HostName
        status:
          $ref: "#/components/schemas/DiscoveryStatus"
          description: Status of Discovery
        connectorStatus:
          $ref: "#/components/schemas/DiscoveryStatus"
          description: Status of Discovery returned by connector
        message:
          type: string
          description: Failure/Success Messages
          example: Failed due to network connectivity issues
        startTime:
          type: string
          format: date-time
          description: Date and time when Discovery started
        endTime:
          type: string
          format: date-time
          description: Date and time when Discovery finished
        totalCertificatesDiscovered:
          type: integer
          format: int32
          default: "0"
          description: Number of certificates that are discovered
        connectorTotalCertificatesDiscovered:
          type: integer
          format: int32
          default: "0"
          description: Number of certificates that were discovered by connector
        connectorUuid:
          type: string
          description: UUID of the Discovery Provider
        connectorName:
          type: string
          description: Name of the Discovery Provider
        attributes:
          type: array
          description: List of Discovery Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
        metadata:
          type: array
          description: Metadata of the Discovery
          items:
            $ref: "#/components/schemas/MetadataResponseDto"
        triggers:
          type: array
          description: List of associated triggers
          items:
            $ref: "#/components/schemas/TriggerDto"
      required:
      - attributes
      - connectorName
      - connectorStatus
      - connectorUuid
      - kind
      - name
      - status
      - triggers
      - uuid
    DiscoveryCertificateDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        inventoryUuid:
          type: string
          description: UUID of the Certificate in Certificate inventory
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate Serial Number
        issuerCommonName:
          type: string
          description: Issuer common name
        notBefore:
          type: string
          format: date-time
          description: Certificate validity start date
        notAfter:
          type: string
          format: date-time
          description: Certificate expiration date
        fingerprint:
          type: string
          description: SHA256 thumbprint of the certificate
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
        newlyDiscovered:
          type: boolean
          description: Boolean representing if the certificate is newly discovered.
            True - Certificate is newly discoveredfalse - Certificate was already
            available in the inventory
        processed:
          type: boolean
          description: Indicator whether the discovery certificate has already been
            processed.
        processedError:
          type: string
          description: Error message in case of failed processing of the discovery
            certificate.
      required:
      - certificateContent
      - commonName
      - fingerprint
      - issuerCommonName
      - newlyDiscovered
      - notAfter
      - notBefore
      - processed
      - serialNumber
      - uuid
    DiscoveryCertificateResponseDto:
      type: object
      properties:
        certificates:
          type: array
          description: Certificates
          items:
            $ref: "#/components/schemas/DiscoveryCertificateDto"
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
      required:
      - certificates
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    HealthDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/HealthStatus"
          description: Current connector operational status
        description:
          type: string
          description: Detailed status description
        parts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/HealthDto"
          description: Nested status of services
      required:
      - status
    HealthStatus:
      type: string
      enum:
      - ok
      - nok
      - unknown
    ComplianceProfilesListDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Compliance Profile description
        rules:
          type: array
          description: Rules summary
          items:
            $ref: "#/components/schemas/ComplianceProviderSummaryDto"
      required:
      - name
      - rules
      - uuid
    ComplianceProviderSummaryDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
        numberOfRules:
          type: integer
          format: int32
          description: Number of rules for the Provider
        numberOfGroups:
          type: integer
          format: int32
          description: Number of groups for the Provider
      required:
      - connectorName
    ComplianceConnectorAndGroupsDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
        kind:
          type: string
          description: Kind of the Compliance Provider
        groups:
          type: array
          description: Groups associated
          items:
            $ref: "#/components/schemas/ComplianceGroupsDto"
    ComplianceConnectorAndRulesDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
        kind:
          type: string
          description: Kind of the Compliance Provider
        rules:
          type: array
          description: Rules associated
          items:
            $ref: "#/components/schemas/ComplianceRulesDto"
    ComplianceGroupsDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the group
          example: Sample group description
      required:
      - name
      - uuid
    ComplianceProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Compliance Profile
        rules:
          type: array
          description: List of rules
          items:
            $ref: "#/components/schemas/ComplianceConnectorAndRulesDto"
        groups:
          type: array
          description: List of groups
          items:
            $ref: "#/components/schemas/ComplianceConnectorAndGroupsDto"
        raProfiles:
          type: array
          description: List of associated RA Profiles
          items:
            $ref: "#/components/schemas/SimplifiedRaProfileDto"
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - groups
      - name
      - rules
      - uuid
    ComplianceRulesDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
        certificateType:
          $ref: "#/components/schemas/CertificateType"
          description: Certificate type for the rule
          example: X509
        attributes:
          type: array
          description: Attributes of the rule
          items:
            $ref: "#/components/schemas/ResponseAttributeDto"
      required:
      - certificateType
      - name
      - uuid
    ComplianceRulesListResponseDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: c35bc88c-d0ef-11ec-9d64-0242ac120003
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: Kind1
        rules:
          type: array
          description: Rules from Compliance Provider
          items:
            $ref: "#/components/schemas/ComplianceRulesResponseDto"
      required:
      - connectorName
      - connectorUuid
      - kind
      - rules
    ComplianceRulesResponseDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        groupUuid:
          type: string
          description: UUID of the group to which the rule belongs to
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the rule
          example: Rule1
        certificateType:
          $ref: "#/components/schemas/CertificateType"
          description: Type of the certificate to which this rule can be applied
          example: X509
        attributes:
          type: array
          description: Rule attributes
          items:
            $ref: "#/components/schemas/BaseAttributeDto"
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
      required:
      - certificateType
      - name
      - uuid
    ComplianceGroupsListResponseDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: c35bc88c-d0ef-11ec-9d64-0242ac120003
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: Kind1
        groups:
          type: array
          description: Groups from Compliance Provider
          items:
            $ref: "#/components/schemas/ComplianceGroupsResponseDto"
      required:
      - connectorName
      - connectorUuid
      - groups
      - kind
    ComplianceGroupsResponseDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the group
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the group
          example: RFC
        description:
          type: string
          description: Description of the group
          example: Sample description of the group
      required:
      - name
      - uuid
    CmpProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        variant:
          type: string
          description: Variant of the CMP Profile
          enum:
          - v2
          - v2_3gpp
          - v3
        description:
          type: string
          description: CMP Profile description
          example: Sample text description
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile associated with the CMP Profile
        cmpUrl:
          type: string
          description: CMP URL
          example: https://your-domain.com/api/v1/protocols/cmp/cmpProfile
      required:
      - enabled
      - name
      - uuid
      - variant
    CertificateFormat:
      type: string
      enum:
      - raw
      - pkcs7
    CertificateFormatEncoding:
      type: string
      enum:
      - pem
      - der
    CertificateDownloadResponseDto:
      type: object
      properties:
        format:
          $ref: "#/components/schemas/CertificateFormat"
          description: Format of the downloaded content
        encoding:
          $ref: "#/components/schemas/CertificateFormatEncoding"
          description: Encoding of the downloaded content
        content:
          type: string
          description: Base64 encoded content in the specified format and encoding
      required:
      - content
      - encoding
      - format
    CertificateValidationCheck:
      type: string
      enum:
      - certificate_chain
      - signature
      - certificate_validity
      - ocsp_verification
      - crl_verification
      - basic_constraints
      - key_usage
    CertificateValidationCheckDto:
      type: object
      properties:
        validationCheck:
          $ref: "#/components/schemas/CertificateValidationCheck"
          description: Certificate validation check type
        status:
          $ref: "#/components/schemas/CertificateValidationStatus"
          description: Certificate validation check result status
        message:
          type: string
          description: Certificate validation check result message
      required:
      - status
      - validationCheck
    CertificateValidationResultDto:
      type: object
      properties:
        resultStatus:
          $ref: "#/components/schemas/CertificateValidationStatus"
          description: Overall certificate validation result status
        validationChecks:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CertificateValidationCheckDto"
          description: Certificate validation check results
      required:
      - resultStatus
    CertificateEventHistoryDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the event
        certificateUuid:
          type: string
          description: UUID of the Certificate
        created:
          type: string
          format: date-time
          description: Event creation time
        createdBy:
          type: string
          description: Created By
        event:
          type: string
          description: Event type
          enum:
          - Issue Certificate
          - Request Certificate
          - Renew Certificate
          - Rekey Certificate
          - Revoke Certificate
          - Delete Certificate
          - Approve action requested
          - Approve action closed
          - Update State
          - Update Validation Status
          - Update RA Profile
          - Update Entity
          - Update Group
          - Update Owner
          - Upload Certificate
          - Certificate Discovered
          - Update Location
        status:
          type: string
          description: Event result
          enum:
          - SUCCESS
          - FAILED
        message:
          type: string
          description: Event message
        additionalInformation:
          type: object
          additionalProperties:
            type: object
          description: Additional information for the event
      required:
      - certificateUuid
      - created
      - createdBy
      - event
      - message
      - status
      - uuid
    CertificateChainResponseDto:
      type: object
      properties:
        completeChain:
          type: boolean
          description: Indicator whether the chain returned is complete
        certificates:
          type: array
          description: List of certificates in the chain
          items:
            $ref: "#/components/schemas/CertificateDetailDto"
      required:
      - certificates
      - completeChain
    CertificateChainDownloadResponseDto:
      type: object
      properties:
        format:
          $ref: "#/components/schemas/CertificateFormat"
          description: Format of the downloaded content
        encoding:
          $ref: "#/components/schemas/CertificateFormatEncoding"
          description: Encoding of the downloaded content
        content:
          type: string
          description: Base64 encoded content in the specified format and encoding
        completeChain:
          type: boolean
          description: Indicator whether the chain returned is complete
      required:
      - completeChain
      - content
      - encoding
      - format
    ApprovalDto:
      type: object
      properties:
        approvalUuid:
          type: string
          description: UUID of the Approval
        creatorUuid:
          type: string
          description: UUID of the user that requested approval
        creatorUsername:
          type: string
          description: Username of the user that requested approval
        version:
          type: integer
          format: int32
          description: Version of the Approval profile
        createdAt:
          type: string
          format: date-time
          description: Creation date of the Approval
        expiryAt:
          type: string
          format: date-time
          description: Expiry date of the Approval
        closedAt:
          type: string
          format: date-time
          description: Date of resolution of the Approval
        status:
          type: string
          description: Status of the Approval
          enum:
          - PENDING
          - APPROVED
          - REJECTED
          - EXPIRED
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource of the Approval
        resourceAction:
          type: string
          description: Resource action of the Approval
        objectUuid:
          type: string
          description: UUID of the target object of the Approval
        approvalProfileName:
          type: string
          description: Name of the Approval profile
        approvalProfileUuid:
          type: string
          description: UUID of the Approval profile
      required:
      - approvalProfileName
      - approvalProfileUuid
      - approvalUuid
      - createdAt
      - creatorUuid
      - expiryAt
      - objectUuid
      - resource
      - resourceAction
      - status
      - version
    ApprovalResponseDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
        approvals:
          type: array
          description: List of the Approvals
          items:
            $ref: "#/components/schemas/ApprovalDto"
      required:
      - approvals
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    NameAndIdDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Object identifier
        name:
          type: string
          description: Object name
      required:
      - id
      - name
    SimplifiedComplianceProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Compliance Profile
      required:
      - name
      - uuid
    ApprovalProfileDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Approval profile
        name:
          type: string
          description: Name of the Approval profile
          example: ApprovalProfile1
        version:
          type: integer
          format: int32
          description: Version of the Approval profile
          example: 1
        description:
          type: string
          description: Description of the Approval profile
          example: Detail description of the approval profile
        enabled:
          type: boolean
          description: Enable of the Approval profile
          example: true
        expiry:
          type: integer
          format: int32
          description: Expiration of the Approval profile in hours
          example: 30
        numberOfSteps:
          type: integer
          format: int32
          description: Number of the Approval profile steps
          example: 2
        associations:
          type: integer
          format: int32
          description: Number of associated objects
      required:
      - associations
      - enabled
      - name
      - numberOfSteps
      - uuid
      - version
    AuthResourceDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          $ref: "#/components/schemas/Resource"
          description: Resource Name
          example: Name
        displayName:
          type: string
          description: Resource label
        listObjectsEndpoint:
          type: string
          description: Listing Endpoint
        objectAccess:
          type: boolean
          description: "If resource has Object access permissions. True = Yes, False\
            \ = No"
        actions:
          type: array
          description: List of Actions for the Resource
          items:
            $ref: "#/components/schemas/ActionDto"
      required:
      - actions
      - displayName
      - name
      - objectAccess
      - uuid
    AttributeDefinitionDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute Content Type
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
      required:
      - contentType
      - description
      - name
      - uuid
    ConnectorMetadataResponseDto:
      type: object
      properties:
        name:
          type: string
          description: Metadata Name
        uuid:
          type: string
          description: Metadata UUID
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Content Type of the Metadata
        label:
          type: string
          description: Metadata Label
        connectorUuid:
          type: string
          description: Connector UUID
      required:
      - connectorUuid
      - contentType
      - label
      - name
      - uuid
    CustomAttributeDefinitionDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Attribute Content Type
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
        resources:
          type: array
          description: List of resources for custom attribute
          items:
            $ref: "#/components/schemas/Resource"
      required:
      - contentType
      - description
      - name
      - resources
      - uuid
    ApprovalDetailDto:
      type: object
      properties:
        approvalUuid:
          type: string
          description: UUID of the Approval
        creatorUuid:
          type: string
          description: UUID of the user that requested approval
        creatorUsername:
          type: string
          description: Username of the user that requested approval
        version:
          type: integer
          format: int32
          description: Version of the Approval profile
        createdAt:
          type: string
          format: date-time
          description: Creation date of the Approval
        expiryAt:
          type: string
          format: date-time
          description: Expiry date of the Approval
        closedAt:
          type: string
          format: date-time
          description: Date of resolution of the Approval
        status:
          type: string
          description: Status of the Approval
          enum:
          - PENDING
          - APPROVED
          - REJECTED
          - EXPIRED
        resource:
          $ref: "#/components/schemas/Resource"
          description: Resource of the Approval
        resourceAction:
          type: string
          description: Resource action of the Approval
        objectUuid:
          type: string
          description: UUID of the target object of the Approval
        approvalProfileName:
          type: string
          description: Name of the Approval profile
        approvalProfileUuid:
          type: string
          description: UUID of the Approval profile
        expiry:
          type: integer
          format: int32
          description: Expiration in hours
        description:
          type: string
          description: Description of the Approval
        approvalSteps:
          type: array
          description: List of Approval steps related to this Approval
          items:
            $ref: "#/components/schemas/ApprovalDetailStepDto"
      required:
      - approvalProfileName
      - approvalProfileUuid
      - approvalSteps
      - approvalUuid
      - createdAt
      - creatorUuid
      - expiry
      - expiryAt
      - objectUuid
      - resource
      - resourceAction
      - status
      - version
    ApprovalDetailStepDto:
      type: object
      properties:
        userUuid:
          type: string
          format: uuid
          description: UUID of the responsible user to approve action in approval
            step
        roleUuid:
          type: string
          format: uuid
          description: UUID of the responsible role of the users to approve action
            in approval step
        groupUuid:
          type: string
          format: uuid
          description: UUID of the responsible group of the users to approve action
            in approval step
        description:
          type: string
          description: Description of the approval step
        order:
          type: integer
          format: int32
          description: Order of the position in the approval steps flow
        requiredApprovals:
          type: integer
          format: int32
          description: "Count of the required approvals for the approval step, by\
            \ default there is 1 approval needed."
        uuid:
          type: string
          format: uuid
          description: UUID of the Approval step
        username:
          type: string
          description: Username of the responsible user to approve action in approval
            step
        roleName:
          type: string
          description: Name of the responsible role of the users to approve action
            in approval step
        groupName:
          type: string
          description: Name of the responsible group of the users to approve action
            in approval step
        approvalStepRecipients:
          type: array
          description: List of the approval recipient related for this step
          items:
            $ref: "#/components/schemas/ApprovalStepRecipientDto"
      required:
      - approvalStepRecipients
      - order
      - uuid
    ApprovalStepRecipientDto:
      type: object
      properties:
        approvalRecipientUuid:
          type: string
          description: UUID of the approval recipient
        userUuid:
          type: string
          description: UUID of the recipient user
        username:
          type: string
          description: Username of the recipient
        createdAt:
          type: string
          format: date-time
          description: Creating date of the approval recipient
        closedAt:
          type: string
          format: date-time
          description: Resolution date of the approval recipient
        status:
          type: string
          description: Status of the approval recipient
          enum:
          - PENDING
          - APPROVED
          - REJECTED
          - EXPIRED
        comment:
          type: string
          description: Comment of the approval recipient
      required:
      - approvalRecipientUuid
      - createdAt
      - status
      - userUuid
    ApprovalUserDto:
      type: object
      properties:
        history:
          type: boolean
    ApprovalProfileResponseDto:
      type: object
      properties:
        itemsPerPage:
          type: integer
          format: int32
          description: Number of entries per page
        pageNumber:
          type: integer
          format: int32
          description: Page number for the request
        totalPages:
          type: integer
          format: int32
          description: Number of pages available
        totalItems:
          type: integer
          format: int64
          description: Number of items available
        approvalProfiles:
          type: array
          items:
            $ref: "#/components/schemas/ApprovalProfileDto"
      required:
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
    ApprovalProfileForVersionDto:
      type: object
      properties:
        version:
          type: integer
          format: int32
    ApprovalProfileDetailDto:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Approval profile
        name:
          type: string
          description: Name of the Approval profile
          example: ApprovalProfile1
        version:
          type: integer
          format: int32
          description: Version of the Approval profile
          example: 1
        description:
          type: string
          description: Description of the Approval profile
          example: Detail description of the approval profile
        enabled:
          type: boolean
          description: Enable of the Approval profile
          example: true
        expiry:
          type: integer
          format: int32
          description: Expiration of the Approval profile in hours
          example: 30
        numberOfSteps:
          type: integer
          format: int32
          description: Number of the Approval profile steps
          example: 2
        associations:
          type: integer
          format: int32
          description: Number of associated objects
        approvalSteps:
          type: array
          description: List of Approval steps for the Approval profile
          items:
            $ref: "#/components/schemas/ApprovalStepDto"
      required:
      - approvalSteps
      - associations
      - enabled
      - name
      - numberOfSteps
      - uuid
      - version
    ApprovalStepDto:
      type: object
      properties:
        userUuid:
          type: string
          format: uuid
          description: UUID of the responsible user to approve action in approval
            step
        roleUuid:
          type: string
          format: uuid
          description: UUID of the responsible role of the users to approve action
            in approval step
        groupUuid:
          type: string
          format: uuid
          description: UUID of the responsible group of the users to approve action
            in approval step
        description:
          type: string
          description: Description of the approval step
        order:
          type: integer
          format: int32
          description: Order of the position in the approval steps flow
        requiredApprovals:
          type: integer
          format: int32
          description: "Count of the required approvals for the approval step, by\
            \ default there is 1 approval needed."
        uuid:
          type: string
          format: uuid
          description: UUID of the Approval step
        username:
          type: string
          description: Username of the responsible user to approve action in approval
            step
        roleName:
          type: string
          description: Name of the responsible role of the users to approve action
            in approval step
        groupName:
          type: string
          description: Name of the responsible group of the users to approve action
            in approval step
      required:
      - order
      - uuid
    AcmeProfileListDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
          example: false
        description:
          type: string
          description: ACME Profile description
          example: Some description
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile
        directoryUrl:
          type: string
          description: URL of the ACME Directory
          example: https://some-server.com/api/v1/protocols/acme/profile1/directory
      required:
      - enabled
      - name
      - uuid
    AccountStatus:
      type: string
      enum:
      - valid
      - deactivated
      - revoked
    AcmeAccountResponseDto:
      type: object
      properties:
        accountId:
          type: string
          description: ID of the Account
          example: TtrgfYTR6F
        uuid:
          type: string
          description: UUID of the Account
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        enabled:
          type: boolean
          description: "Enabled flag. enabled=true, disabled=false"
          example: false
        totalOrders:
          type: integer
          format: int32
          description: Order count for the Account
          example: 23
        successfulOrders:
          type: integer
          format: int32
          description: Number of successful Orders
          example: 2
        failedOrders:
          type: integer
          format: int32
          description: Number of failed Orders
          example: 239
        pendingOrders:
          type: integer
          format: int32
          description: Number of pending Orders
          example: 24
        validOrders:
          type: integer
          format: int32
          description: Number of valid Orders
          example: 23
        processingOrders:
          type: integer
          format: int32
          description: Number of processing Orders
          example: 27
        status:
          $ref: "#/components/schemas/AccountStatus"
          description: Status of the Account
          example: VALID
        contact:
          type: array
          description: Contact information
          example: "mailto: someadmin@domain.com"
          items:
            type: string
        termsOfServiceAgreed:
          type: boolean
          description: Terms of Service Agreed
          example: true
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile
          example: RA Profile 1
        acmeProfileName:
          type: string
          description: Name of the ACME Profile
          example: ACME Profile 1
        acmeProfileUuid:
          type: string
          description: UUID of the ACME Profile
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
      required:
      - accountId
      - acmeProfileName
      - acmeProfileUuid
      - contact
      - enabled
      - failedOrders
      - pendingOrders
      - processingOrders
      - raProfile
      - status
      - successfulOrders
      - termsOfServiceAgreed
      - totalOrders
      - uuid
      - validOrders
    AcmeAccountListResponseDto:
      type: object
      properties:
        accountId:
          type: string
          description: ID of the Account
          example: HJAT6gc7i6
        uuid:
          type: string
          description: UUID of the Account
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        enabled:
          type: boolean
          description: "Enabled flag. true = enabled, false=disabled"
          example: false
        totalOrders:
          type: integer
          format: int32
          description: Total number of Orders
          example: 4
        status:
          $ref: "#/components/schemas/AccountStatus"
          description: Status of the Account
          example: VALID
        raProfile:
          $ref: "#/components/schemas/SimplifiedRaProfileDto"
          description: RA Profile
          example: RAProfile1
        acmeProfileName:
          type: string
          description: Name of the ACME Profile
          example: ACMEProfile1
        acmeProfileUuid:
          type: string
          description: UUID of the ACME Profile
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
      required:
      - accountId
      - acmeProfileName
      - acmeProfileUuid
      - enabled
      - raProfile
      - status
      - totalOrders
      - uuid
    BulkActionMessageDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        message:
          type: string
          description: Message describing the associations of the Objects which is
            preventing the bulk operation
          example: Object is associated with other items
      required:
      - message
      - name
      - uuid
    ComplianceRuleDeletionRequestDto:
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: default
        ruleUuid:
          type: string
          description: UUID of the rule
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
      required:
      - connectorUuid
      - kind
      - ruleUuid
