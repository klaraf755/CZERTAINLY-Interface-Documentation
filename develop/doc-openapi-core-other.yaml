openapi: 3.0.1
info:
  title: CZERTAINLY Uncategorized API
  description: Various uncategorized REST APIs of the platform
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: info@czertainly.com
  license:
    name: MIT License
    url: https://github.com/CZERTAINLY/CZERTAINLY/blob/develop/LICENSE.md
  version: 2.14.0
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:42973
  description: Generated server url
tags:
- name: Audit Log
  description: Audit Log API
- name: Enums
  description: Enums API
- name: Resource Management
  description: Resource Management API
- name: Statistics/Dashboard
  description: Statistics/Dashboard API
- name: Settings
  description: Settings API
paths:
  /v1/settings/platform:
    get:
      tags:
      - Settings
      summary: Get platform settings
      operationId: getPlatformSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Platform settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformSettingsDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Settings
      summary: Update platform setting
      operationId: updatePlatformSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlatformSettingsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Setting updated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/settings/notifications:
    get:
      tags:
      - Settings
      summary: Get notification settings
      operationId: getNotificationsSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
        "200":
          description: Notification settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettingsDto"
    put:
      tags:
      - Settings
      summary: Update notifications setting
      operationId: updateNotificationsSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSettingsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Setting updated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/settings/logging:
    get:
      tags:
      - Settings
      summary: Get logging settings
      operationId: getLoggingSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Logging settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggingSettingsDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Settings
      summary: Update logging setting
      operationId: updateLoggingSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoggingSettingsDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Logging settings updated
        "401":
          description: Unauthorized
  /v1/settings/authentication:
    get:
      tags:
      - Settings
      summary: Get authentication settings
      operationId: getAuthenticationSettings
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Authentication settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSettingsDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Settings
      summary: Update authentication settings
      operationId: updateAuthenticationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationSettingsUpdateDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
        "200":
          description: Authentication settings updated
  /v1/settings/authentication/oauth2Providers/{providerName}:
    get:
      tags:
      - Settings
      summary: Get OAuth2 Provider settings
      operationId: getOAuth2ProviderSettings
      parameters:
      - name: providerName
        in: path
        description: OAuth2 Provider Name
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: OAuth2 Provider settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2ProviderSettingsDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
    put:
      tags:
      - Settings
      summary: Update OAuth2 Provider settings
      operationId: updateOAuth2ProviderSettings
      parameters:
      - name: providerName
        in: path
        description: OAuth2 Provider Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuth2ProviderSettingsUpdateDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Setting updated
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
    delete:
      tags:
      - Settings
      summary: Remove OAuth2 Provider
      operationId: removeOAuth2Provider
      parameters:
      - name: providerName
        in: path
        description: OAuth2 Provider Name
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: OAuth2 Provider removed.
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/auditLogs:
    post:
      tags:
      - Audit Log
      summary: List Audit logs
      operationId: listAuditLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: List of audit logs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogResponseDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/auditLogs/purge:
    post:
      tags:
      - Audit Log
      summary: Purge Audit logs
      operationId: purgeAuditLogs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SearchFilterRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Audit logs purged
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/auditLogs/export:
    post:
      tags:
      - Audit Log
      summary: Export Audit logs
      operationId: exportAuditLogs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SearchFilterRequestDto"
        required: true
      responses:
        "200":
          description: Export of audit logs
          content:
            application/json:
              schema:
                type: string
                format: binary
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/statistics:
    get:
      tags:
      - Statistics/Dashboard
      summary: Get Dashboard/Statistics Details
      operationId: getStatistics
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/resources:
    get:
      tags:
      - Resource Management
      summary: Retrieve list of resources with information and settings
      operationId: listResources
      responses:
        "200":
          description: Resources retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceDto"
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/resources/{resource}/filters/rules:
    get:
      tags:
      - Resource Management
      summary: Retrieve filter fields that can be used for creating rule conditions
        and actions
      operationId: listResourceRuleFilterFields
      parameters:
      - name: resource
        in: path
        description: Resource
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      - name: settable
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Filter fields retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/resources/{resource}/events:
    get:
      tags:
      - Resource Management
      summary: Retrieve a list of all events that can be triggered by a resource
      operationId: listResourceEvents
      parameters:
      - name: resource
        in: path
        description: Resource
        required: true
        schema:
          $ref: "#/components/schemas/Resource"
      responses:
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "200":
          description: Events retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceEventDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
  /v1/enums:
    get:
      tags:
      - Enums
      summary: Get platform enums
      operationId: getPlatformEnums
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Platform settings retrieved
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/EnumItemDto"
        "401":
          description: Unauthorized
  /v1/auditLogs/search:
    get:
      tags:
      - Audit Log
      summary: Get Audit logs searchable fields information
      operationId: getSearchableFieldInformation
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Audit logs searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchFieldDataByGroupDto"
        "500":
          description: Internal Server Error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationServiceExceptionDto"
        "401":
          description: Unauthorized
components:
  schemas:
    PlatformSettingsDto:
      required:
      - utils
      type: object
      properties:
        utils:
          $ref: "#/components/schemas/UtilsSettingsDto"
    UtilsSettingsDto:
      required:
      - utilsServiceUrl
      type: object
      properties:
        utilsServiceUrl:
          type: string
          description: URL of the Util Service
          example: http://util-service:8080
      description: Utils settings of the platform
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    AuthenticationServiceExceptionDto:
      required:
      - code
      - message
      - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the HTTP Request
          format: int32
        code:
          type: string
          description: Code of the result
        message:
          type: string
          description: Exception message
    NotificationSettingsDto:
      required:
      - notificationsMapping
      type: object
      properties:
        notificationsMapping:
          type: object
          additionalProperties:
            type: string
            description: Map of notification instances where key is notification type
              enum
          description: Map of notification instances where key is notification type
            enum
    AuditLoggingSettingsDto:
      required:
      - logAllModules
      - logAllResources
      - output
      type: object
      properties:
        logAllModules:
          type: boolean
          description: "Collect logs for all modules. If true, logged modules list\
            \ is not taken into account only ignored modules"
        logAllResources:
          type: boolean
          description: "Collect logs for all resources. If true, logged resources\
            \ list is not taken into account only ignored resources"
        loggedModules:
          uniqueItems: true
          type: array
          description: List of modules for which logs are collected.
          items:
            $ref: "#/components/schemas/Module"
        ignoredModules:
          uniqueItems: true
          type: array
          description: List of modules that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Module"
        loggedResources:
          uniqueItems: true
          type: array
          description: List of resources for which logs are collected.
          items:
            $ref: "#/components/schemas/Resource"
        ignoredResources:
          uniqueItems: true
          type: array
          description: List of resources that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Resource"
        output:
          type: string
          description: Type of audit logs output/storage channel
          enum:
          - NONE
          - ALL
          - CONSOLE
          - DATABASE
        resourceLogging:
          $ref: "#/components/schemas/ResourceLoggingSettingsDto"
      description: Settings of audit logging
    LoggingSettingsDto:
      required:
      - auditLogs
      - eventLogs
      type: object
      properties:
        auditLogs:
          $ref: "#/components/schemas/AuditLoggingSettingsDto"
        eventLogs:
          $ref: "#/components/schemas/ResourceLoggingSettingsDto"
    Module:
      type: string
      description: List of modules that will be ignored when logging.
      enum:
      - approvals
      - auth
      - certificates
      - keys
      - compliance
      - core
      - discovery
      - entities
      - protocols
      - scheduler
      - workflows
    Resource:
      type: string
      description: List of resources that will be ignored when logging.
      enum:
      - NONE
      - dashboard
      - settings
      - auditLogs
      - credentials
      - connectors
      - attributes
      - jobs
      - notificationInstances
      - users
      - roles
      - acmeAccounts
      - acmeProfiles
      - scepProfiles
      - cmpProfiles
      - authorities
      - raProfiles
      - certificates
      - certificateRequests
      - groups
      - complianceProfiles
      - discoveries
      - entities
      - locations
      - tokenProfiles
      - tokens
      - keys
      - approvalProfiles
      - approvals
      - rules
      - actions
      - triggers
      - resources
      - resourceEvents
      - searchFilters
      - keyItems
      - platformEnums
      - notifications
      - conditions
      - executions
      - complianceRules
      - complianceGroups
      - customAttributes
      - globalMetadata
      - acmeOrders
      - acmeAuthorizations
      - acmeChallenges
      - cmpTransactions
      - endEntityProfiles
      - authenticationProviders
    ResourceLoggingSettingsDto:
      required:
      - logAllModules
      - logAllResources
      type: object
      properties:
        logAllModules:
          type: boolean
          description: "Collect logs for all modules. If true, logged modules list\
            \ is not taken into account only ignored modules"
        logAllResources:
          type: boolean
          description: "Collect logs for all resources. If true, logged resources\
            \ list is not taken into account only ignored resources"
        loggedModules:
          uniqueItems: true
          type: array
          description: List of modules for which logs are collected.
          items:
            $ref: "#/components/schemas/Module"
        ignoredModules:
          uniqueItems: true
          type: array
          description: List of modules that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Module"
        loggedResources:
          uniqueItems: true
          type: array
          description: List of resources for which logs are collected.
          items:
            $ref: "#/components/schemas/Resource"
        ignoredResources:
          uniqueItems: true
          type: array
          description: List of resources that will be ignored when logging.
          items:
            $ref: "#/components/schemas/Resource"
      description: Settings of event logging
    AuthenticationSettingsUpdateDto:
      required:
      - disableLocalhostUser
      type: object
      properties:
        disableLocalhostUser:
          type: boolean
          description: Disable using localhost user for requests from localhost
        oauth2Providers:
          type: array
          items:
            $ref: "#/components/schemas/OAuth2ProviderSettingsDto"
    OAuth2ProviderSettingsDto:
      required:
      - authorizationUrl
      - clientId
      - clientSecret
      - jwkSetUrl
      - logoutUrl
      - name
      - postLogoutUrl
      - tokenUrl
      type: object
      properties:
        name:
          type: string
          description: Name of OAuth2 Provider
        issuerUrl:
          type: string
          description: "URL of issuer issuing authentication tokens. If provided,\
            \ authentication via JWT token is enabled for this provider."
        clientId:
          type: string
          description: The client ID used to identify the client application during
            the authorization process.
        clientSecret:
          type: string
          description: The client secret used by the client application to authenticate
            with the authorization server.
        authorizationUrl:
          type: string
          description: The URL where the authorization server redirects the user for
            login and authorization.
        tokenUrl:
          type: string
          description: The URl used to exchange the authorization code or credentials
            for an access token.
        jwkSetUrl:
          type: string
          description: The URL where the JSON Web Key Set (JWKS) containing the public
            keys used to verify JWT tokens can be retrieved.
        scope:
          type: array
          description: ' The list of scopes that define the access levels and permissions
            requested by the client application.'
          items:
            type: string
            description: ' The list of scopes that define the access levels and permissions
              requested by the client application.'
        logoutUrl:
          type: string
          description: URL to end session on provider side.
        postLogoutUrl:
          type: string
          description: URL that user will be redirected after logout from application.
        userInfoUrl:
          type: string
          description: The URL containing information about user.
        audiences:
          type: array
          description: "A list of expected audiences for validating the issued tokens,\
            \ used to match the intended recipients of the tokens."
          items:
            type: string
            description: "A list of expected audiences for validating the issued tokens,\
              \ used to match the intended recipients of the tokens."
        skew:
          type: integer
          description: "The allowed time skew, in seconds, for token validation. This\
            \ accounts for clock differences between systems. Default value is 30\
            \ seconds."
          format: int32
        sessionMaxInactiveInterval:
          type: integer
          description: Duration in seconds after which will inactive user's session
            be terminated.
          format: int32
    OAuth2ProviderSettingsUpdateDto:
      required:
      - authorizationUrl
      - clientId
      - clientSecret
      - jwkSetUrl
      - logoutUrl
      - postLogoutUrl
      - tokenUrl
      type: object
      properties:
        issuerUrl:
          type: string
          description: "URL of issuer issuing authentication tokens. If provided,\
            \ authentication via JWT token is enabled for this provider."
        clientId:
          type: string
          description: The client ID used to identify the client application during
            the authorization process.
        clientSecret:
          type: string
          description: The client secret used by the client application to authenticate
            with the authorization server.
        authorizationUrl:
          type: string
          description: The URL where the authorization server redirects the user for
            login and authorization.
        tokenUrl:
          type: string
          description: The URl used to exchange the authorization code or credentials
            for an access token.
        jwkSetUrl:
          type: string
          description: The URL where the JSON Web Key Set (JWKS) containing the public
            keys used to verify JWT tokens can be retrieved.
        scope:
          type: array
          description: ' The list of scopes that define the access levels and permissions
            requested by the client application.'
          items:
            type: string
            description: ' The list of scopes that define the access levels and permissions
              requested by the client application.'
        logoutUrl:
          type: string
          description: URL to end session on provider side.
        postLogoutUrl:
          type: string
          description: URL that user will be redirected after logout from application.
        userInfoUrl:
          type: string
          description: The URL containing information about user.
        audiences:
          type: array
          description: "A list of expected audiences for validating the issued tokens,\
            \ used to match the intended recipients of the tokens."
          items:
            type: string
            description: "A list of expected audiences for validating the issued tokens,\
              \ used to match the intended recipients of the tokens."
        skew:
          type: integer
          description: "The allowed time skew, in seconds, for token validation. This\
            \ accounts for clock differences between systems. Default value is 30\
            \ seconds."
          format: int32
        sessionMaxInactiveInterval:
          type: integer
          description: Duration in seconds after which will inactive user's session
            be terminated.
          format: int32
    FilterConditionOperator:
      type: string
      description: Condition for the search filter
      enum:
      - EQUALS
      - NOT_EQUALS
      - GREATER
      - GREATER_OR_EQUAL
      - LESSER
      - LESSER_OR_EQUAL
      - CONTAINS
      - NOT_CONTAINS
      - STARTS_WITH
      - ENDS_WITH
      - EMPTY
      - NOT_EMPTY
      - SUCCESS
      - FAILED
      - UNKNOWN
      - NOT_CHECKED
    FilterFieldSource:
      type: string
      description: Field group of search filter
      enum:
      - meta
      - custom
      - data
      - property
    SearchFilterRequestDto:
      required:
      - condition
      - fieldIdentifier
      - fieldSource
      type: object
      properties:
        fieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
        fieldIdentifier:
          type: string
          description: "Field identifier of search filter. List of available fields\
            \ with their identifiers can be retrieved from corresponding endpoint\
            \ `GET /v1/{resource}/search`, e.g.: [**GET /v1/certificates/search**](../core-certificate/#tag/Certificate-Inventory/operation/getSearchableFieldInformation)"
        condition:
          $ref: "#/components/schemas/FilterConditionOperator"
        value:
          type: object
          description: Value to match
      description: Certificate filter input
    SearchRequestDto:
      type: object
      properties:
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: "#/components/schemas/SearchFilterRequestDto"
        itemsPerPage:
          maximum: 1000
          type: integer
          description: Number of entries per page
          format: int32
          default: 10
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
          default: 1
    ActorRecord:
      required:
      - authMethod
      - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ActorType"
        authMethod:
          $ref: "#/components/schemas/AuthMethod"
        uuid:
          type: string
          format: uuid
        name:
          type: string
      description: Actor of log record
    ActorType:
      type: string
      enum:
      - anonymous
      - core
      - user
      - connector
      - protocol
    AuditLogDto:
      required:
      - actor
      - id
      - loggedAt
      - module
      - operation
      - operationResult
      - resource
      - version
      type: object
      properties:
        id:
          type: integer
          description: Audit log Id
          format: int64
        version:
          type: string
          description: Log schema version
        loggedAt:
          type: string
          description: Time when the audit log is stored
          format: date-time
        module:
          $ref: "#/components/schemas/Module"
        actor:
          $ref: "#/components/schemas/ActorRecord"
        source:
          $ref: "#/components/schemas/SourceRecord"
        resource:
          $ref: "#/components/schemas/ResourceRecord"
        affiliatedResource:
          $ref: "#/components/schemas/ResourceRecord"
        operation:
          $ref: "#/components/schemas/Operation"
        operationResult:
          $ref: "#/components/schemas/OperationResult"
        message:
          type: string
          description: Additional message
        operationData:
          type: object
          description: Structured data dependent on resource and its operation
        additionalData:
          type: object
          additionalProperties:
            type: object
            description: Additional data specific to event logged
          description: Additional data specific to event logged
      description: Audit log items
    AuditLogResponseDto:
      required:
      - items
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
      type: object
      properties:
        itemsPerPage:
          type: integer
          description: Number of entries per page
          format: int32
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
        totalPages:
          type: integer
          description: Number of pages available
          format: int32
        totalItems:
          type: integer
          description: Number of items available
          format: int64
        items:
          type: array
          description: Audit log items
          items:
            $ref: "#/components/schemas/AuditLogDto"
    AuthMethod:
      type: string
      enum:
      - none
      - certificate
      - token
      - session
      - apiKey
      - userProxy
    Operation:
      type: string
      description: Resource operation that is being logged
      enum:
      - unknown
      - list
      - detail
      - create
      - update
      - delete
      - forceDelete
      - add
      - remove
      - request
      - register
      - enable
      - disable
      - activate
      - deactivate
      - listAssociations
      - associate
      - disassociate
      - history
      - summary
      - checkCompliance
      - checkValidation
      - issue
      - renew
      - rekey
      - revoke
      - export
      - getStatus
      - getContent
      - getChain
      - download
      - downloadChain
      - getProtocolInfo
      - listProtocolCertificates
      - updateProtocolIssueProfile
      - activateProtocol
      - deactivateProtocol
      - acmeDirectory
      - acmeNonce
      - acmeKeyRollover
      - acmeValidate
      - acmeFinalize
      - scepCaCapabilities
      - scepCertificatePoll
      - scepTransactionCheck
      - cmpConfirm
      - upload
      - sync
      - compromise
      - destroy
      - updateKeyUsage
      - encrypt
      - decrypt
      - sign
      - verify
      - randomData
      - pushToLocation
      - removeFromLocation
      - issueInLocation
      - renewInLocation
      - connect
      - reconnect
      - checkHealth
      - statistics
      - approve
      - approveOverride
      - reject
      - rejectOverride
      - login
      - logout
      - authentication
      - getUserProfile
      - updateUserProfile
      - identify
      - markAsRead
      - getPermissions
      - getObjectPermissions
      - updatePermissions
      - updateObjectPermissions
      - schedule
      - listAttributes
      - validateAttributes
      - attributeCallback
      - updateAttributeResources
      - updateAttributeContent
      - deleteAttributeContent
      - promoteMetadata
      - listCertificateProfiles
      - listCas
    OperationResult:
      type: string
      description: Result of the resource operation. Either success or failed
      enum:
      - success
      - failure
    ResourceRecord:
      required:
      - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/Resource"
        uuids:
          type: array
          items:
            type: string
            format: uuid
        names:
          type: array
          items:
            type: string
      description: Affiliated resource that is related to subject resource
    SourceRecord:
      required:
      - method
      - path
      type: object
      properties:
        method:
          type: string
        path:
          type: string
        contentType:
          type: string
        ipAddress:
          type: string
        userAgent:
          type: string
      description: Source of log record
    StatisticsDto:
      type: object
      properties:
        totalCertificates:
          type: integer
          description: Number Certificates available
          format: int64
        totalGroups:
          type: integer
          description: Number of Groups
          format: int64
        totalDiscoveries:
          type: integer
          description: Number of Discoveries triggered
          format: int64
        totalConnectors:
          type: integer
          description: Number of Connectors added
          format: int64
        totalRaProfiles:
          type: integer
          description: Number of RA Profiles in the platform
          format: int64
        totalCredentials:
          type: integer
          description: Number of Credentials
          format: int64
        totalAuthorities:
          type: integer
          description: Number of Authority instances
          format: int64
        totalAdministrators:
          type: integer
          description: Number of Administrators
          format: int64
        totalClients:
          type: integer
          description: Number of Clients added
          format: int64
        groupStatByCertificateCount:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by Group
            format: int64
          description: Map of Certificate count by Group
        raProfileStatByCertificateCount:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by RA Profile
            format: int64
          description: Map of Certificate count by RA Profile
        certificateStatByType:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by Type
            format: int64
          description: Map of Certificate count by Type
        certificateStatByExpiry:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by expiry date
            format: int64
          description: Map of Certificate count by expiry date
        certificateStatByKeySize:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by key size
            format: int64
          description: Map of Certificate count by key size
        certificateStatBySubjectType:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by subject type
            format: int64
          description: Map of Certificate count by subject type
        certificateStatByState:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by state
            format: int64
          description: Map of Certificate count by state
        certificateStatByValidationStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by validationStatus
            format: int64
          description: Map of Certificate count by validationStatus
        certificateStatByComplianceStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by compliance status
            format: int64
          description: Map of Certificate count by compliance status
        connectorStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Connector count by status
            format: int64
          description: Map of Connector count by status
        raProfileStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of RA Profile count by status
            format: int64
          description: Map of RA Profile count by status
        administratorStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Administrator count by status
            format: int64
          description: Map of Administrator count by status
        clientStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Client count by status
            format: int64
          description: Map of Client count by status
    AuthenticationSettingsDto:
      required:
      - disableLocalhostUser
      type: object
      properties:
        disableLocalhostUser:
          type: boolean
          description: Disable using localhost user for requests from localhost
        oauth2Providers:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/OAuth2ProviderSettingsDto"
    ResourceDto:
      required:
      - hasCustomAttributes
      - hasEvents
      - hasGroups
      - hasObjectAccess
      - hasOwner
      - hasRuleEvaluator
      - resource
      type: object
      properties:
        resource:
          $ref: "#/components/schemas/Resource"
        hasObjectAccess:
          type: boolean
          description: "If resource has Object access permissions. True = Yes, False\
            \ = No"
        hasCustomAttributes:
          type: boolean
          description: Support assigning custom attributes to resource objects
        hasGroups:
          type: boolean
          description: Support assigning groups to resource objects
        hasOwner:
          type: boolean
          description: Support assigning owner to resource objects
        hasEvents:
          type: boolean
          description: Has events that can be used in triggers
        hasRuleEvaluator:
          type: boolean
          description: Has rule evaluator that can evaluate conditions and actions
    AttributeContentType:
      type: string
      description: Attribute filter field content type
      enum:
      - string
      - text
      - integer
      - boolean
      - float
      - date
      - time
      - datetime
      - secret
      - file
      - credential
      - codeblock
      - object
    FilterFieldType:
      type: string
      description: Type of the field
      enum:
      - string
      - number
      - list
      - date
      - datetime
      - boolean
    PlatformEnum:
      type: string
      description: Platform enum of the field values
      enum:
      - Resource
      - FilterConditionOperator
      - FilterFieldType
      - FilterFieldSource
      - SettingsSection
      - NotificationType
      - AuthType
      - HealthStatus
      - ConnectorStatus
      - FunctionGroupCode
      - CertificateType
      - CertificateState
      - CertificateValidationStatus
      - CertificateFormat
      - CertificateFormatEncoding
      - CertificateValidationCheck
      - CertificateRevocationReason
      - CertificateRequestFormat
      - DiscoveryStatus
      - CertificateProtocol
      - CertificateSubjectType
      - KeyAlgorithm
      - KeyFormat
      - KeyState
      - KeyType
      - KeyUsage
      - KeyRequestType
      - KeyCompromiseReason
      - TokenInstanceStatus
      - DigestAlgorithm
      - RsaSignatureScheme
      - RsaEncryptionScheme
      - ComplianceStatus
      - ComplianceRuleStatus
      - AccountStatus
      - ProtectionMethod
      - CmpProfileVariant
      - AttributeType
      - AttributeContentType
      - AttributeConstraintType
      - AttributeValueTarget
      - ProgrammingLanguageEnum
      - SchedulerJobExecutionStatus
      - TriggerType
      - ConditionType
      - ExecutionType
      - ResourceEvent
      - Module
      - ActorType
      - AuthMethod
      - Operation
      - OperationResult
    SearchFieldDataByGroupDto:
      required:
      - filterFieldSource
      type: object
      properties:
        filterFieldSource:
          $ref: "#/components/schemas/FilterFieldSource"
        searchFieldData:
          type: array
          description: List of search fields for specified search group
          items:
            $ref: "#/components/schemas/SearchFieldDataDto"
    SearchFieldDataDto:
      required:
      - conditions
      - fieldIdentifier
      - fieldLabel
      - type
      type: object
      properties:
        fieldIdentifier:
          type: string
          description: Identifier of field to search
        fieldLabel:
          type: string
          description: Label for the field
        type:
          $ref: "#/components/schemas/FilterFieldType"
        conditions:
          type: array
          description: List of available conditions for the field
          items:
            $ref: "#/components/schemas/FilterConditionOperator"
        platformEnum:
          $ref: "#/components/schemas/PlatformEnum"
        attributeContentType:
          $ref: "#/components/schemas/AttributeContentType"
        value:
          type: object
          description: Available values for the field
        multiValue:
          type: boolean
          description: "Multivalue flag. true = yes, false = no"
      description: List of search fields for specified search group
    ResourceEventDto:
      required:
      - event
      type: object
      properties:
        event:
          type: string
          description: Resource event code
          example: discoveryFinished
          enum:
          - discoveryFinished
        producedResource:
          $ref: "#/components/schemas/Resource"
    EnumItemDto:
      required:
      - code
      - label
      type: object
      properties:
        code:
          type: string
          description: Enum item code
          example: X509
        label:
          type: string
          description: Enum item display label
          example: X.509
        description:
          type: string
          description: Enum item description
          example: X.509 Certificate type
