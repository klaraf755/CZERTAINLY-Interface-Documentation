openapi: 3.1.0
info:
  title: CZERTAINLY Cryptography Provider API
  description: REST API for implementations of custom Cryptography Provider
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: info@czertainly.com
  license:
    name: MIT License
    url: https://github.com/CZERTAINLY/CZERTAINLY/blob/develop/LICENSE.md
  version: 2.14.1-SNAPSHOT
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:35295
  description: Generated server url
tags:
- name: Connector Info
  description: "Connector Information API. Each connector may have multiple functions\
    \ represented by FunctionGroupCode. For each FunctionGroupCode there is a list\
    \ of implemented end points. These endpoints must be according the specified interface,\
    \ this is validated by the core. You can also implement helper end points that\
    \ are used for callbacks and other relevant operations specific to implementation."
- name: Cryptographic Operations
  description: Cryptographic Operations API defines operations that can be executed
    on existing cryptographic Keys.
- name: Health check
  description: "Connector Health check API. Connector returns own status and in some\
    \ cases can return status of services on which it depends like database, HSM and\
    \ so on."
- name: Token Management
  description: "Token Management API is used to manage Token instance created from\
    \ Cryptography Providers. Token represents connection with key stores that can\
    \ perform cryptographic operations. It can manage one or more key stores, or it\
    \ can be used with external key stores, such as vaults, hardware security modules,\
    \ etc. Token Profile represents particular key store that can be used to execute\
    \ cryptographic operations and key management through the Token instance."
- name: Key Management
  description: Key Management API for cryptographic key management operations. Each
    key is managed by a specific token that is connected through the Token instance.
- name: Connector Attributes
  description: Connector Attributes API. Provides information about supported Attributes
    of the connector. Attributes are specific to implementation and gives information
    about the data that can be exchanged and properly parsed by the connector. Part
    of this API is validation of the Attributes.
paths:
  /v1/{functionalGroup}/{kind}/attributes/validate:
    post:
      tags:
      - Connector Attributes
      summary: Validate Attributes
      operationId: validateAttributes
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "200":
          description: Attribute validation completed
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Attribute validation failed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens:
    get:
      tags:
      - Token Management
      summary: List Token instances
      operationId: listTokenInstances
      responses:
        "200":
          description: Token instance list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TokenInstanceDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Token Management
      summary: Create Token instance
      operationId: createTokenInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenInstanceRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Token instance created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}:
    get:
      tags:
      - Token Management
      summary: Get Token instance
      operationId: getTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "200":
          description: Token instance retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    post:
      tags:
      - Token Management
      summary: Update Token instance
      operationId: updateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenInstanceRequestDto"
        required: true
      responses:
        "200":
          description: Token instance updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Token Management
      summary: Remove Token instance
      operationId: removeTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Token instance removed
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/tokenProfile/attributes/validate:
    post:
      tags:
      - Token Management
      summary: Validate Token Profile Attributes
      operationId: validateTokenProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token Profile Attributes validated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/{keyUuid}/verify:
    post:
      tags:
      - Cryptographic Operations
      summary: Verify data using a Key
      operationId: verifyData
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      - name: keyUuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Data decrypted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyDataResponseDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/{keyUuid}/sign:
    post:
      tags:
      - Cryptographic Operations
      summary: Sign data using a Key
      operationId: signData
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      - name: keyUuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignDataRequestDto"
        required: true
      responses:
        "200":
          description: Data signed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignDataResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/{keyUuid}/encrypt:
    post:
      tags:
      - Cryptographic Operations
      summary: Encrypt data using a Key
      operationId: encryptData
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      - name: keyUuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CipherDataRequestDto"
        required: true
      responses:
        "200":
          description: Data encrypted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptDataResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/{keyUuid}/decrypt:
    post:
      tags:
      - Cryptographic Operations
      summary: Decrypt data using a Key
      operationId: decryptData
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      - name: keyUuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CipherDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Data decrypted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptDataResponseDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/secret:
    post:
      tags:
      - Key Management
      summary: Create a Secret Key
      operationId: createSecretKey
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKeyRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyDataResponseDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/secret/attributes/validate:
    post:
      tags:
      - Key Management
      summary: Validate list of Attributes to create a Secret Key
      operationId: validateCreateSecretKeyAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "204":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/random:
    post:
      tags:
      - Cryptographic Operations
      summary: Generate random data
      operationId: randomData
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RandomDataRequestDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Random data generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RandomDataResponseDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/random/attributes/validate:
    post:
      tags:
      - Cryptographic Operations
      summary: Validate random generator Attributes
      operationId: validateRandomAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "204":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/pair:
    post:
      tags:
      - Key Management
      summary: "Create a Key Pair, Public and Private Key"
      operationId: createKeyPair
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKeyRequestDto"
        required: true
      responses:
        "200":
          description: Key Pair created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairDataResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/pair/attributes/validate:
    post:
      tags:
      - Key Management
      summary: Validate list of Attributes to create a Key Pair
      operationId: validateCreateKeyPairAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "204":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/activate/attributes/validate:
    post:
      tags:
      - Token Management
      summary: Validate Token activation Attributes
      operationId: validateTokenInstanceActivationAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Token activation Attributes validated
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/deactivate:
    patch:
      tags:
      - Token Management
      summary: Deactivate Token
      operationId: deactivateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "204":
          description: Token deactivated
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/activate:
    patch:
      tags:
      - Token Management
      summary: Activate Token
      operationId: activateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RequestAttributeDto"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "204":
          description: Token activated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1:
    get:
      tags:
      - Connector Info
      summary: List supported functions of the connector
      description: Returns map of functional code and implemented end points
      operationId: listSupportedFunctions
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Functions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InfoResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/{functionalGroup}/{kind}/attributes:
    get:
      tags:
      - Connector Attributes
      summary: List available Attributes
      operationId: listAttributeDefinitions
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/health:
    get:
      tags:
      - Health check
      summary: Health check
      operationId: checkHealth
      responses:
        "200":
          description: Health check completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/tokenProfile/attributes:
    get:
      tags:
      - Token Management
      summary: List Token Profile Attributes
      operationId: listTokenProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token Profile Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/status:
    get:
      tags:
      - Token Management
      summary: Get Token instance status
      description: Returns the connection status of the Token instance including additional
        information that might be useful
      operationId: getTokenInstanceStatus
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "200":
          description: Token instance status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInstanceStatusDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys:
    get:
      tags:
      - Key Management
      summary: List Keys for the Token instance
      operationId: listKeys
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Keys listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KeyDataResponseDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/{keyUuid}:
    get:
      tags:
      - Key Management
      summary: Get details about the Key
      operationId: getKey
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      - name: keyUuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Key data retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyDataResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
    delete:
      tags:
      - Key Management
      summary: Destroy a Key
      operationId: destroyKey
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      - name: keyUuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "422":
          description: Unprocessable Entity
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "204":
          description: Key destroyed
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/secret/attributes:
    get:
      tags:
      - Key Management
      summary: List of Attributes to create a Secret Key
      operationId: listCreateSecretKeyAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/random/attributes:
    get:
      tags:
      - Cryptographic Operations
      summary: List of random generator Attributes
      operationId: listRandomAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/keys/pair/attributes:
    get:
      tags:
      - Key Management
      summary: List of Attributes to create a Key Pair
      operationId: listCreateKeyPairAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
  /v1/cryptographyProvider/tokens/{uuid}/activate/attributes:
    get:
      tags:
      - Token Management
      summary: List Token activation Attributes
      operationId: listTokenInstanceActivationAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token activation Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAttributeDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageDto"
components:
  schemas:
    AttributeCallback:
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          type: array
          description: Mappings for the callback method
          items:
            $ref: "#/components/schemas/AttributeCallbackMapping"
          uniqueItems: true
      required:
      - callbackContext
      - callbackMethod
      - mappings
    AttributeCallbackMapping:
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          $ref: "#/components/schemas/AttributeType"
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
        attributeContentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: 'Type of the attribute content. '
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          type: array
          description: Set of targets for propagating value.
          items:
            $ref: "#/components/schemas/AttributeValueTarget"
          uniqueItems: true
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      required:
      - targets
      - to
    AttributeConstraintType:
      type: string
      enum:
      - regExp
      - range
      - dateTime
    AttributeContentType:
      type: string
      enum:
      - string
      - text
      - integer
      - boolean
      - float
      - date
      - time
      - datetime
      - secret
      - file
      - credential
      - codeblock
      - object
    AttributeType:
      type: string
      enum:
      - data
      - group
      - info
      - meta
      - custom
    AttributeValueTarget:
      type: string
      enum:
      - pathVariable
      - requestParameter
      - body
    BaseAttributeConstraint:
      type: object
      description: Optional regular expressions and constraints used for validating
        the Attribute content
      oneOf:
      - $ref: "#/components/schemas/RegexpAttributeConstraint"
      - $ref: "#/components/schemas/RangeAttributeConstraint"
      - $ref: "#/components/schemas/DateTimeAttributeConstraint"
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          type: object
          description: Attribute Constraint Data
      required:
      - data
      - type
    BaseAttributeContentDto:
      type: object
      description: Base Attribute content definition
      oneOf:
      - $ref: "#/components/schemas/BooleanAttributeContent"
      - $ref: "#/components/schemas/CodeBlockAttributeContent"
      - $ref: "#/components/schemas/CredentialAttributeContent"
      - $ref: "#/components/schemas/DateAttributeContent"
      - $ref: "#/components/schemas/DateTimeAttributeContent"
      - $ref: "#/components/schemas/FileAttributeContent"
      - $ref: "#/components/schemas/FloatAttributeContent"
      - $ref: "#/components/schemas/IntegerAttributeContent"
      - $ref: "#/components/schemas/ObjectAttributeContent"
      - $ref: "#/components/schemas/SecretAttributeContent"
      - $ref: "#/components/schemas/StringAttributeContent"
      - $ref: "#/components/schemas/TextAttributeContent"
      - $ref: "#/components/schemas/TimeAttributeContent"
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      required:
      - data
    BooleanAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: boolean
          description: Boolean attribute value
      required:
      - data
    CodeBlockAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/CodeBlockAttributeContentData"
          description: CodeBlock attribute content data
      required:
      - data
    CodeBlockAttributeContentData:
      type: object
      properties:
        language:
          $ref: "#/components/schemas/ProgrammingLanguageEnum"
          description: Definition of programming languages used for code
          example: "JAVA, PHP, C, etc"
        code:
          type: string
          description: Block of the code in Base64. Formatting of the code is specified
            by variable language
      required:
      - code
      - language
    CredentialAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/CredentialAttributeContentData"
          description: Credential attribute content data
      required:
      - data
    CredentialAttributeContentData:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: "#/components/schemas/DataAttribute"
      required:
      - attributes
      - kind
      - name
      - uuid
    DataAttribute:
      type: object
      description: Data attribute allows to store and transfer dynamic data. Its content
        can be edited and send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/DataAttributeProperties"
          description: Properties of the Attributes
        constraints:
          type: array
          description: Optional regular expressions and constraints used for validating
            the Attribute content
          items:
            $ref: "#/components/schemas/BaseAttributeConstraint"
          oneOf:
          - $ref: "#/components/schemas/RegexpAttributeConstraint"
          - $ref: "#/components/schemas/RangeAttributeConstraint"
          - $ref: "#/components/schemas/DateTimeAttributeConstraint"
        attributeCallback:
          $ref: "#/components/schemas/AttributeCallback"
          description: Optional definition of callback for getting the content of
            the Attribute based on the action
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
    DataAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
    DateAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          format: date
          description: Date attribute value in format yyyy-MM-dd
      required:
      - data
    DateTimeAttributeConstraint:
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          $ref: "#/components/schemas/DateTimeAttributeConstraintData"
          description: DateTime Range Attribute Constraint Data
      required:
      - type
    DateTimeAttributeConstraintData:
      type: object
      properties:
        from:
          type: string
          format: date-time
          description: Start of the datetime for validation
        to:
          type: string
          format: date-time
          description: End of the datetime for validation
    DateTimeAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          format: date-time
          description: DateTime attribute value in format yyyy-MM-ddTHH:mm:ss.SSSXXX
      required:
      - data
    FileAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/FileAttributeContentData"
          description: File attribute content data
      required:
      - data
    FileAttributeContentData:
      type: object
      properties:
        content:
          type: string
          description: File content
        fileName:
          type: string
          description: Name of the file
        mimeType:
          type: string
          description: Type of the file uploaded
      required:
      - content
      - fileName
      - mimeType
    FloatAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: number
          format: float
          description: Float attribute value
      required:
      - data
    IntegerAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: integer
          format: int32
          description: Integer attribute value
      required:
      - data
    ObjectAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Object attribute content data
      required:
      - data
    ProgrammingLanguageEnum:
      type: string
      enum:
      - apacheconf
      - bash
      - basic
      - c
      - csharp
      - cpp
      - css
      - docker
      - fsharp
      - gherkin
      - git
      - go
      - graphql
      - html
      - http
      - ini
      - java
      - javascript
      - json
      - kotlin
      - latex
      - lisp
      - makefile
      - markdown
      - matlab
      - nginx
      - objectivec
      - perl
      - php
      - powershell
      - properties
      - python
      - ruby
      - rust
      - smalltalk
      - sql
      - typescript
      - vbnet
      - xquery
      - xml
      - yaml
    RangeAttributeConstraint:
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          $ref: "#/components/schemas/RangeAttributeConstraintData"
          description: Integer Range Attribute Constraint Data
      required:
      - type
    RangeAttributeConstraintData:
      type: object
      properties:
        from:
          type: integer
          format: int32
          description: Start of the range for validation
        to:
          type: integer
          format: int32
          description: End of the range for validation
    RegexpAttributeConstraint:
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: "#/components/schemas/AttributeConstraintType"
          description: Attribute Constraint Type
        data:
          type: string
          description: Regular Expression Attribute Constraint Data
      required:
      - type
    RequestAttributeDto:
      type: object
      description: Request attribute to send attribute content for object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Content Type of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
      required:
      - content
      - contentType
      - name
      - uuid
    SecretAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: "#/components/schemas/SecretAttributeContentData"
          description: Secret attribute content data
      required:
      - data
    SecretAttributeContentData:
      type: object
      properties:
        secret:
          type: string
          description: Secret attribute data
        protectionLevel:
          type: string
          description: Level of protection of the data
    StringAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: String attribute value
      required:
      - data
    TextAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Text attribute value
      required:
      - data
    TimeAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Time attribute value in format HH:mm:ss
      required:
      - data
    ErrorMessageDto:
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
      required:
      - message
    TokenInstanceRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Token instance name
        kind:
          type: string
          description: Kind of Token instance
        attributes:
          type: array
          description: List of Token instance Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - attributes
      - kind
      - name
    MetadataAttribute:
      type: object
      description: Info attribute contains content that is for metadata. Its content
        can not be edited and is not send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/MetadataAttributeProperties"
          description: Properties of the Attributes
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
    MetadataAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        global:
          type: boolean
          default: "false"
          description: Boolean determining if the Metadata is a global metadata.
        overwrite:
          type: boolean
          default: "false"
          description: Boolean determining if the new metadata content should overwrite
            (replace) existing content instead of appending.
      required:
      - label
      - visible
    TokenInstanceDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        metadata:
          type: array
          description: Token instance Metadata
          items:
            $ref: "#/components/schemas/MetadataAttribute"
      required:
      - name
      - uuid
    SignatureRequestData:
      type: object
      properties:
        data:
          type: string
          format: byte
          description: Data to be signed or verified
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
      required:
      - data
    VerifyDataRequestDto:
      type: object
      properties:
        signatureAttributes:
          type: array
          description: List of signature Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        data:
          type: array
          description: Data to be signed
          items:
            $ref: "#/components/schemas/SignatureRequestData"
        signatures:
          type: array
          description: Signatures to verify
          items:
            $ref: "#/components/schemas/SignatureRequestData"
      required:
      - data
      - signatureAttributes
      - signatures
    VerificationResponseData:
      type: object
      properties:
        result:
          type: boolean
          description: Data to be signed or verified
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details for the result, for example reason, etc."
      required:
      - result
    VerifyDataResponseDto:
      type: object
      properties:
        verifications:
          type: array
          description: Signatures
          items:
            $ref: "#/components/schemas/VerificationResponseData"
      required:
      - verifications
    SignDataRequestDto:
      type: object
      properties:
        signatureAttributes:
          type: array
          description: List of signature Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        data:
          type: array
          description: Data to be signed
          items:
            $ref: "#/components/schemas/SignatureRequestData"
      required:
      - data
      - signatureAttributes
    SignDataResponseDto:
      type: object
      properties:
        signatures:
          type: array
          description: Signatures
          items:
            $ref: "#/components/schemas/SignatureResponseData"
      required:
      - signatures
    SignatureResponseData:
      type: object
      properties:
        data:
          type: string
          format: byte
          description: Signature data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details of the data, for example, the data type,\
            \ error handling, etc."
      required:
      - data
    CipherDataRequestDto:
      type: object
      properties:
        cipherAttributes:
          type: array
          description: List of cipher Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        cipherData:
          type: array
          description: Encrypted/decrypted data
          items:
            $ref: "#/components/schemas/CipherRequestData"
      required:
      - cipherAttributes
      - cipherData
    CipherRequestData:
      type: object
      properties:
        data:
          type: string
          format: byte
          description: Encrypted/decrypted data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
      required:
      - data
    CipherResponseData:
      type: object
      properties:
        data:
          type: string
          format: byte
          description: "Encrypted/decrypted data. In case operation failed, it should\
            \ be null with provided details"
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details of the data, for example, the data type,\
            \ error handling, etc."
      required:
      - data
    EncryptDataResponseDto:
      type: object
      properties:
        encryptedData:
          type: array
          description: Encrypted data
          items:
            $ref: "#/components/schemas/CipherResponseData"
      required:
      - encryptedData
    DecryptDataResponseDto:
      type: object
      properties:
        decryptedData:
          type: array
          description: Decrypted data
          items:
            $ref: "#/components/schemas/CipherResponseData"
      required:
      - decryptedData
    CreateKeyRequestDto:
      type: object
      properties:
        tokenProfileAttributes:
          type: array
          description: List of Token Profile Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
        createKeyAttributes:
          type: array
          description: List of Attributes to create a Key
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - createKeyAttributes
      - tokenProfileAttributes
    KeyAlgorithm:
      type: string
      enum:
      - RSA
      - ECDSA
      - FALCON
      - CRYSTALS-Dilithium
      - SPHINCS+
      - Unknown
    KeyData:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/KeyType"
          description: Type of the Key
        algorithm:
          $ref: "#/components/schemas/KeyAlgorithm"
          description: Cryptographic algorithm of the Key
        format:
          $ref: "#/components/schemas/KeyFormat"
          description: Format of the Key
        value:
          $ref: "#/components/schemas/KeyValue"
          description: Value of the Key
          oneOf:
          - $ref: "#/components/schemas/RawKeyValue"
          - $ref: "#/components/schemas/SpkiKeyValue"
          - $ref: "#/components/schemas/PrkiKeyValue"
          - $ref: "#/components/schemas/EprkiKeyValue"
          - $ref: "#/components/schemas/CustomKeyValue"
        length:
          type: integer
          format: int32
          description: Bit length of the Key
        metadata:
          type: array
          description: "Metadata for the Key, specific data that can be technology\
            \ specific"
          items:
            $ref: "#/components/schemas/MetadataAttribute"
      required:
      - algorithm
      - format
      - length
      - type
      - value
    KeyDataResponseDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        association:
          type: string
          description: "Identification of association with related key data. This\
            \ may be used for example to associate public and private key, or associated\
            \ multiple key data of split key parts, etc."
        keyData:
          $ref: "#/components/schemas/KeyData"
          description: Data of the Key
      required:
      - keyData
      - name
      - uuid
    KeyFormat:
      type: string
      enum:
      - Raw
      - SubjectPublicKeyInfo
      - PrivateKeyInfo
      - EncryptedPrivateKeyInfo
      - Custom
    KeyType:
      type: string
      enum:
      - Secret
      - Public
      - Private
      - Split
    KeyValue:
      type: object
    RandomDataRequestDto:
      type: object
      properties:
        length:
          type: integer
          format: int32
          description: Number of random bytes to generate
        attributes:
          type: array
          description: Random generator Attributes
          items:
            $ref: "#/components/schemas/RequestAttributeDto"
      required:
      - length
    RandomDataResponseDto:
      type: object
      properties:
        data:
          type: string
          format: byte
          description: Random generated data
      required:
      - data
    KeyPairDataResponseDto:
      type: object
      properties:
        publicKeyData:
          $ref: "#/components/schemas/KeyDataResponseDto"
          description: Data of the Public Key
        privateKeyData:
          $ref: "#/components/schemas/KeyDataResponseDto"
          description: Data of the Private Key
      required:
      - privateKeyData
      - publicKeyData
    EndpointDto:
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        context:
          type: string
          description: Context of the Endpoint
          example: /v1
        method:
          type: string
          description: Method to be used for the Endpoint
          example: POST
        required:
          type: boolean
          description: True if the Endpoint is required for implementation
          example: true
      required:
      - context
      - method
      - name
      - required
      - uuid
    FunctionGroupCode:
      type: string
      enum:
      - credentialProvider
      - legacyAuthorityProvider
      - authorityProvider
      - discoveryProvider
      - entityProvider
      - complianceProvider
      - cryptographyProvider
      - notificationProvider
    InfoResponse:
      type: object
      properties:
        functionGroupCode:
          $ref: "#/components/schemas/FunctionGroupCode"
          description: Enumerated code of functional group
        kinds:
          type: array
          description: List of supported functional group kinds
          example:
          - SoftKeyStore
          - Basic
          - ApiKey
          items:
            type: string
        endPoints:
          type: array
          description: List of end points related to functional group
          items:
            $ref: "#/components/schemas/EndpointDto"
      required:
      - endPoints
      - functionGroupCode
      - kinds
    BaseAttributeDto:
      type: object
      description: Base Attribute definition
      discriminator:
        propertyName: type
        mapping:
          data: "#/components/schemas/DataAttribute"
          info: "#/components/schemas/InfoAttribute"
          group: "#/components/schemas/GroupAttribute"
          meta: "#/components/schemas/MetadataAttribute"
          custom: "#/components/schemas/CustomAttribute"
      oneOf:
      - $ref: "#/components/schemas/DataAttribute"
      - $ref: "#/components/schemas/InfoAttribute"
      - $ref: "#/components/schemas/GroupAttribute"
      - $ref: "#/components/schemas/MetadataAttribute"
      - $ref: "#/components/schemas/CustomAttribute"
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        content:
          type: object
          description: Content of the Attribute
      required:
      - name
      - type
      - uuid
    CustomAttribute:
      type: object
      description: Custom attribute allows to store and transfer dynamic data. Its
        content can be edited and send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/CustomAttributeProperties"
          description: Properties of the Attributes
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
    CustomAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        readOnly:
          type: boolean
          default: "false"
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
        list:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute contains list of values
            in the content
        multiSelect:
          type: boolean
          default: "false"
          description: Boolean determining if the Attribute can have multiple values
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
    GroupAttribute:
      type: object
      description: Group attribute and its content represents dynamic list of additional
        attributes retrieved by callback. Its content can not be edited and is not
        send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: List of all different types of attributes
          items:
            $ref: "#/components/schemas/BaseAttributeDto"
          oneOf:
          - $ref: "#/components/schemas/DataAttribute"
          - $ref: "#/components/schemas/InfoAttribute"
          - $ref: "#/components/schemas/GroupAttribute"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        attributeCallback:
          $ref: "#/components/schemas/AttributeCallback"
          description: Optional definition of callback for getting the content of
            the Attribute based on the action
      required:
      - name
      - type
      - uuid
    InfoAttribute:
      type: object
      description: Info attribute contains content that is for information purpose
        or represents additional information for object (metadata). Its content can
        not be edited and is not send in requests to store.
      properties:
        version:
          type: integer
          format: int32
          default: "2"
          description: Version of the Attribute
          example: 2
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: "#/components/schemas/BaseAttributeContentDto"
          oneOf:
          - $ref: "#/components/schemas/BooleanAttributeContent"
          - $ref: "#/components/schemas/CodeBlockAttributeContent"
          - $ref: "#/components/schemas/CredentialAttributeContent"
          - $ref: "#/components/schemas/DateAttributeContent"
          - $ref: "#/components/schemas/DateTimeAttributeContent"
          - $ref: "#/components/schemas/FileAttributeContent"
          - $ref: "#/components/schemas/FloatAttributeContent"
          - $ref: "#/components/schemas/IntegerAttributeContent"
          - $ref: "#/components/schemas/ObjectAttributeContent"
          - $ref: "#/components/schemas/SecretAttributeContent"
          - $ref: "#/components/schemas/StringAttributeContent"
          - $ref: "#/components/schemas/TextAttributeContent"
          - $ref: "#/components/schemas/TimeAttributeContent"
        type:
          $ref: "#/components/schemas/AttributeType"
          default: data
          description: Type of the Attribute
        contentType:
          $ref: "#/components/schemas/AttributeContentType"
          description: Type of the Content
        properties:
          $ref: "#/components/schemas/InfoAttributeProperties"
          description: Properties of the Attributes
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
    InfoAttributeProperties:
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          default: "true"
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      required:
      - label
      - visible
    HealthDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/HealthStatus"
          description: Current connector operational status
        description:
          type: string
          description: Detailed status description
        parts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/HealthDto"
          description: Nested status of services
      required:
      - status
    HealthStatus:
      type: string
      enum:
      - ok
      - nok
      - unknown
    TokenInstanceStatus:
      type: string
      enum:
      - Connected
      - Disconnected
      - Activated
      - Deactivated
      - Warning
      - Unknown
    TokenInstanceStatusComponent:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Token instance component status
        details:
          type: object
          additionalProperties:
            type: object
          description: Token instance component details
      required:
      - status
    TokenInstanceStatusDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TokenInstanceStatus"
          description: Token instance status
        components:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TokenInstanceStatusComponent"
          description: Components of the Token instance status
      required:
      - status
